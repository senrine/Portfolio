import {
  useTheme
} from "./chunk-KYDE6FLK.js";
import {
  iconButtonTheme
} from "./chunk-CO7SFVTO.js";

// src/components/icon-button.tsx
import * as React from "react";
import { twMerge } from "tailwind-merge";
import Ripple from "material-ripple-effects";
import { jsx } from "react/jsx-runtime";
var IconButton = React.forwardRef(
  ({
    as,
    color,
    variant,
    size,
    ripple,
    isCircular,
    className,
    children,
    ...rest
  }, ref) => {
    const Element = as ?? "button";
    const contextTheme = useTheme();
    const theme = contextTheme?.iconButton ?? iconButtonTheme;
    const defaultProps = theme?.defaultProps;
    size ??= defaultProps?.size ?? "md";
    ripple ??= defaultProps?.ripple ?? true;
    color ??= defaultProps?.color ?? "primary";
    variant ??= defaultProps?.variant ?? "solid";
    isCircular ??= defaultProps?.isCircular ?? false;
    const rippleEffect = ripple !== void 0 && new Ripple();
    const handleClick = (e) => {
      const onClick = rest?.onClick;
      const isDarkRipple = variant === "ghost" || color === "secondary";
      if (ripple) {
        rippleEffect.create(e, isDarkRipple ? "dark" : "light");
      }
      return typeof onClick === "function" && onClick(e);
    };
    const styles = twMerge(
      theme.baseStyle,
      theme["size"][size],
      theme["variant"][variant][color],
      className
    );
    return /* @__PURE__ */ jsx(
      Element,
      {
        ...rest,
        ref,
        className: styles,
        onClick: handleClick,
        "data-shape": isCircular ? "circular" : "default",
        children
      }
    );
  }
);
IconButton.displayName = "MaterialTailwind.IconButton";
var icon_button_default = IconButton;

export {
  IconButton,
  icon_button_default
};
