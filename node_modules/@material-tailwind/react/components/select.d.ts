import * as react_jsx_runtime from 'react/jsx-runtime';
import * as React from 'react';
import { Placement, OffsetOptions, UseFloatingReturn, useInteractions, FloatingFocusManagerProps } from '@floating-ui/react';
import { BaseComponent } from '../types/general.js';

interface SelectContextProps extends Omit<BaseComponent<HTMLElement>, "variant" | "selected"> {
    isError?: boolean;
    isSuccess?: boolean;
    isPill?: boolean;
    disabled?: boolean;
    placement?: Placement;
    offset?: OffsetOptions;
    activeIndex?: number | null;
    selectedIndex?: number | null;
    refs?: UseFloatingReturn["refs"];
    selected?: {
        value: string;
        element: React.ReactNode;
    };
    setSelected?: React.Dispatch<React.SetStateAction<{
        value: string;
        element: React.ReactNode;
    }>>;
    getItemProps?: ReturnType<typeof useInteractions>["getItemProps"];
    getReferenceProps?: ReturnType<typeof useInteractions>["getReferenceProps"];
    getFloatingProps?: ReturnType<typeof useInteractions>["getFloatingProps"];
    handleSelect?: (index: number | null) => void;
    context?: UseFloatingReturn["context"];
    elementsRef?: React.MutableRefObject<(HTMLElement | string | null)[]>;
    labelsRef?: React.MutableRefObject<({
        value: string;
        element: React.ReactNode;
    } | null)[]>;
    floatingStyles?: UseFloatingReturn["floatingStyles"];
    isOpen?: boolean;
    controlledValue?: string;
}
declare const SelectContext: React.Context<SelectContextProps>;
interface SelectProps {
    size?: BaseComponent<HTMLElement>["size"];
    color?: BaseComponent<HTMLElement>["color"];
    isPill?: boolean;
    isError?: boolean;
    isSuccess?: boolean;
    disabled?: boolean;
    placement?: Placement;
    offset?: OffsetOptions;
    value?: string;
    name?: string;
    onChange?: (arg: string) => void;
    children: React.ReactNode;
}
/**
 * @remarks
 * [Documentation](http://www.material-tailwind.com/docs/react/select) •
 * [Props Definition](https://www.material-tailwind.com/docs/react/select#select-props) •
 * [Theming Guide](https://www.material-tailwind.com/docs/react/select#select-theme)
 */
declare function SelectRoot({ size, color, isPill, isError, isSuccess, disabled, placement, offset, value, name, onChange, children, }: SelectProps): react_jsx_runtime.JSX.Element;
declare namespace SelectRoot {
    var displayName: string;
}
interface SelectTriggerProps extends Omit<Omit<React.AllHTMLAttributes<HTMLElement>, "as">, "children"> {
    as?: React.ElementType;
    indicator: React.ReactNode;
    placeholder?: string;
    className?: string;
    children?: ({ value, element, }: {
        value?: string;
        element?: React.ReactNode;
    }) => React.ReactNode;
}
declare const SelectTrigger: React.ForwardRefExoticComponent<SelectTriggerProps & React.RefAttributes<HTMLElement>>;
type SelectListBaseProps = Omit<React.AllHTMLAttributes<HTMLElement>, "as"> & FloatingFocusManagerProps;
interface SelectListProps extends Omit<SelectListBaseProps, "context" | "children"> {
    as?: React.ElementType;
    className?: string;
    children: React.ReactNode;
}
declare const SelectList: React.ForwardRefExoticComponent<SelectListProps & React.RefAttributes<HTMLElement>>;
interface SelectOptionProps extends Omit<React.AllHTMLAttributes<HTMLElement>, "as"> {
    as?: React.ElementType;
    className?: string;
    value?: string;
    ripple?: boolean;
    indicator?: React.ReactNode;
    children: React.ReactNode;
}
declare const SelectOption: React.ForwardRefExoticComponent<SelectOptionProps & React.RefAttributes<HTMLElement>>;
declare const Select: typeof SelectRoot & {
    Trigger: React.ForwardRefExoticComponent<SelectTriggerProps & React.RefAttributes<HTMLElement>>;
    List: React.ForwardRefExoticComponent<SelectListProps & React.RefAttributes<HTMLElement>>;
    Option: React.ForwardRefExoticComponent<SelectOptionProps & React.RefAttributes<HTMLElement>>;
};

export { Select, SelectContext, SelectContextProps, SelectList, SelectListProps, SelectOption, SelectOptionProps, SelectProps, SelectRoot, SelectTrigger, SelectTriggerProps, Select as default };
