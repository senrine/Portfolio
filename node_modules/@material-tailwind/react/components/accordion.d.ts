import * as react_jsx_runtime from 'react/jsx-runtime';
import * as React from 'react';

type accordionType = "single" | "multiple";
interface AccordionContextProps {
    type?: accordionType;
    activeItem?: string | string[];
    setActiveItem?: React.Dispatch<React.SetStateAction<string | string[]>>;
}
declare const AccordionContext: React.Context<AccordionContextProps>;
interface AccordionProps {
    type?: accordionType;
    value?: string | string[];
    defaultValue?: string | string[];
    children: React.ReactNode;
    onValueChange?: React.Dispatch<React.SetStateAction<string | string[]>>;
}
/**
 * @remarks
 * [Documentation](http://www.material-tailwind.com/docs/react/accordion) •
 * [Props Definition](https://www.material-tailwind.com/docs/react/accordion#accordion-props) •
 * [Theming Guide](https://www.material-tailwind.com/docs/react/accordion#accordion-theme)
 */
declare function AccordionRoot({ type, value, defaultValue, onValueChange, children, }: AccordionProps): react_jsx_runtime.JSX.Element;
declare namespace AccordionRoot {
    var displayName: string;
}
declare const AccordionItemContext: React.Context<string>;
interface AccordionItemProps extends Omit<React.AllHTMLAttributes<HTMLElement>, "as"> {
    as?: React.ElementType;
    value: string;
    disabled?: boolean;
    className?: string;
    children: React.ReactNode;
}
declare const AccordionItem: React.ForwardRefExoticComponent<AccordionItemProps & React.RefAttributes<HTMLElement>>;
interface AccordionTriggerProps extends Omit<React.AllHTMLAttributes<HTMLElement>, "as"> {
    as?: React.ElementType;
    className?: string;
    children: React.ReactNode;
}
declare const AccordionTrigger: React.ForwardRefExoticComponent<AccordionTriggerProps & React.RefAttributes<HTMLElement>>;
interface AccordionContentProps extends Omit<React.AllHTMLAttributes<HTMLElement>, "as"> {
    as?: React.ElementType;
    className?: string;
    children: React.ReactNode;
}
declare const AccordionContent: React.ForwardRefExoticComponent<AccordionContentProps & React.RefAttributes<HTMLElement>>;
declare const Accordion: typeof AccordionRoot & {
    Item: React.ForwardRefExoticComponent<AccordionItemProps & React.RefAttributes<HTMLElement>>;
    Trigger: React.ForwardRefExoticComponent<AccordionTriggerProps & React.RefAttributes<HTMLElement>>;
    Content: React.ForwardRefExoticComponent<AccordionContentProps & React.RefAttributes<HTMLElement>>;
};

export { Accordion, AccordionContent, AccordionContentProps, AccordionContext, AccordionContextProps, AccordionItem, AccordionItemContext, AccordionItemProps, AccordionProps, AccordionRoot, AccordionTrigger, AccordionTriggerProps, Accordion as default };
