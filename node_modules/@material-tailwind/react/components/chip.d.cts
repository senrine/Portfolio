import * as React from 'react';
import { BaseComponent } from '../types/general.cjs';

interface ChipContextProps extends BaseComponent<HTMLElement> {
    open?: boolean;
    setOpen?: React.Dispatch<React.SetStateAction<boolean>>;
}
declare const ChipContext: React.Context<ChipContextProps>;
interface ChipProps extends BaseComponent<HTMLElement> {
    as?: React.ElementType;
    className?: string;
    children: React.ReactNode;
    open?: boolean;
    onOpenChange?: () => void;
}
interface ChipLabelProps extends Omit<React.AllHTMLAttributes<HTMLElement>, "as"> {
    as?: React.ElementType;
    className?: string;
    children: React.ReactNode;
}
declare const ChipLabel: React.ForwardRefExoticComponent<ChipLabelProps & React.RefAttributes<HTMLElement>>;
interface ChipIconProps extends Omit<React.AllHTMLAttributes<HTMLElement>, "as"> {
    as?: React.ElementType;
    className?: string;
    children: React.ReactNode;
}
declare const ChipIcon: React.ForwardRefExoticComponent<ChipIconProps & React.RefAttributes<HTMLElement>>;
interface ChipDismissTriggerProps extends Omit<React.AllHTMLAttributes<HTMLElement>, "as"> {
    as?: React.ElementType;
    ripple?: boolean;
    className?: string;
    children?: React.ReactNode;
}
declare const ChipDismissTrigger: React.ForwardRefExoticComponent<ChipDismissTriggerProps & React.RefAttributes<HTMLElement>>;
declare const Chip: React.ForwardRefExoticComponent<ChipProps & React.RefAttributes<HTMLElement>> & {
    Icon: React.ForwardRefExoticComponent<ChipIconProps & React.RefAttributes<HTMLElement>>;
    Label: React.ForwardRefExoticComponent<ChipLabelProps & React.RefAttributes<HTMLElement>>;
    DismissTrigger: React.ForwardRefExoticComponent<ChipDismissTriggerProps & React.RefAttributes<HTMLElement>>;
};

export { Chip, ChipContext, ChipContextProps, ChipDismissTrigger, ChipDismissTriggerProps, ChipIcon, ChipIconProps, ChipLabel, ChipLabelProps, ChipProps, Chip as default };
