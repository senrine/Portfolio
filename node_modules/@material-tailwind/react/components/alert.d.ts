import * as React from 'react';
import { BaseComponent } from '../types/general.js';

interface AlertContextProps extends Omit<BaseComponent<HTMLElement>, "size"> {
    isPill?: boolean;
    open?: boolean;
    setOpen?: React.Dispatch<React.SetStateAction<boolean>>;
}
declare const AlertContext: React.Context<AlertContextProps>;
interface AlertProps extends Omit<BaseComponent<HTMLElement>, "size"> {
    as?: React.ElementType;
    className?: string;
    isPill?: boolean;
    children: React.ReactNode;
    open?: boolean;
    onOpenChange?: () => void;
}
interface AlertContentProps extends Omit<React.AllHTMLAttributes<HTMLElement>, "as"> {
    as?: React.ElementType;
    className?: string;
    children: React.ReactNode;
}
declare const AlertContent: React.ForwardRefExoticComponent<AlertContentProps & React.RefAttributes<HTMLElement>>;
interface AlertIconProps extends Omit<React.AllHTMLAttributes<HTMLElement>, "as"> {
    as?: React.ElementType;
    className?: string;
    children: React.ReactNode;
}
declare const AlertIcon: React.ForwardRefExoticComponent<AlertIconProps & React.RefAttributes<HTMLElement>>;
interface AlertDismissTriggerProps extends Omit<React.AllHTMLAttributes<HTMLElement>, "as"> {
    as?: React.ElementType;
    ripple?: boolean;
    className?: string;
    children?: React.ReactNode;
}
declare const AlertDismissTrigger: React.ForwardRefExoticComponent<AlertDismissTriggerProps & React.RefAttributes<HTMLElement>>;
declare const Alert: React.ForwardRefExoticComponent<AlertProps & React.RefAttributes<HTMLElement>> & {
    Icon: React.ForwardRefExoticComponent<AlertIconProps & React.RefAttributes<HTMLElement>>;
    Content: React.ForwardRefExoticComponent<AlertContentProps & React.RefAttributes<HTMLElement>>;
    DismissTrigger: React.ForwardRefExoticComponent<AlertDismissTriggerProps & React.RefAttributes<HTMLElement>>;
};

export { Alert, AlertContent, AlertContentProps, AlertContext, AlertContextProps, AlertDismissTrigger, AlertDismissTriggerProps, AlertIcon, AlertIconProps, AlertProps, Alert as default };
