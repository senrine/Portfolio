import * as React from 'react';

type orientation = "horizontal" | "vertical";
type rect = {
    clientWidth: number;
    clientHeight: number;
    offsetLeft: number;
    offsetTop: number;
};
interface TabsContext {
    orientation?: orientation;
    activeTab?: string;
    setActiveTab?: React.Dispatch<React.SetStateAction<string>>;
    indicatorRect?: rect;
    setIndicatorRect?: React.Dispatch<React.SetStateAction<rect>>;
}
interface TabsProps extends Omit<React.AllHTMLAttributes<HTMLElement>, "as"> {
    as?: React.ElementType;
    value?: string;
    defaultValue?: string;
    orientation?: orientation;
    className?: string;
    children: React.ReactNode;
    onValueChange?: React.Dispatch<React.SetStateAction<string>>;
}
/**
 * @remarks
 * [Documentation](http://www.material-tailwind.com/docs/react/tabs) •
 * [Props Definition](https://www.material-tailwind.com/docs/react/tabs#tabs-props) •
 * [Theming Guide](https://www.material-tailwind.com/docs/react/tabs#tabs-theme)
 */
declare const TabsRoot: React.ForwardRefExoticComponent<TabsProps & React.RefAttributes<HTMLElement>>;
interface TabsListProps extends Omit<React.AllHTMLAttributes<HTMLElement>, "as"> {
    as?: React.ElementType;
    className?: string;
    children: React.ReactNode;
}
declare const TabsList: React.ForwardRefExoticComponent<TabsListProps & React.RefAttributes<HTMLElement>>;
interface TabsTriggerProps extends Omit<React.AllHTMLAttributes<HTMLElement>, "as"> {
    as?: React.ElementType;
    value: string;
    className?: string;
    children: React.ReactNode;
}
declare const TabsTrigger: React.ForwardRefExoticComponent<TabsTriggerProps & React.RefAttributes<HTMLElement>>;
interface TabsPanelProps extends Omit<React.AllHTMLAttributes<HTMLElement>, "as"> {
    as?: React.ElementType;
    value: string;
    className?: string;
    children: React.ReactNode;
}
declare const TabsPanel: React.ForwardRefExoticComponent<TabsPanelProps & React.RefAttributes<HTMLElement>>;
interface TabsTriggerIndicatorProps extends Omit<React.AllHTMLAttributes<HTMLElement>, "as"> {
    as?: React.ElementType;
    className?: string;
}
declare const TabsTriggerIndicator: React.ForwardRefExoticComponent<TabsTriggerIndicatorProps & React.RefAttributes<HTMLElement>>;
declare const Tabs: React.ForwardRefExoticComponent<TabsProps & React.RefAttributes<HTMLElement>> & {
    List: React.ForwardRefExoticComponent<TabsListProps & React.RefAttributes<HTMLElement>>;
    Trigger: React.ForwardRefExoticComponent<TabsTriggerProps & React.RefAttributes<HTMLElement>>;
    Panel: React.ForwardRefExoticComponent<TabsPanelProps & React.RefAttributes<HTMLElement>>;
    TriggerIndicator: React.ForwardRefExoticComponent<TabsTriggerIndicatorProps & React.RefAttributes<HTMLElement>>;
};

export { Tabs, TabsContext, TabsList, TabsListProps, TabsPanel, TabsPanelProps, TabsProps, TabsRoot, TabsTrigger, TabsTriggerIndicator, TabsTriggerIndicatorProps, TabsTriggerProps, Tabs as default, orientation, rect };
