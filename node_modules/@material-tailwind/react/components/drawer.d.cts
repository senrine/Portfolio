import * as react_jsx_runtime from 'react/jsx-runtime';
import * as React from 'react';
import { UseFloatingReturn, useInteractions, FloatingFocusManagerProps } from '@floating-ui/react';

type FloatingType = Partial<UseFloatingReturn> & Partial<ReturnType<typeof useInteractions>>;
interface DrawerContextProps extends FloatingType {
    open?: boolean;
    setOpen?: React.Dispatch<React.SetStateAction<boolean>>;
}
interface DrawerRootProps {
    open?: boolean;
    onOpenChange?: () => void;
    children: React.ReactNode;
}
declare function DrawerRoot({ open: controlledOpen, onOpenChange: setControlledOpen, children, }: DrawerRootProps): react_jsx_runtime.JSX.Element;
declare namespace DrawerRoot {
    var displayName: string;
}
interface DrawerTriggerProps extends Omit<React.AllHTMLAttributes<HTMLElement>, "as"> {
    as?: React.ElementType;
    className?: string;
    children: React.ReactNode;
}
declare const DrawerTrigger: React.ForwardRefExoticComponent<DrawerTriggerProps & React.RefAttributes<HTMLElement>>;
interface DrawerOverlayProps extends React.AllHTMLAttributes<HTMLDivElement> {
    className?: string;
    lockScroll?: boolean;
    children: React.ReactNode;
}
declare const DrawerOverlay: React.ForwardRefExoticComponent<DrawerOverlayProps & React.RefAttributes<HTMLDivElement>>;
type DrawerPanelBaseProps = Omit<React.AllHTMLAttributes<HTMLElement>, "as"> & FloatingFocusManagerProps;
interface DrawerPanelProps extends Omit<DrawerPanelBaseProps, "context" | "children"> {
    as?: React.ElementType;
    className?: string;
    placement?: "top" | "right" | "bottom" | "left";
    children: React.ReactNode;
}
declare const DrawerPanel: React.ForwardRefExoticComponent<DrawerPanelProps & React.RefAttributes<HTMLElement>>;
interface DrawerDismissTriggerProps extends Omit<React.AllHTMLAttributes<HTMLElement>, "as"> {
    as?: React.ElementType;
    className?: string;
    children: React.ReactNode;
}
declare const DrawerDismissTrigger: React.ForwardRefExoticComponent<DrawerDismissTriggerProps & React.RefAttributes<HTMLElement>>;
declare const Drawer: typeof DrawerRoot & {
    Trigger: React.ForwardRefExoticComponent<DrawerTriggerProps & React.RefAttributes<HTMLElement>>;
    Overlay: React.ForwardRefExoticComponent<DrawerOverlayProps & React.RefAttributes<HTMLDivElement>>;
    Panel: React.ForwardRefExoticComponent<DrawerPanelProps & React.RefAttributes<HTMLElement>>;
    DismissTrigger: React.ForwardRefExoticComponent<DrawerDismissTriggerProps & React.RefAttributes<HTMLElement>>;
};

export { Drawer, DrawerContextProps, DrawerDismissTrigger, DrawerDismissTriggerProps, DrawerOverlay, DrawerOverlayProps, DrawerPanel, DrawerPanelProps, DrawerRoot, DrawerRootProps, DrawerTrigger, DrawerTriggerProps, Drawer as default };
