import * as react_jsx_runtime from 'react/jsx-runtime';
import * as React from 'react';
import { UseFloatingReturn, useInteractions, FloatingFocusManagerProps } from '@floating-ui/react';
import { BaseComponent } from '../types/general.js';

type size = "xs" | BaseComponent<HTMLElement>["size"] | "xl" | "screen";
type FloatingType = Partial<UseFloatingReturn> & Partial<ReturnType<typeof useInteractions>>;
interface DialogContextProps extends FloatingType {
    open?: boolean;
    setOpen?: React.Dispatch<React.SetStateAction<boolean>>;
    size?: size;
}
interface DialogRootProps {
    size?: size;
    open?: boolean;
    onOpenChange?: () => void;
    children: React.ReactNode;
}
/**
 * @remarks
 * [Documentation](http://www.material-tailwind.com/docs/react/dialog) •
 * [Props Definition](https://www.material-tailwind.com/docs/react/dialog#dialog-props) •
 * [Theming Guide](https://www.material-tailwind.com/docs/react/dialog#dialog-theme)
 */
declare function DialogRoot({ size, open: controlledOpen, onOpenChange: setControlledOpen, children, }: DialogRootProps): react_jsx_runtime.JSX.Element;
declare namespace DialogRoot {
    var displayName: string;
}
interface DialogTriggerProps extends Omit<React.AllHTMLAttributes<HTMLElement>, "as"> {
    as?: React.ElementType;
    className?: string;
    children: React.ReactNode;
}
declare const DialogTrigger: React.ForwardRefExoticComponent<DialogTriggerProps & React.RefAttributes<HTMLElement>>;
interface DialogOverlayProps extends React.AllHTMLAttributes<HTMLDivElement> {
    className?: string;
    lockScroll?: boolean;
    children: React.ReactNode;
}
declare const DialogOverlay: React.ForwardRefExoticComponent<DialogOverlayProps & React.RefAttributes<HTMLDivElement>>;
type DialogContentBaseProps = Omit<React.AllHTMLAttributes<HTMLElement>, "as"> & FloatingFocusManagerProps;
interface DialogContentProps extends Omit<DialogContentBaseProps, "context" | "children"> {
    as?: React.ElementType;
    className?: string;
    children: React.ReactNode;
}
declare const DialogContent: React.ForwardRefExoticComponent<DialogContentProps & React.RefAttributes<HTMLElement>>;
interface DialogDismissTriggerProps extends Omit<React.AllHTMLAttributes<HTMLElement>, "as"> {
    as?: React.ElementType;
    className?: string;
    children: React.ReactNode;
}
declare const DialogDismissTrigger: React.ForwardRefExoticComponent<DialogDismissTriggerProps & React.RefAttributes<HTMLElement>>;
declare const Dialog: typeof DialogRoot & {
    Trigger: React.ForwardRefExoticComponent<DialogTriggerProps & React.RefAttributes<HTMLElement>>;
    Overlay: React.ForwardRefExoticComponent<DialogOverlayProps & React.RefAttributes<HTMLDivElement>>;
    Content: React.ForwardRefExoticComponent<DialogContentProps & React.RefAttributes<HTMLElement>>;
    DismissTrigger: React.ForwardRefExoticComponent<DialogDismissTriggerProps & React.RefAttributes<HTMLElement>>;
};

export { Dialog, DialogContent, DialogContentProps, DialogContextProps, DialogDismissTrigger, DialogDismissTriggerProps, DialogOverlay, DialogOverlayProps, DialogRoot, DialogRootProps, DialogTrigger, DialogTriggerProps, Dialog as default };
