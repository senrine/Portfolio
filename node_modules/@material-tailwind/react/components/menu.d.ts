import * as react_jsx_runtime from 'react/jsx-runtime';
import * as React from 'react';
import { useListItem, Placement, OffsetOptions, UseFloatingReturn, useInteractions, FloatingFocusManagerProps } from '@floating-ui/react';

type FloatingType = Partial<UseFloatingReturn> & Partial<ReturnType<typeof useInteractions>>;
interface MenuContextProps extends FloatingType {
    open?: boolean;
    setOpen?: React.Dispatch<React.SetStateAction<boolean>>;
    item?: ReturnType<typeof useListItem>;
    isNested?: boolean;
    activeIndex?: number | null;
    elementsRef?: React.MutableRefObject<(HTMLButtonElement | null)[]>;
    labelsRef?: React.MutableRefObject<React.ReactNode[]>;
}
declare const MenuContext: React.Context<MenuContextProps>;
interface MenuProps {
    open?: boolean;
    onOpenChange?: () => void;
    placement?: Placement;
    offset?: OffsetOptions;
    children: React.ReactNode;
}
/**
 * @remarks
 * [Documentation](http://www.material-tailwind.com/docs/react/menu) •
 * [Props Definition](https://www.material-tailwind.com/docs/react/menu#menu-props) •
 * [Theming Guide](https://www.material-tailwind.com/docs/react/menu#menu-theme)
 */
declare function MenuRoot(props: MenuProps): react_jsx_runtime.JSX.Element;
declare namespace MenuRoot {
    var displayName: string;
}
interface MenuTriggerProps extends Omit<React.AllHTMLAttributes<HTMLElement>, "as"> {
    as?: React.ElementType;
    className?: string;
    children: React.ReactNode;
}
declare const MenuTrigger: React.ForwardRefExoticComponent<MenuTriggerProps & React.RefAttributes<HTMLElement>>;
type MenuContentBaseProps = Omit<React.AllHTMLAttributes<HTMLElement>, "as"> & FloatingFocusManagerProps;
interface MenuContentProps extends Omit<MenuContentBaseProps, "context" | "children"> {
    as?: React.ElementType;
    className?: string;
    children: React.ReactNode;
}
declare const MenuContent: React.ForwardRefExoticComponent<MenuContentProps & React.RefAttributes<HTMLElement>>;
interface MenuItemProps extends Omit<React.AllHTMLAttributes<HTMLElement>, "as"> {
    as?: React.ElementType;
    className?: string;
    ripple?: boolean;
    disabled?: boolean;
    closeOnClick?: boolean;
    children: React.ReactNode;
}
declare const MenuItem: React.ForwardRefExoticComponent<MenuItemProps & React.RefAttributes<HTMLElement>>;
declare const Menu: typeof MenuRoot & {
    Trigger: React.ForwardRefExoticComponent<MenuTriggerProps & React.RefAttributes<HTMLElement>>;
    Content: React.ForwardRefExoticComponent<MenuContentProps & React.RefAttributes<HTMLElement>>;
    Item: React.ForwardRefExoticComponent<MenuItemProps & React.RefAttributes<HTMLElement>>;
};

export { Menu, MenuContent, MenuContentProps, MenuContext, MenuContextProps, MenuItem, MenuItemProps, MenuProps, MenuRoot, MenuTrigger, MenuTriggerProps, Menu as default };
