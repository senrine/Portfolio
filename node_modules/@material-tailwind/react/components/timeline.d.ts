import * as React from 'react';
import { BaseComponent } from '../types/general.js';

type Orientation = "horizontal" | "vertical";
type Mode = "stepper" | "timeline";
interface TimelineContextProps {
    value?: string;
    setValue?: (e: string) => void;
    color?: BaseComponent<HTMLElement>["color"];
    orientation?: Orientation;
    mode?: Mode;
    parentRef?: React.RefObject<HTMLElement>;
}
declare const TimelineContext: React.Context<TimelineContextProps>;
interface TimelineProps extends Omit<React.AllHTMLAttributes<HTMLElement>, "as" | "onChange" | "children"> {
    as?: React.ElementType;
    value?: string;
    defaultValue?: string;
    onChange?: (e: string) => void;
    color: BaseComponent<HTMLElement>["color"];
    orientation?: Orientation;
    mode?: Mode;
    className?: string;
    children: React.ReactNode;
}
declare const TimelineRoot: React.ForwardRefExoticComponent<TimelineProps & React.RefAttributes<HTMLElement>>;
interface TimelineItemProps extends Omit<React.AllHTMLAttributes<HTMLElement>, "as"> {
    as?: React.ElementType;
    value?: string;
    className?: string;
    disabled?: boolean;
    children: React.ReactNode;
}
declare const TimelineItem: React.ForwardRefExoticComponent<TimelineItemProps & React.RefAttributes<HTMLElement>>;
interface TimelineHeaderProps extends Omit<React.AllHTMLAttributes<HTMLElement>, "as"> {
    as?: React.ElementType;
    className?: string;
    children: React.ReactNode;
}
declare const TimelineHeader: React.ForwardRefExoticComponent<TimelineHeaderProps & React.RefAttributes<HTMLElement>>;
interface TimelineIconProps extends Omit<React.AllHTMLAttributes<HTMLElement>, "as"> {
    as?: React.ElementType;
    className?: string;
    children: React.ReactNode;
}
declare const TimelineIcon: React.ForwardRefExoticComponent<TimelineIconProps & React.RefAttributes<HTMLElement>>;
interface TimelineSeparatorProps extends Omit<React.AllHTMLAttributes<HTMLElement>, "as"> {
    as?: React.ElementType;
    className?: string;
    children: React.ReactNode;
}
declare const TimelineSeparator: React.ForwardRefExoticComponent<TimelineSeparatorProps & React.RefAttributes<HTMLElement>>;
interface TimelineBodyProps extends Omit<React.AllHTMLAttributes<HTMLElement>, "as"> {
    as?: React.ElementType;
    className?: string;
    children: React.ReactNode;
}
declare const TimelineBody: React.ForwardRefExoticComponent<TimelineBodyProps & React.RefAttributes<HTMLElement>>;
declare const Timeline: React.ForwardRefExoticComponent<TimelineProps & React.RefAttributes<HTMLElement>> & {
    Item: React.ForwardRefExoticComponent<TimelineItemProps & React.RefAttributes<HTMLElement>>;
    Icon: React.ForwardRefExoticComponent<TimelineIconProps & React.RefAttributes<HTMLElement>>;
    Body: React.ForwardRefExoticComponent<TimelineBodyProps & React.RefAttributes<HTMLElement>>;
    Header: React.ForwardRefExoticComponent<TimelineHeaderProps & React.RefAttributes<HTMLElement>>;
    Separator: React.ForwardRefExoticComponent<TimelineSeparatorProps & React.RefAttributes<HTMLElement>>;
};

export { Timeline, TimelineBody, TimelineBodyProps, TimelineContext, TimelineContextProps, TimelineHeader, TimelineHeaderProps, TimelineIcon, TimelineIconProps, TimelineItem, TimelineProps, TimelineRoot, TimelineSeparator, TimelineSeparatorProps };
