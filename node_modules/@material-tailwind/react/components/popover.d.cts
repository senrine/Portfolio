import * as react_jsx_runtime from 'react/jsx-runtime';
import * as React from 'react';
import { Placement, OffsetOptions, UseFloatingReturn, useInteractions, FloatingFocusManagerProps } from '@floating-ui/react';

type FloatingType = Partial<UseFloatingReturn> & Partial<ReturnType<typeof useInteractions>>;
interface PopoverContextProps extends FloatingType {
    open?: boolean;
    setOpen?: React.Dispatch<React.SetStateAction<boolean>>;
    arrowRef?: React.MutableRefObject<null>;
}
declare const PopoverContext: React.Context<PopoverContextProps>;
interface PopoverProps {
    open?: boolean;
    onOpenChange?: () => void;
    placement?: Placement;
    offset?: OffsetOptions;
    children: React.ReactNode;
}
/**
 * @remarks
 * [Documentation](http://www.material-tailwind.com/docs/react/popover) •
 * [Props Definition](https://www.material-tailwind.com/docs/react/popover#popover-props) •
 * [Theming Guide](https://www.material-tailwind.com/docs/react/popover#popover-theme)
 */
declare function PopoverRoot({ open: controlledOpen, onOpenChange: setControlledOpen, placement, offset, children, }: PopoverProps): react_jsx_runtime.JSX.Element;
declare namespace PopoverRoot {
    var displayName: string;
}
interface PopoverTriggerProps extends Omit<React.AllHTMLAttributes<HTMLElement>, "as"> {
    as?: React.ElementType;
    className?: string;
    children: React.ReactNode;
}
declare const PopoverTrigger: React.ForwardRefExoticComponent<PopoverTriggerProps & React.RefAttributes<HTMLElement>>;
type PopoverContentBaseProps = Omit<React.AllHTMLAttributes<HTMLElement>, "as"> & FloatingFocusManagerProps;
interface PopoverContentProps extends Omit<PopoverContentBaseProps, "context" | "children"> {
    as?: React.ElementType;
    className?: string;
    children: React.ReactNode;
}
declare const PopoverContent: React.ForwardRefExoticComponent<PopoverContentProps & React.RefAttributes<HTMLElement>>;
interface PopoverArrowProps extends Omit<React.AllHTMLAttributes<HTMLElement>, "as"> {
    as?: React.ElementType;
    className?: string;
}
declare const PopoverArrow: React.ForwardRefExoticComponent<PopoverArrowProps & React.RefAttributes<HTMLElement>>;
declare const Popover: typeof PopoverRoot & {
    Trigger: React.ForwardRefExoticComponent<PopoverTriggerProps & React.RefAttributes<HTMLElement>>;
    Content: React.ForwardRefExoticComponent<PopoverContentProps & React.RefAttributes<HTMLElement>>;
    Arrow: React.ForwardRefExoticComponent<PopoverArrowProps & React.RefAttributes<HTMLElement>>;
};

export { Popover, PopoverArrow, PopoverArrowProps, PopoverContent, PopoverContentProps, PopoverContext, PopoverContextProps, PopoverProps, PopoverRoot, PopoverTrigger, PopoverTriggerProps, Popover as default };
