"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/components/index.ts
var components_exports = {};
__export(components_exports, {
  Accordion: () => Accordion,
  AccordionContent: () => AccordionContent,
  AccordionContext: () => AccordionContext,
  AccordionItem: () => AccordionItem,
  AccordionItemContext: () => AccordionItemContext,
  AccordionRoot: () => AccordionRoot,
  AccordionTrigger: () => AccordionTrigger,
  Alert: () => Alert,
  AlertContent: () => AlertContent,
  AlertContext: () => AlertContext,
  AlertDismissTrigger: () => AlertDismissTrigger,
  AlertIcon: () => AlertIcon,
  Avatar: () => Avatar,
  Breadcrumb: () => Breadcrumb,
  BreadcrumbLink: () => BreadcrumbLink,
  BreadcrumbRoot: () => BreadcrumbRoot,
  BreadcrumbSeparator: () => BreadcrumbSeparator,
  Button: () => Button,
  ButtonGroup: () => ButtonGroup,
  Card: () => Card,
  CardBody: () => CardBody,
  CardFooter: () => CardFooter,
  CardHeader: () => CardHeader,
  CardRoot: () => CardRoot,
  Checkbox: () => Checkbox,
  CheckboxContext: () => CheckboxContext,
  CheckboxIndicator: () => CheckboxIndicator,
  CheckboxRoot: () => CheckboxRoot,
  Chip: () => Chip,
  ChipContext: () => ChipContext,
  ChipDismissTrigger: () => ChipDismissTrigger,
  ChipIcon: () => ChipIcon,
  ChipLabel: () => ChipLabel,
  Collapse: () => Collapse,
  Dialog: () => Dialog,
  DialogContent: () => DialogContent,
  DialogDismissTrigger: () => DialogDismissTrigger,
  DialogOverlay: () => DialogOverlay,
  DialogRoot: () => DialogRoot,
  DialogTrigger: () => DialogTrigger,
  Drawer: () => Drawer,
  DrawerDismissTrigger: () => DrawerDismissTrigger,
  DrawerOverlay: () => DrawerOverlay,
  DrawerPanel: () => DrawerPanel,
  DrawerRoot: () => DrawerRoot,
  DrawerTrigger: () => DrawerTrigger,
  IconButton: () => IconButton,
  Input: () => Input,
  InputContext: () => InputContext,
  InputField: () => InputField,
  InputIcon: () => InputIcon,
  InputRoot: () => InputRoot,
  List: () => List,
  ListItem: () => ListItem,
  ListItemEnd: () => ListItemEnd,
  ListItemStart: () => ListItemStart,
  ListRoot: () => ListRoot,
  Menu: () => Menu,
  MenuContent: () => MenuContent,
  MenuContext: () => MenuContext,
  MenuItem: () => MenuItem,
  MenuRoot: () => MenuRoot,
  MenuTrigger: () => MenuTrigger,
  Popover: () => Popover,
  PopoverArrow: () => PopoverArrow,
  PopoverContent: () => PopoverContent,
  PopoverContext: () => PopoverContext,
  PopoverRoot: () => PopoverRoot,
  PopoverTrigger: () => PopoverTrigger,
  Progress: () => Progress,
  ProgressBar: () => ProgressBar,
  ProgressContext: () => ProgressContext,
  ProgressRoot: () => ProgressRoot,
  Radio: () => Radio,
  RadioContext: () => RadioContext,
  RadioIndicator: () => RadioIndicator,
  RadioItem: () => RadioItem,
  RadioRoot: () => RadioRoot,
  Rating: () => Rating,
  Select: () => Select,
  SelectContext: () => SelectContext,
  SelectList: () => SelectList,
  SelectOption: () => SelectOption,
  SelectRoot: () => SelectRoot,
  SelectTrigger: () => SelectTrigger,
  Spinner: () => Spinner,
  Switch: () => Switch,
  Tabs: () => Tabs,
  TabsList: () => TabsList,
  TabsPanel: () => TabsPanel,
  TabsRoot: () => TabsRoot,
  TabsTrigger: () => TabsTrigger,
  TabsTriggerIndicator: () => TabsTriggerIndicator,
  Textarea: () => Textarea,
  Timeline: () => Timeline,
  TimelineBody: () => TimelineBody,
  TimelineContext: () => TimelineContext,
  TimelineHeader: () => TimelineHeader,
  TimelineIcon: () => TimelineIcon,
  TimelineItem: () => TimelineItem,
  TimelineRoot: () => TimelineRoot,
  TimelineSeparator: () => TimelineSeparator,
  Tooltip: () => Tooltip,
  TooltipArrow: () => TooltipArrow,
  TooltipContent: () => TooltipContent,
  TooltipContext: () => TooltipContext,
  TooltipRoot: () => TooltipRoot,
  TooltipTrigger: () => TooltipTrigger,
  Typography: () => Typography
});
module.exports = __toCommonJS(components_exports);

// src/components/accordion.tsx
var React2 = __toESM(require("react"), 1);
var import_tailwind_merge2 = require("tailwind-merge");

// src/context/index.tsx
var React = __toESM(require("react"), 1);

// src/theme/accordion.ts
var accordionTheme = {
  defaultProps: {
    type: "single"
  }
};
var accordionItemTheme = {
  defaultProps: {
    disabled: false
  },
  baseStyle: "group block w-full items-center justify-between cursor-pointer border-b border-surface aria-disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:select-none"
};
var accordionTriggerTheme = {
  baseStyle: "flex items-center justify-between w-full py-3 text-left font-medium dark:text-white text-black"
};
var accordionContentTheme = {
  baseStyle: "block pb-3 text-foreground h-0 data-[open=true]:h-auto"
};

// src/theme/alert.ts
var alertTheme = {
  defaultProps: {
    size: "md",
    color: "primary",
    variant: "solid",
    rounded: false
  },
  baseStyle: "relative flex items-start w-full border rounded-md p-2 data-[pill=true]:rounded-full",
  variant: {
    ghost: {
      primary: "bg-primary/10 border-transparent text-primary",
      secondary: "bg-secondary/10 border-transparent text-secondary-foreground",
      info: "bg-info/10 border-transparent text-info",
      success: "bg-success/10 border-transparent text-success",
      warning: "bg-warning/10 border-transparent text-warning",
      error: "bg-error/10 border-transparent text-error"
    },
    solid: {
      primary: "bg-primary border-primary text-primary-foreground",
      secondary: "bg-secondary border-secondary text-secondary-foreground",
      info: "bg-info border-info text-info-foreground",
      success: "bg-success border-success text-success-foreground",
      warning: "bg-warning border-warning text-warning-foreground",
      error: "bg-error border-error text-error-foreground"
    },
    outline: {
      primary: "bg-transparent border-primary text-primary",
      secondary: "bg-transparent border-secondary text-secondary-foreground",
      info: "bg-transparent border-info text-info",
      success: "bg-transparent border-success text-success",
      warning: "bg-transparent border-warning text-warning",
      error: "bg-transparent border-error text-error"
    },
    gradient: {
      primary: "bg-gradient-to-tr from-primary-dark to-primary-light border-primary text-primary-foreground",
      secondary: "bg-gradient-to-tr from-secondary-dark to-secondary-light border-secondary text-secondary-foreground",
      info: "bg-gradient-to-tr from-info-dark to-info-light border-info text-info-foreground",
      success: "bg-gradient-to-tr from-success-dark to-success-light border-success text-success-foreground",
      warning: "bg-gradient-to-tr from-warning-dark to-warning-light border-warning text-warning-foreground",
      error: "bg-gradient-to-tr from-error-dark to-error-light border-error text-error-foreground"
    }
  }
};
var alertContentTheme = {
  baseStyle: "w-full text-base font-sans  leading-none m-1.5"
};
var alertIconTheme = {
  baseStyle: "grid place-items-center shrink-0 p-1"
};
var alertDismissTriggerTheme = {
  baseStyle: "outline-none"
};

// src/theme/avatar.ts
var avatarTheme = {
  defaultProps: {
    size: "md",
    variant: "circular"
  },
  baseStyle: "inline-block object-cover object-center data-[shape=square]:rounded-none data-[shape=circular]:rounded-full data-[shape=rounded]:rounded-[current]",
  size: {
    xs: "w-6 h-6 rounded-sm",
    sm: "w-8 h-8 rounded",
    md: "w-11 h-11 rounded-md",
    lg: "w-14 h-14 rounded-md",
    xl: "w-[72px] h-[72px] rounded-lg",
    xxl: "w-[86px] h-[86px] rounded-xl"
  }
};

// src/theme/breadcrumb.ts
var breadcrumbTheme = {
  baseStyle: "flex flex-wrap items-center gap-1 p-1"
};
var breadcrumbLinkTheme = {
  baseStyle: "inline-flex items-center gap-1.5 text-sm text-black dark:text-white transition-colors duration-300 ease-in hover:text-primary dark:hover:text-primary"
};
var breadcrumbSeparatorTheme = {
  baseStyle: "inline-block mx-1 text-sm select-none pointer-events-none opacity-50 text-black dark:text-white"
};

// src/theme/button.ts
var buttonTheme = {
  defaultProps: {
    size: "md",
    color: "primary",
    variant: "solid",
    ripple: true,
    isPill: false,
    isFullWidth: false
  },
  baseStyle: "inline-flex items-center justify-center border align-middle select-none font-sans font-medium text-center transition-all duration-300 ease-in disabled:opacity-50 disabled:shadow-none disabled:cursor-not-allowed data-[shape=pill]:rounded-full data-[width=full]:w-full",
  size: {
    sm: "text-sm leading-none py-1.5 px-2.5 rounded-md",
    md: "text-sm leading-none py-2.5 px-3.5 rounded-md",
    lg: "text-base leading-none py-3.5 px-5 rounded-lg"
  },
  variant: {
    ghost: {
      primary: "bg-transparent border-transparent text-primary hover:bg-primary/5 hover:border-primary/5",
      secondary: "bg-transparent border-transparent text-secondary-foreground hover:bg-secondary/10 hover:border-secondary/10",
      info: "bg-transparent border-transparent text-info hover:bg-info/10 hover:border-info/10",
      success: "bg-transparent border-transparent text-success hover:bg-success/10 hover:border-success/10",
      warning: "bg-transparent border-transparent text-warning hover:bg-warning/10 hover:border-warning/10",
      error: "bg-transparent border-transparent text-error hover:bg-error/10 hover:border-error/10"
    },
    solid: {
      primary: "bg-primary border-primary text-primary-foreground hover:bg-primary-light hover:border-primary-light",
      secondary: "bg-secondary border-secondary text-secondary-foreground hover:bg-secondary-light hover:border-secondary-light",
      info: "bg-info border-info text-info-foreground hover:bg-info-light hover:border-info-light",
      success: "bg-success border-success text-success-foreground hover:bg-success-light hover:border-success-light",
      warning: "bg-warning border-warning text-warning-foreground hover:bg-warning-light hover:border-warning-light",
      error: "bg-error border-error text-error-foreground hover:bg-error-light hover:border-error-light"
    },
    outline: {
      primary: "bg-transparent border-primary text-primary hover:bg-primary hover:text-primary-foreground",
      secondary: "bg-transparent border-secondary text-secondary-foreground hover:bg-secondary",
      info: "bg-transparent border-info text-info hover:bg-info hover:text-info-foreground",
      success: "bg-transparent border-success text-success hover:bg-success hover:text-success-foreground",
      warning: "bg-transparent border-warning text-warning hover:bg-warning hover:text-warning-foreground",
      error: "bg-transparent border-error text-error hover:bg-error hover:text-error-foreground"
    },
    gradient: {
      primary: "bg-gradient-to-tr from-primary-dark to-primary-light border-primary text-primary-foreground hover:brightness-105",
      secondary: "bg-gradient-to-tr from-secondary-dark to-secondary-light border-secondary text-secondary-foreground hover:brightness-105",
      info: "bg-gradient-to-tr from-info-dark to-info-light border-info text-info-foreground hover:brightness-105",
      success: "bg-gradient-to-tr from-success-dark to-success-light border-success text-success-foreground hover:brightness-105",
      warning: "bg-gradient-to-tr from-warning-dark to-warning-light border-warning text-warning-foreground hover:brightness-105",
      error: "bg-gradient-to-tr from-error-dark to-error-light border-error text-error-foreground hover:brightness-105"
    }
  }
};

// src/theme/button-group.ts
var buttonGroupTheme = {
  defaultProps: {
    size: "md",
    color: "primary",
    variant: "solid",
    ripple: true,
    isFullWidth: false,
    isPill: false,
    orientation: "horizontal"
  },
  baseStyle: "inline-flex data-[width=full]:w-full data-[orientation=horizontal]:flex-row data-[orientation=horizontal]:[&:not(:first-child):not(:last-child):not([data-variant=ghost])]:[&_*]:rounded-none data-[orientation=horizontal]:[&:first-child:not([data-variant=ghost])]:[&_*]:rounded-r-none data-[orientation=horizontal]:[&:last-child:not([data-variant=ghost])]:[&_*]:rounded-l-none data-[orientation=horizontal]:[&:not(:first-child):not(:last-child):not([data-variant=ghost])]:[&_*]:border-l-0 data-[orientation=horizontal]:[&:last-child:not([data-variant=ghost])]:[&_*]:border-l-0 data-[orientation=vertical]:flex-col data-[orientation=vertical]:[&:not(:first-child):not(:last-child):not([data-variant=ghost])]:[&_*]:rounded-none data-[orientation=vertical]:[&:first-child:not([data-variant=ghost])]:[&_*]:rounded-b-none data-[orientation=vertical]:[&:last-child:not([data-variant=ghost])]:[&_*]:rounded-t-none data-[orientation=vertical]:[&:not(:first-child):not(:last-child):not([data-variant=ghost])]:[&_*]:border-t-0 data-[orientation=vertical]:[&:last-child:not([data-variant=ghost])]:[&_*]:border-t-0"
};

// src/theme/checkbox.ts
var checkboxTheme = {
  defaultProps: {
    color: "primary"
  },
  baseStyle: "inline-block relative h-5 w-5 rounded bg-surface transition-all duration-200 ease-in aria-disabled:opacity-50 aria-disabled:pointer-events-none",
  color: {
    primary: "data-[checked=true]:bg-primary text-primary-foreground",
    secondary: "data-[checked=true]:bg-secondary text-secondary-foreground",
    info: "data-[checked=true]:bg-info text-info-foreground",
    success: "data-[checked=true]:bg-success text-success-foreground",
    warning: "data-[checked=true]:bg-warning text-warning-foreground",
    error: "data-[checked=true]:bg-error text-error-foreground"
  }
};
var checkboxIndicatorTheme = {
  baseStyle: "pointer-events-none absolute left-2/4 top-2/4 text-current -translate-x-2/4 -translate-y-2/4 scale-75 opacity-0 transition-all duration-200 ease-in data-[checked=true]:scale-100 data-[checked=true]:opacity-100"
};

// src/theme/card.ts
var cardTheme = {
  defaultProps: {
    variant: "solid",
    color: "default"
  },
  baseStyle: "w-full rounded-lg border shadow-lg overflow-hidden",
  variant: {
    ghost: {
      default: "bg-background/10 border-transparent shadow-transparent",
      primary: "bg-primary/10 border-transparent shadow-transparent",
      secondary: "bg-secondary/10 border-transparent shadow-transparent",
      info: "bg-info/10 border-transparent shadow-transparent",
      success: "bg-success/10 border-transparent shadow-transparent",
      warning: "bg-warning/10 border-transparent shadow-transparent",
      error: "bg-error/10 border-transparent shadow-transparent"
    },
    solid: {
      default: "bg-background border-surface shadow-black/5",
      primary: "bg-primary border-primary-dark shadow-primary-dark/25",
      secondary: "bg-secondary border-secondary-dark shadow-secondary-dark/25",
      info: "bg-info border-info-dark shadow-info-dark/25",
      success: "bg-success border-success-dark shadow-success-dark/25",
      warning: "bg-warning border-warning-dark shadow-warning-dark/25",
      error: "bg-error border-error-dark shadow-error-dark/25"
    },
    outline: {
      default: "bg-transparent border-surface shadow-transparent",
      primary: "bg-transparent border-primary shadow-transparent",
      secondary: "bg-transparent border-secondary shadow-transparent",
      info: "bg-transparent border-info shadow-transparent",
      success: "bg-transparent border-success shadow-transparent",
      warning: "bg-transparent border-warning shadow-transparent",
      error: "bg-transparent border-error shadow-transparent"
    },
    gradient: {
      default: "bg-background border-surface shadow-black/5",
      primary: "bg-gradient-to-t from-primary-dark to-primary-light shadow-primary/25 border-primary",
      secondary: "bg-gradient-to-t from-secondary-dark to-secondary-light shadow-secondary/25 border-secondary",
      info: "bg-gradient-to-t from-info-dark to-info-light shadow-info/25 border-info",
      success: "bg-gradient-to-t from-success-dark to-success-light shadow-success/25 border-success",
      warning: "bg-gradient-to-t from-warning-dark to-warning-light shadow-warning/25 border-warning",
      error: "bg-gradient-to-t from-error-dark to-error-light shadow-error/25 border-error"
    }
  }
};
var cardHeaderTheme = {
  baseStyle: "w-[calc(100%-12px)] h-max rounded-[5px] m-1.5"
};
var cardBodyTheme = {
  baseStyle: "w-full h-max rounded px-3 py-2"
};
var cardFooterTheme = {
  baseStyle: "w-full px-3 pt-1.5 pb-3 rounded"
};

// src/theme/chip.ts
var chipTheme = {
  defaultProps: {
    size: "md",
    color: "primary",
    variant: "solid"
  },
  baseStyle: "relative inline-flex items-center border select-none font-sans font-medium rounded-full",
  size: {
    sm: "text-xs leading-none p-0.5",
    md: "text-[13px] leading-none p-[3px]",
    lg: "text-[15px] leading-none p-1"
  },
  variant: {
    ghost: {
      primary: "bg-primary/10 border-transparent text-primary",
      secondary: "bg-secondary/10 border-transparent text-secondary-foreground",
      info: "bg-info/10 border-transparent text-info",
      success: "bg-success/10 border-transparent text-success",
      warning: "bg-warning/10 border-transparent text-warning",
      error: "bg-error/10 border-transparent text-error"
    },
    solid: {
      primary: "bg-primary border-primary text-primary-foreground",
      secondary: "bg-secondary border-secondary text-secondary-foreground",
      info: "bg-info border-info text-info-foreground",
      success: "bg-success border-success text-success-foreground",
      warning: "bg-warning border-warning text-warning-foreground",
      error: "bg-error border-error text-error-foreground"
    },
    outline: {
      primary: "bg-transparent border-primary text-primary",
      secondary: "bg-transparent border-secondary text-secondary-foreground",
      info: "bg-transparent border-info text-info",
      success: "bg-transparent border-success text-success",
      warning: "bg-transparent border-warning text-warning",
      error: "bg-transparent border-error text-error"
    },
    gradient: {
      primary: "bg-gradient-to-tr from-primary-dark to-primary-light border-primary text-primary-foreground",
      secondary: "bg-gradient-to-tr from-secondary-dark to-secondary-light border-secondary text-secondary-foreground",
      info: "bg-gradient-to-tr from-info-dark to-info-light border-info text-info-foreground",
      success: "bg-gradient-to-tr from-success-dark to-success-light border-success text-success-foreground",
      warning: "bg-gradient-to-tr from-warning-dark to-warning-light border-warning text-warning-foreground",
      error: "bg-gradient-to-tr from-error-dark to-error-light border-error text-error-foreground"
    }
  }
};
var chipLabelTheme = {
  baseStyle: "font-inherit text-inherit leading-none",
  size: {
    sm: "my-0.5 mx-1.5",
    md: "my-[3.5px] mx-2",
    lg: "my-[4.5px] mx-2.5"
  }
};
var chipIconTheme = {
  baseStyle: "grid place-items-center shrink-0 rounded-full",
  size: {
    sm: "translate-x-px w-3.5 h-3.5",
    md: "translate-x-0.5 w-4 h-4",
    lg: "translate-x-[3px] w-5 h-5"
  }
};
var chipDismissTriggerTheme = {
  defaultProps: {
    ripple: true
  },
  baseStyle: "grid place-items-center shrink-0 rounded-full p-px",
  size: {
    sm: "-translate-x-px ms-0.5 w-4 h-4 stroke-2",
    md: "-translate-x-0.5 ms-1 w-[18px] h-[18px] stroke-2",
    lg: "-translate-x-[3px] ms-1.5 w-[22px] h-[22px] stroke-2"
  }
};

// src/theme/collapse.ts
var collapseTheme = {
  baseStyle: "block w-full h-0 overflow-hidden data-[open=true]:h-auto data-[open=true]:overflow-visible"
};

// src/theme/dialog.ts
var dialogTheme = {
  defaultProps: {
    size: "md"
  }
};
var dialogTriggerTheme = {
  baseStyle: "outline-none"
};
var dialogContentTheme = {
  defaultProps: {
    disabled: false,
    initialFocus: 0,
    returnFocus: true,
    guards: true,
    modal: false,
    visuallyHiddenDismiss: true,
    closeOnFocusOut: true,
    order: ["content"]
  },
  baseStyle: "fixed z-[9998] top-1/2 left-1/2 -translate-x-1/2 px-4 py-3 max-h-[calc(100vh-32px)] overflow-y-auto -translate-y-1/2 bg-background w-full h-full rounded-xl shadow-2xl shadow-black/5 border border-surface",
  size: {
    xs: "w-8/12 sm:w-6/12 md:w-4/12 lg:w-3/12 xl:w-2/12 h-max",
    sm: "w-9/12 sm:w-7/12 md:w-5/12 lg:w-3/12 h-max",
    md: "w-10/12 md:w-8/12 lg:w-6/12 h-max",
    lg: "w-10/12 lg:w-8/12 h-max",
    xl: "w-11/12 lg:w-10/12 h-max",
    screen: "w-full h-full rounded-none max-h-screen"
  }
};
var dialogOverlayTheme = {
  defaultProps: {
    lockScroll: true
  },
  baseStyle: "fixed inset-0 w-screen h-screen z-[9997] bg-black/50"
};
var dialogDismissTriggerTheme = {
  baseStyle: "outline-none"
};

// src/theme/drawer.ts
var drawerTriggerTheme = {
  baseStyle: "outline-none"
};
var drawerPanelTheme = {
  defaultProps: {
    disabled: false,
    initialFocus: 0,
    returnFocus: true,
    guards: true,
    modal: false,
    visuallyHiddenDismiss: true,
    closeOnFocusOut: true,
    order: ["content"],
    placement: "right"
  },
  baseStyle: "fixed z-[9998] p-4 bg-background w-80 h-80 shadow-2xl shadow-black/5 border-surface data-[placement=top]:top-0 data-[placement=top]:left-0 data-[placement=right]:top-0 data-[placement=right]:right-0 data-[placement=bottom]:bottom-0 data-[placement=bottom]:left-0 data-[placement=left]:top-0 data-[placement=left]:left-0 data-[placement=top]:w-screen data-[placement=bottom]:w-screen data-[placement=left]:h-screen data-[placement=right]:h-screen border border-surface"
};
var drawerOverlayTheme = {
  defaultProps: {
    lockScroll: true
  },
  baseStyle: "fixed inset-0 w-screen h-screen z-[9997] bg-black/50"
};
var drawerDismissTriggerTheme = {
  baseStyle: "outline-none"
};

// src/theme/icon-button.ts
var iconButtonTheme = {
  defaultProps: {
    size: "md",
    color: "primary",
    variant: "solid",
    ripple: true,
    isCircular: false
  },
  baseStyle: "inline-grid place-items-center border align-middle select-none font-sans font-medium text-center transition-all duration-300 ease-in disabled:opacity-50 disabled:shadow-none disabled:pointer-events-none data-[shape=circular]:rounded-full",
  size: {
    sm: "text-sm leading-none min-w-[28px] min-h-[28px] rounded-md",
    md: "text-sm leading-none min-w-[36px] min-h-[36px] rounded-md",
    lg: "text-base leading-none min-w-[46px] min-h-[46px] rounded-lg"
  },
  variant: buttonTheme.variant
};

// src/theme/input.ts
var inputTheme = {
  defaultProps: {
    size: "md",
    color: "primary",
    isPill: false,
    isError: false,
    isSuccess: false
  },
  baseStyle: "relative w-full aria-disabled:cursor-not-allowed data-[shape=pill]:rounded-full",
  size: {
    sm: "text-sm leading-none rounded-md",
    md: "text-sm leading-none rounded-md",
    lg: "text-base leading-none rounded-lg"
  }
};
var inputFieldTheme = {
  baseStyle: "h-full w-full outline-none rounded-[inherit] text-inherit leading-[inherit] focus:outline-none text-black dark:text-white placeholder:text-foreground/60 bg-transparent ring-transparent border border-surface transition-all duration-300 ease-in disabled:opacity-50 disabled:pointer-events-none data-[error=true]:border-error data-[success=true]:border-success select-none",
  size: {
    sm: "py-[4.5px] px-1.5 ring data-[icon-placement=start]:ps-6 data-[icon-placement=end]:pe-6",
    md: "py-[8.5px] px-2.5 ring data-[icon-placement=start]:ps-8 data-[icon-placement=end]:pe-8",
    lg: "py-[12.25px] px-3.5 ring-4 data-[icon-placement=start]:ps-10 data-[icon-placement=end]:pe-10"
  },
  color: {
    primary: "hover:border-primary hover:ring-primary/10 focus:border-primary focus:ring-primary/10",
    secondary: "hover:border-secondary hover:ring-secondary/10 focus:border-secondary focus:ring-secondary/10",
    info: "hover:border-info hover:ring-info/10 focus:border-info focus:ring-info/10",
    success: "hover:border-success hover:ring-success/10 focus:border-success focus:ring-success/10",
    warning: "hover:border-warning hover:ring-warning/10 focus:border-warning focus:ring-warning/10",
    error: "hover:border-error hover:ring-error/10 focus:border-error focus:ring-error/10"
  }
};
var inputIconTheme = {
  defaultProps: {
    placement: "start"
  },
  baseStyle: "pointer-events-none absolute top-1/2 -translate-y-1/2 text-foreground/70 peer-hover:text-black peer-focus:text-black dark:peer-hover:text-white dark:peer-focus:text-white transition-all duration-300 ease-in overflow-hidden",
  size: {
    sm: "w-4 h-4 data-[placement=start]:left-[5px] data-[placement=end]:right-[5px]",
    md: "w-5 h-5 data-[placement=start]:left-[7px] data-[placement=end]:right-[7px]",
    lg: "w-6 h-6 data-[placement=start]:left-[9px] data-[placement=end]:right-[9px]"
  }
};

// src/theme/list.ts
var listTheme = {
  baseStyle: "flex flex-col gap-0.5 min-w-[240px]"
};
var listItemTheme = {
  defaultProps: {
    ripple: true
  },
  baseStyle: "flex items-center py-1.5 px-2.5 rounded-md align-middle select-none font-sans  transition-all duration-300 ease-in aria-disabled:opacity-50 aria-disabled:pointer-events-none bg-transparent text-foreground hover:text-black dark:hover:text-white hover:bg-surface focus:bg-surface focus:text-black dark:focus:text-white data-[selected=true]:bg-surface data-[selected=true]:text-black data-[selected=true]:text-white dark:bg-opacity-70"
};
var listItemStartTheme = {
  baseStyle: "grid place-items-center shrink-0 me-2.5"
};
var listItemEndTheme = {
  baseStyle: "grid place-items-center shrink-0 ps-2.5 ms-auto"
};

// src/theme/menu.ts
var menuTheme = {
  defaultProps: {
    placement: "bottom",
    offset: 5
  }
};
var menuTriggerTheme = {
  baseStyle: "outline-none group"
};
var menuContentTheme = {
  defaultProps: {
    disabled: false,
    initialFocus: 0,
    returnFocus: true,
    guards: true,
    modal: false,
    visuallyHiddenDismiss: true,
    closeOnFocusOut: true,
    order: ["content"]
  },
  baseStyle: "min-w-[160px] rounded-lg space-y-0.5 border border-surface bg-background p-1 text-sm text-foreground shadow-xl shadow-black/[0.025] outline-none"
};
var menuItemTheme = {
  defaultProps: {
    ripple: true,
    closeOnClick: true
  },
  baseStyle: "w-full text-start flex items-center py-1.5 px-2.5 rounded-[5px] align-middle select-none outline-none font-sans  transition-all duration-300 ease-in aria-disabled:opacity-50 aria-disabled:pointer-events-none bg-transparent text-foreground hover:text-black dark:hover:text-white hover:bg-surface focus:bg-surface focus:text-black dark:focus:text-white data-[selected=true]:bg-surface data-[selected=true]:text-black dark:data-[selected=true]:text-white dark:bg-opacity-70"
};

// src/theme/popover.ts
var popoverTheme = {
  defaultProps: {
    placement: "bottom",
    offset: 10
  }
};
var popoverTriggerTheme = {
  baseStyle: "outline-none group"
};
var popoverContentTheme = {
  defaultProps: {
    disabled: false,
    initialFocus: 0,
    returnFocus: true,
    guards: true,
    modal: false,
    visuallyHiddenDismiss: true,
    closeOnFocusOut: true,
    order: ["content"]
  },
  baseStyle: "rounded-lg border border-surface bg-background p-2.5 text-sm text-foreground shadow-xl shadow-black/[0.025] outline-none"
};
var popoverArrowTheme = {
  baseStyle: "h-3 w-3 rounded-bl-[3px] border border-[inherit] bg-inherit [clip-path:polygon(0_0,_100%_100%,_0_100%)] data-[placement^=bottom]:rotate-[135deg] data-[placement^=left]:rotate-[225deg] data-[placement^=right]:rotate-45 data-[placement^=top]:-rotate-45"
};

// src/theme/progress.ts
var progressTheme = {
  defaultProps: {
    size: "md",
    color: "primary"
  },
  baseStyle: "w-full bg-surface block rounded-full overflow-hidden",
  size: {
    sm: "h-2",
    md: "h-4",
    lg: "h-6"
  }
};
var progressBarTheme = {
  baseStyle: "h-full rounded-none",
  color: {
    primary: "bg-primary",
    secondary: "bg-secondary",
    info: "bg-info",
    success: "bg-success",
    warning: "bg-warning",
    error: "bg-error"
  }
};

// src/theme/radio.ts
var radioTheme = {
  defaultProps: {
    color: "primary",
    orientation: "vertical"
  },
  baseStyle: "flex gap-2 data-[orientation=horizontal]:items-center data-[orientation=horizontal]:flex-row data-[orientation=vertical]:flex-col data-[orientation=vertical]:items-start"
};
var radioItemTheme = {
  baseStyle: "group block relative h-5 w-5 shrink-0 rounded-full bg-surface transition-all duration-200 ease-in aria-disabled:opacity-50 aria-disabled:pointer-events-none",
  color: {
    primary: "data-[checked=true]:bg-primary text-primary-foreground",
    secondary: "data-[checked=true]:bg-secondary text-secondary-foreground",
    info: "data-[checked=true]:bg-info text-info-foreground",
    success: "data-[checked=true]:bg-success text-success-foreground",
    warning: "data-[checked=true]:bg-warning text-warning-foreground",
    error: "data-[checked=true]:bg-error text-error-foreground"
  }
};
var radioIndicatorTheme = {
  baseStyle: "pointer-events-none absolute left-2/4 top-2/4 text-current -translate-x-2/4 -translate-y-2/4 scale-75 opacity-0 transition-all duration-200 ease-in group-data-[checked=true]:scale-100 group-data-[checked=true]:opacity-100"
};

// src/theme/rating.tsx
var import_jsx_runtime = require("react/jsx-runtime");
var ratingTheme = {
  defaultProps: {
    count: 5,
    color: "primary",
    ratedIcon: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
      "svg",
      {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        fill: "currentColor",
        className: "h-6 w-6",
        children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
          "path",
          {
            fillRule: "evenodd",
            d: "M10.788 3.21c.448-1.077 1.976-1.077 2.424 0l2.082 5.007 5.404.433c1.164.093 1.636 1.545.749 2.305l-4.117 3.527 1.257 5.273c.271 1.136-.964 2.033-1.96 1.425L12 18.354 7.373 21.18c-.996.608-2.231-.29-1.96-1.425l1.257-5.273-4.117-3.527c-.887-.76-.415-2.212.749-2.305l5.404-.433 2.082-5.006z",
            clipRule: "evenodd"
          }
        )
      }
    ),
    unratedIcon: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
      "svg",
      {
        xmlns: "http://www.w3.org/2000/svg",
        fill: "none",
        viewBox: "0 0 24 24",
        strokeWidth: 1.5,
        stroke: "currentColor",
        className: "h-6 w-6",
        children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
          "path",
          {
            strokeLinecap: "round",
            strokeLinejoin: "round",
            d: "M11.48 3.499a.562.562 0 011.04 0l2.125 5.111a.563.563 0 00.475.345l5.518.442c.499.04.701.663.321.988l-4.204 3.602a.563.563 0 00-.182.557l1.285 5.385a.562.562 0 01-.84.61l-4.725-2.885a.563.563 0 00-.586 0L6.982 20.54a.562.562 0 01-.84-.61l1.285-5.386a.562.562 0 00-.182-.557l-4.204-3.602a.563.563 0 01.321-.988l5.518-.442a.563.563 0 00.475-.345L11.48 3.5z"
          }
        )
      }
    ),
    readonly: false
  },
  baseStyle: "inline-flex items-center [&_data-slot=icon]:w-5 [&_data-slot=icon]:h-5 [&_data-slot=icon]:text-inherit [&_data-slot=icon]:cursor-pointer",
  color: {
    primary: "text-primary",
    secondary: "text-secondary",
    info: "text-info",
    success: "text-success",
    warning: "text-warning",
    error: "text-error"
  }
};

// src/theme/select.tsx
var import_jsx_runtime2 = require("react/jsx-runtime");
var selectTheme = {
  defaultProps: {
    size: "md",
    color: "primary",
    isPill: false,
    isError: false,
    isSuccess: false,
    placement: "bottom",
    offset: 5
  }
};
var selectTriggerTheme = {
  defaultProps: {
    indicator: /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)(
      "svg",
      {
        viewBox: "0 0 24 24",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg",
        color: "currentColor",
        className: "h-[1em] w-[1em] translate-x-0.5 stroke-[1.5]",
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
            "path",
            {
              d: "M17 8L12 3L7 8",
              stroke: "currentColor",
              strokeLinecap: "round",
              strokeLinejoin: "round"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
            "path",
            {
              d: "M17 16L12 21L7 16",
              stroke: "currentColor",
              strokeLinecap: "round",
              strokeLinejoin: "round"
            }
          )
        ]
      }
    )
  },
  baseStyle: "flex items-center gap-4 justify-between h-max w-full outline-none focus:outline-none text-foreground bg-transparent ring-transparent border border-surface transition-all duration-300 ease-in disabled:opacity-50 disabled:pointer-events-none data-[error=true]:border-error data-[success=true]:border-success select-none text-start data-[shape=pill]:rounded-full [&_data-slot=placeholder]:text-foreground/60",
  size: {
    sm: "text-sm leading-[normal] rounded-md py-[4.5px] px-1.5 ring",
    md: "text-sm leading-[normal] rounded-md py-[8.5px] px-2.5 ring",
    lg: "text-base leading-[normal] rounded-lg py-[12.25px] px-3.5 ring-4"
  },
  color: {
    primary: "hover:border-primary hover:ring-primary/10 focus:border-primary focus:ring-primary/10 data-[open=true]:border-primary data-[open=true]:ring-primary/10",
    secondary: "hover:border-secondary hover:ring-secondary/10 focus:border-secondary focus:ring-secondary/10 data-[open=true]:border-secondary data-[open=true]:ring-secondary/10",
    info: "hover:border-info hover:ring-info/10 focus:border-info focus:ring-info/10 data-[open=true]:border-info data-[open=true]:ring-info/10",
    success: "hover:border-success hover:ring-success/10 focus:border-success focus:ring-success/10 data-[open=true]:border-success data-[open=true]:ring-success/10",
    warning: "hover:border-warning hover:ring-warning/10 focus:border-warning focus:ring-warning/10 data-[open=true]:border-warning data-[open=true]:ring-warning/10",
    error: "hover:border-error hover:ring-error/10 focus:border-error focus:ring-error/10 data-[open=true]:border-error data-[open=true]:ring-error/10"
  }
};
var selectListTheme = {
  defaultProps: {
    disabled: false,
    initialFocus: 0,
    returnFocus: true,
    guards: true,
    modal: true,
    visuallyHiddenDismiss: true,
    closeOnFocusOut: true,
    order: ["content"]
  },
  baseStyle: "flex flex-col gap-0.5 bg-background p-1 rounded-lg shadow-xl shadow-black/[0.025] border border-surface outline-none"
};
var selectOptionTheme = {
  defaultProps: {
    ripple: true,
    indicator: /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
      "svg",
      {
        xmlns: "http://www.w3.org/2000/svg",
        fill: "none",
        viewBox: "0 0 24 24",
        strokeWidth: 2,
        stroke: "currentColor",
        className: "h-4 w-4",
        children: /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
          "path",
          {
            strokeLinecap: "round",
            strokeLinejoin: "round",
            d: "M4.5 12.75l6 6 9-13.5"
          }
        )
      }
    )
  },
  baseStyle: "outline-none flex items-center justify-between gap-4 py-1.5 px-2.5 rounded-[5px] align-middle select-none text-sm font-sans transition-all duration-300 ease-in disabled:opacity-50 disabled:cursor-not-allowed bg-transparent text-foreground hover:text-black dark:hover:text-white hover:bg-surface focus:bg-surface focus:text-black dark:focus:text-white data-[selected=true]:bg-surface data-[selected=true]:text-black dark:data-[selected=true]:text-white dark:bg-opacity-70"
};

// src/theme/spinner.ts
var spinnerTheme = {
  defaultProps: {
    size: "md",
    color: "primary"
  },
  baseStyle: "text-surface animate-spin",
  size: {
    xs: "h-3 w-3",
    sm: "h-4 w-4",
    md: "h-6 w-6",
    lg: "h-8 w-8",
    xl: "h-10 w-10",
    xxl: "h-12 w-12"
  },
  color: {
    primary: "text-primary",
    secondary: "text-secondary",
    info: "text-info",
    success: "text-success",
    warning: "text-warning",
    error: "text-error"
  }
};

// src/theme/switch.ts
var switchTheme = {
  defaultProps: {
    color: "primary"
  },
  baseStyle: "appearance-none relative inline-block rounded-full w-10 h-6 before:inline-block before:absolute before:top-0 before:left-0 before:w-full before:h-full before:rounded-full before:bg-surface before:transition-colors before:duration-200 before:ease-in after:absolute after:top-2/4 after:left-0.5 after:-translate-y-2/4 after:w-5 after:h-5 after:bg-background after:rounded-full checked:after:translate-x-[calc(100%-4px)] after:transition-transform after:duration-200 after:ease-in disabled:opacity-50 disabled:cursor-not-allowed dark:after:bg-white",
  color: {
    primary: "checked:before:bg-primary",
    secondary: "checked:before:bg-secondary",
    info: "checked:before:bg-info",
    success: "checked:before:bg-success",
    warning: "checked:before:bg-warning",
    error: "checked:before:bg-error"
  }
};

// src/theme/tabs.ts
var tabsTheme = {
  defaultProps: {
    orientation: "horizontal"
  },
  baseStyle: "flex data-[orientation=horizontal]:flex-col data-[orientation=vertical]:flex-row gap-2"
};
var tabsListTheme = {
  baseStyle: "flex shrink-0 w-max data-[orientation=horizontal]:flex-row data-[orientation=vertical]:flex-col rounded-md p-1 bg-surface-light dark:bg-surface"
};
var tabsTriggerTheme = {
  baseStyle: "inline-flex relative z-[2] py-1.5 px-4 items-center justify-center align-middle text-black dark:text-white select-none font-sans font-medium text-center aria-disabled:opacity-50 aria-disabled:pointer-events-none"
};
var tabsPanelTheme = {
  baseStyle: "p-1 w-full block"
};
var tabsTriggerIndicatorTheme = {
  baseStyle: "bg-background rounded shadow-sm shadow-black/10 transition-all duration-300 ease-in"
};

// src/theme/textarea.ts
var textareaTheme = {
  defaultProps: {
    size: "md",
    color: "primary",
    resize: false,
    isError: false,
    isSuccess: false
  },
  baseStyle: "peer block w-full resize-none outline-none focus:outline-none text-black dark:text-white placeholder:text-foreground/60 bg-transparent ring-transparent border border-surface transition-all duration-300 ease-in disabled:opacity-50 disabled:pointer-events-none data-[error=true]:border-error data-[success=true]:border-success data-[resize=true]:resize-y",
  color: {
    primary: "hover:border-primary hover:ring-primary/10 focus:border-primary focus:ring-primary/10",
    secondary: "hover:border-secondary hover:ring-secondary/10 focus:border-secondary focus:ring-secondary/10",
    info: "hover:border-info hover:ring-info/10 focus:border-info focus:ring-info/10",
    success: "hover:border-success hover:ring-success/10 focus:border-success focus:ring-success/10",
    warning: "hover:border-warning hover:ring-warning/10 focus:border-warning focus:ring-warning/10",
    error: "hover:border-error hover:ring-error/10 focus:border-error focus:ring-error/10"
  },
  size: {
    sm: "text-sm leading-none p-1.5 rounded-md ring",
    md: "text-sm leading-none p-2.5 rounded-md ring",
    lg: "text-base leading-none p-3.5 rounded-lg ring-4"
  }
};

// src/theme/tooltip.ts
var tooltipTheme = {
  defaultProps: {
    placement: "top",
    offset: 8,
    interactive: false
  }
};
var tooltipTriggerTheme = {
  baseStyle: "outline-none group"
};
var tooltipContentTheme = {
  baseStyle: "rounded-md bg-black dark:bg-white border-black dark:border-white px-1.5 pt-1 pb-[3px] text-xs text-white dark:text-black shadow-lg shadow-black/5 outline-none"
};
var tooltipArrowTheme = {
  baseStyle: "h-2 w-2 rounded-bl-[3px] border border-[inherit] bg-inherit [clip-path:polygon(0_0,_100%_100%,_0_100%)] data-[placement^=bottom]:rotate-[135deg] data-[placement^=left]:rotate-[225deg] data-[placement^=right]:rotate-45 data-[placement^=top]:-rotate-45"
};

// src/theme/typography.ts
var typographyTheme = {
  defaultProps: {
    type: "p",
    color: "inherit"
  },
  baseStyle: "font-sans antialiased",
  color: {
    inherit: "text-inherit",
    default: "text-black dark:text-white",
    primary: "text-primary",
    secondary: "text-secondary",
    info: "text-info",
    success: "text-success",
    warning: "text-warning",
    error: "text-error"
  },
  type: {
    h1: "font-bold text-4xl md:text-5xl lg:text-6xl",
    h2: "font-bold text-3xl md:text-4xl lg:text-5xl",
    h3: "font-bold text-2xl md:text-3xl lg:text-4xl",
    h4: "font-bold text-xl md:text-2xl lg:text-3xl",
    h5: "font-bold text-lg md:text-xl lg:text-2xl",
    h6: "font-bold text-base md:text-lg lg:text-xl",
    lead: " text-base md:text-lg",
    p: " text-base",
    small: " text-sm"
  }
};

// src/theme/timeline.ts
var timelineTheme = {
  defaultProps: {
    color: "primary",
    mode: "timeline",
    orientation: "horizontal"
  },
  baseStyle: "flex w-full data-[orientation=horizontal]:flex-row data-[orientation=vertical]:flex-col data-[orientation=vertical]:items-start data-[orientation=horizontal]:items-center"
};
var timelineItemTheme = {
  baseStyle: "group data-[orientation=horizontal]:block data-[orientation=vertical]:flex data-[orientation=vertical]:gap-x-6 aria-disabled:select-none aria-disabled:pointer-events-none"
};
var timelineHeaderTheme = {
  baseStyle: "relative"
};
var timelineIconTheme = {
  baseStyle: "relative z-10 grid h-10 w-10 place-items-center rounded-full bg-surface text-surface-foreground",
  color: {
    primary: "group-data-[active=true]:bg-primary group-data-[active=true]:text-primary-foreground group-data-[completed=true]:bg-primary group-data-[completed=true]:text-primary-foreground",
    secondary: "group-data-[active=true]:bg-secondary group-data-[active=true]:text-secondary-foreground group-data-[completed=true]:bg-secondary group-data-[completed=true]:text-secondary-foreground",
    info: "group-data-[active=true]:bg-info group-data-[active=true]:text-info-foreground group-data-[completed=true]:bg-info group-data-[completed=true]:text-info-foreground",
    success: "group-data-[active=true]:bg-success group-data-[active=true]:text-success-foreground group-data-[completed=true]:bg-success group-data-[completed=true]:text-success-foreground",
    warning: "group-data-[active=true]:bg-warning group-data-[active=true]:text-warning-foreground group-data-[completed=true]:bg-warning group-data-[completed=true]:text-warning-foreground",
    error: "group-data-[active=true]:bg-error group-data-[active=true]:text-error-foreground group-data-[completed=true]:bg-error group-data-[completed=true]:text-error-foreground"
  }
};
var timelineSeparatorTheme = {
  baseStyle: "bg-surface absolute data-[orientation=vertical]:left-1/2 data-[orientation=vertical]:top-0 data-[orientation=vertical]:h-full data-[orientation=vertical]:w-0.5 data-[orientation=vertical]:-translate-x-1/2 data-[orientation=horizontal]:top-1/2 data-[orientation=horizontal]:left-0 data-[orientation=horizontal]:h-0.5 data-[orientation=horizontal]:w-full data-[orientation=horizontal]:-translate-y-1/2",
  color: {
    primary: "group-data-[completed=true]:bg-primary",
    secondary: "group-data-[completed=true]:bg-secondary",
    info: "group-data-[completed=true]:bg-info",
    success: "group-data-[completed=true]:bg-success",
    warning: "group-data-[completed=true]:bg-warning",
    error: "group-data-[completed=true]:bg-error"
  }
};
var timelineBodyTheme = {
  baseStyle: "data-[orientation=vertical]:pb-8 data-[orientation=horizontal]:py-4 text-foreground"
};

// src/theme/theme.ts
var theme = {
  accordion: accordionTheme,
  accordionItem: accordionItemTheme,
  accordionTrigger: accordionTriggerTheme,
  accordionContent: accordionContentTheme,
  alert: alertTheme,
  alertContent: alertContentTheme,
  alertIcon: alertIconTheme,
  alertDismissTrigger: alertDismissTriggerTheme,
  avatar: avatarTheme,
  breadcrumb: breadcrumbTheme,
  breadcrumbLink: breadcrumbLinkTheme,
  breadcrumbSeparator: breadcrumbSeparatorTheme,
  button: buttonTheme,
  buttonGroup: buttonGroupTheme,
  checkbox: checkboxTheme,
  checkboxIndicator: checkboxIndicatorTheme,
  card: cardTheme,
  cardHeader: cardHeaderTheme,
  cardBody: cardBodyTheme,
  cardFooter: cardFooterTheme,
  chip: chipTheme,
  chipLabel: chipLabelTheme,
  chipIcon: chipIconTheme,
  chipDismissTrigger: chipDismissTriggerTheme,
  collapse: collapseTheme,
  dialog: dialogTheme,
  dialogTrigger: dialogTriggerTheme,
  dialogOverlay: dialogOverlayTheme,
  dialogContent: dialogContentTheme,
  dialogDismissTrigger: dialogDismissTriggerTheme,
  drawerTrigger: drawerTriggerTheme,
  drawerOverlay: drawerOverlayTheme,
  drawerPanel: drawerPanelTheme,
  drawerDismissTrigger: drawerDismissTriggerTheme,
  iconButton: iconButtonTheme,
  input: inputTheme,
  inputField: inputFieldTheme,
  inputIcon: inputIconTheme,
  list: listTheme,
  listItem: listItemTheme,
  listItemStart: listItemStartTheme,
  listItemEnd: listItemEndTheme,
  menu: menuTheme,
  menuContent: menuContentTheme,
  menuTrigger: menuTriggerTheme,
  menuItem: menuItemTheme,
  popover: popoverTheme,
  popoverTrigger: popoverTriggerTheme,
  popoverContent: popoverContentTheme,
  popoverArrow: popoverArrowTheme,
  progress: progressTheme,
  progressBar: progressBarTheme,
  radio: radioTheme,
  radioItem: radioItemTheme,
  radioIndicator: radioIndicatorTheme,
  rating: ratingTheme,
  select: selectTheme,
  selectTrigger: selectTriggerTheme,
  selectList: selectListTheme,
  selectOption: selectOptionTheme,
  spinner: spinnerTheme,
  switch: switchTheme,
  tabs: tabsTheme,
  tabsList: tabsListTheme,
  tabsTrigger: tabsTriggerTheme,
  tabsPanel: tabsPanelTheme,
  tabsTriggerIndicator: tabsTriggerIndicatorTheme,
  textarea: textareaTheme,
  tooltip: tooltipTheme,
  tooltipTrigger: tooltipTriggerTheme,
  tooltipContent: tooltipContentTheme,
  tooltipArrow: tooltipArrowTheme,
  typography: typographyTheme,
  timeline: timelineTheme,
  timelineItem: timelineItemTheme,
  timelineHeader: timelineHeaderTheme,
  timelineIcon: timelineIconTheme,
  timelineSeparator: timelineSeparatorTheme,
  timelineBody: timelineBodyTheme
};

// src/context/index.tsx
var import_deepmerge = __toESM(require("deepmerge"), 1);

// src/utils/merge-theme.ts
var import_tailwind_merge = require("tailwind-merge");

// src/context/index.tsx
var import_jsx_runtime3 = require("react/jsx-runtime");
var MaterialTailwindThemeContext = React.createContext(theme);
MaterialTailwindThemeContext.displayName = "MaterialTailwind.ThemeProvider";
function useTheme() {
  const context = React.useContext(MaterialTailwindThemeContext);
  if (!context) {
    return null;
  }
  return context;
}

// src/components/accordion.tsx
var import_jsx_runtime4 = require("react/jsx-runtime");
var AccordionContext = React2.createContext({
  type: "single",
  activeItem: "",
  setActiveItem: () => {
  }
});
function AccordionRoot({
  type,
  value,
  defaultValue,
  onValueChange,
  children
}) {
  const contextTheme = useTheme();
  const theme2 = contextTheme.accordion || accordionTheme;
  const defaultProps = theme2?.defaultProps;
  type ??= defaultProps?.type ?? "single";
  const accordionValue = value || defaultValue;
  const [uncontrolledActiveItem, setUncontrolledActiveItem] = React2.useState("");
  const activeItem = value || uncontrolledActiveItem;
  const setActiveItem = onValueChange || setUncontrolledActiveItem;
  React2.useEffect(() => {
    setActiveItem(accordionValue);
  }, [accordionValue]);
  const contextValue = React2.useMemo(
    () => ({
      type,
      activeItem,
      setActiveItem
    }),
    [type, activeItem, setActiveItem]
  );
  return /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(AccordionContext.Provider, { value: contextValue, children });
}
AccordionRoot.displayName = "MaterialTailwind.Accordion";
var AccordionItemContext = React2.createContext("");
var AccordionItem = React2.forwardRef(
  ({ as, value, disabled, className, children, ...rest }, ref) => {
    const Element = as || "div";
    const contextTheme = useTheme();
    const theme2 = contextTheme.accordionItem || accordionItemTheme;
    const defaultProps = theme2?.defaultProps;
    const { type, activeItem } = React2.useContext(AccordionContext);
    disabled ??= defaultProps?.disabled ?? false;
    const isMultiple = type === "multiple";
    const isOpen = isMultiple ? activeItem?.includes(value) : activeItem === value;
    const styles = (0, import_tailwind_merge2.twMerge)(theme2.baseStyle, className);
    return /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(AccordionItemContext.Provider, { value, children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
      Element,
      {
        ...rest,
        ref,
        "data-open": isOpen,
        className: styles,
        "aria-disabled": disabled,
        children
      }
    ) });
  }
);
AccordionItem.displayName = "MaterialTailwind.AccordionItem";
var AccordionTrigger = React2.forwardRef(({ as, className, children, ...rest }, ref) => {
  const Element = as || "button";
  const contextTheme = useTheme();
  const theme2 = contextTheme.accordionTrigger || accordionTriggerTheme;
  const value = React2.useContext(AccordionItemContext);
  const { type, activeItem, setActiveItem } = React2.useContext(AccordionContext);
  const isMultiple = type === "multiple";
  const isOpen = isMultiple ? activeItem?.includes(value) : activeItem === value;
  const styles = (0, import_tailwind_merge2.twMerge)(theme2.baseStyle, className);
  return /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
    Element,
    {
      ...rest,
      ref,
      "data-open": isOpen,
      className: styles,
      onClick: (event) => {
        if (isMultiple) {
          if (activeItem?.includes(value)) {
            setActiveItem?.(
              (prev) => prev.filter((item) => item !== value)
            );
          } else {
            setActiveItem?.((prev) => [...prev, value]);
          }
        } else {
          setActiveItem?.((prev) => prev === value ? "" : value);
        }
        rest.onClick?.(event);
      },
      children
    }
  );
});
AccordionTrigger.displayName = "MaterialTailwind.AccordionTrigger";
var AccordionContent = React2.forwardRef(({ as, className, children, ...rest }, ref) => {
  const Element = as || "div";
  const contextTheme = useTheme();
  const theme2 = contextTheme.accordionContent || accordionContentTheme;
  const value = React2.useContext(AccordionItemContext);
  const { type, activeItem } = React2.useContext(AccordionContext);
  const isMultiple = type === "multiple";
  const isOpen = isMultiple ? activeItem?.includes(value) : activeItem === value;
  const styles = (0, import_tailwind_merge2.twMerge)(theme2.baseStyle, className);
  return isOpen ? /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(Element, { ...rest, ref, className: styles, "data-open": isOpen, children }) : null;
});
AccordionContent.displayName = "MaterialTailwind.AccordionContent";
var Accordion = Object.assign(AccordionRoot, {
  Item: AccordionItem,
  Trigger: AccordionTrigger,
  Content: AccordionContent
});

// src/components/alert.tsx
var React3 = __toESM(require("react"), 1);
var import_tailwind_merge3 = require("tailwind-merge");
var import_jsx_runtime5 = require("react/jsx-runtime");
var AlertContext = React3.createContext({
  color: "primary",
  variant: "solid",
  isPill: false,
  open: true,
  setOpen: () => {
  }
});
var AlertRoot = React3.forwardRef(
  ({
    as,
    color,
    variant,
    isPill,
    className,
    open: controlledOpen,
    onOpenChange: setControlledOpen,
    children,
    ...rest
  }, ref) => {
    const Element = as ?? "div";
    const contextTheme = useTheme();
    const theme2 = contextTheme?.alert ?? alertTheme;
    const defaultProps = theme2?.defaultProps;
    const [uncontrolledOpen, setUncontrolledOpen] = React3.useState(true);
    const open = controlledOpen ?? uncontrolledOpen;
    const setOpen = setControlledOpen ?? setUncontrolledOpen;
    color ??= defaultProps?.color ?? "primary";
    variant ??= defaultProps?.variant ?? "solid";
    isPill ??= defaultProps?.isPill ?? false;
    const styles = (0, import_tailwind_merge3.twMerge)(
      theme2.baseStyle,
      theme2["variant"][variant][color],
      className
    );
    const contextValue = React3.useMemo(
      () => ({
        color,
        variant,
        isPill,
        open,
        setOpen
      }),
      [color, variant, isPill, open, setOpen]
    );
    return open ? /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(
      Element,
      {
        ...rest,
        ref,
        role: "alert",
        "data-open": open,
        "data-pill": isPill,
        className: styles,
        children: /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(AlertContext.Provider, { value: contextValue, children })
      }
    ) : null;
  }
);
AlertRoot.displayName = "MaterialTailwind.Alert";
var AlertContent = React3.forwardRef(
  ({ as, className, children, ...rest }, ref) => {
    const Element = as ?? "div";
    const contextTheme = useTheme();
    const theme2 = contextTheme?.alertContent ?? alertContentTheme;
    const styles = (0, import_tailwind_merge3.twMerge)(theme2.baseStyle, className);
    return /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(Element, { ...rest, ref, className: styles, children });
  }
);
AlertContent.displayName = "MaterialTailwind.AlertContent";
var AlertIcon = React3.forwardRef(
  ({ as, className, children, ...rest }, ref) => {
    const Element = as ?? "span";
    const contextTheme = useTheme();
    const theme2 = contextTheme?.alertIcon ?? alertIconTheme;
    const styles = (0, import_tailwind_merge3.twMerge)(theme2.baseStyle, className);
    return /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(Element, { ...rest, ref, className: styles, children });
  }
);
AlertIcon.displayName = "MaterialTailwind.AlertIcon";
var AlertDismissTrigger = React3.forwardRef(({ as, ripple, className, children, ...rest }, ref) => {
  const Element = as ?? "button";
  const contextTheme = useTheme();
  const { setOpen } = React3.useContext(AlertContext);
  const theme2 = contextTheme?.alertDismissTrigger ?? alertDismissTriggerTheme;
  const styles = children ? className : (0, import_tailwind_merge3.twMerge)(theme2.baseStyle, className);
  function closeAlert(event) {
    setOpen?.(false);
    rest.onClick?.(event);
  }
  return /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(Element, { ...rest, ref, className: styles, onClick: closeAlert, children: children || /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(
    "svg",
    {
      viewBox: "0 0 24 24",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      color: "currentColor",
      className: "m-1 h-5 w-5 stroke-2",
      children: /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(
        "path",
        {
          d: "M6.75827 17.2426L12.0009 12M17.2435 6.75736L12.0009 12M12.0009 12L6.75827 6.75736M12.0009 12L17.2435 17.2426",
          stroke: "currentColor",
          strokeLinecap: "round",
          strokeLinejoin: "round"
        }
      )
    }
  ) });
});
AlertDismissTrigger.displayName = "MaterialTailwind.AlertDismissTrigger";
var Alert = Object.assign(AlertRoot, {
  Icon: AlertIcon,
  Content: AlertContent,
  DismissTrigger: AlertDismissTrigger
});

// src/components/avatar.tsx
var React4 = __toESM(require("react"), 1);
var import_tailwind_merge4 = require("tailwind-merge");
var import_jsx_runtime6 = require("react/jsx-runtime");
var Avatar = React4.forwardRef(
  ({ as, src, alt, shape, size, className, ...rest }, ref) => {
    const Element = as ?? "img";
    const contextTheme = useTheme();
    const theme2 = contextTheme?.avatar ?? avatarTheme;
    const defaultProps = theme2?.defaultProps;
    size ??= defaultProps?.size ?? "md";
    shape ??= defaultProps?.shape ?? "circular";
    const styles = (0, import_tailwind_merge4.twMerge)(theme2.baseStyle, theme2["size"][size], className);
    return /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(
      Element,
      {
        ...rest,
        ref,
        src,
        alt,
        className: styles,
        "data-shape": shape
      }
    );
  }
);
Avatar.displayName = "MaterialTailwind.Avatar";

// src/components/breadcrumb.tsx
var React5 = __toESM(require("react"), 1);
var import_tailwind_merge5 = require("tailwind-merge");
var import_jsx_runtime7 = require("react/jsx-runtime");
var BreadcrumbRoot = React5.forwardRef(
  ({ as, className, children, ...rest }, ref) => {
    const Element = as || "nav";
    const contextTheme = useTheme();
    const theme2 = contextTheme.breadcrumb || breadcrumbTheme;
    const styles = (0, import_tailwind_merge5.twMerge)(theme2.baseStyle, className);
    return /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(Element, { ...rest, ref, className: styles, children });
  }
);
BreadcrumbRoot.displayName = "MaterialTailwind.Breadcrumb";
var BreadcrumbLink = React5.forwardRef(({ as, className, children, ...rest }, ref) => {
  const Element = as || "a";
  const contextTheme = useTheme();
  const theme2 = contextTheme.breadcrumbLink || breadcrumbLinkTheme;
  const styles = (0, import_tailwind_merge5.twMerge)(theme2.baseStyle, className);
  return /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(Element, { ...rest, ref, className: styles, children });
});
BreadcrumbLink.displayName = "MaterialTailwind.BreadcrumbLink";
var BreadcrumbSeparator = React5.forwardRef(({ as, className, children, ...rest }, ref) => {
  const Element = as || "span";
  const contextTheme = useTheme();
  const theme2 = contextTheme.breadcrumbSeparator || breadcrumbSeparatorTheme;
  const styles = (0, import_tailwind_merge5.twMerge)(theme2.baseStyle, className);
  return /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(Element, { ...rest, ref, className: styles, children: children || "/" });
});
BreadcrumbSeparator.displayName = "MaterialTailwind.BreadcrumbSeparator";
var Breadcrumb = Object.assign(BreadcrumbRoot, {
  Link: BreadcrumbLink,
  Separator: BreadcrumbSeparator
});

// src/components/button.tsx
var React6 = __toESM(require("react"), 1);
var import_tailwind_merge6 = require("tailwind-merge");
var import_material_ripple_effects = __toESM(require("material-ripple-effects"), 1);
var import_jsx_runtime8 = require("react/jsx-runtime");
var Button = React6.forwardRef(
  ({
    as,
    color,
    variant,
    size,
    ripple,
    isPill,
    isFullWidth,
    className,
    children,
    ...rest
  }, ref) => {
    const Element = as ?? "button";
    const contextTheme = useTheme();
    const theme2 = contextTheme?.button ?? buttonTheme;
    const defaultProps = theme2?.defaultProps;
    size ??= defaultProps?.size ?? "md";
    ripple ??= defaultProps?.ripple ?? true;
    color ??= defaultProps?.color ?? "primary";
    variant ??= defaultProps?.variant ?? "solid";
    isPill ??= defaultProps?.isPill ?? false;
    isFullWidth ??= defaultProps?.isFullWidth ?? false;
    const rippleEffect = ripple !== void 0 && new import_material_ripple_effects.default();
    const handleClick = (e) => {
      const onClick = rest?.onClick;
      const isDarkRipple = variant === "ghost" || color === "secondary";
      if (ripple) {
        rippleEffect.create(e, isDarkRipple ? "dark" : "light");
      }
      return typeof onClick === "function" && onClick(e);
    };
    const styles = (0, import_tailwind_merge6.twMerge)(
      theme2.baseStyle,
      theme2["size"][size],
      theme2["variant"][variant][color],
      className
    );
    return /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(
      Element,
      {
        ...rest,
        ref,
        className: styles,
        onClick: handleClick,
        "data-shape": isPill ? "pill" : "default",
        "data-width": isFullWidth ? "full" : "default",
        children
      }
    );
  }
);
Button.displayName = "MaterialTailwind.Button";

// src/components/button-group.tsx
var React7 = __toESM(require("react"), 1);
var import_tailwind_merge7 = require("tailwind-merge");
var import_jsx_runtime9 = require("react/jsx-runtime");
var ButtonGroup = React7.forwardRef(
  ({
    as,
    color,
    variant,
    size,
    ripple,
    isPill,
    isFullWidth,
    className,
    orientation,
    children,
    ...rest
  }, ref) => {
    const Element = as ?? "div";
    const contextTheme = useTheme();
    const theme2 = contextTheme?.buttonGroup ?? buttonGroupTheme;
    const defaultProps = theme2?.defaultProps;
    size ??= defaultProps?.size ?? "md";
    ripple ??= defaultProps?.ripple ?? true;
    color ??= defaultProps?.color ?? "primary";
    variant ??= defaultProps?.variant ?? "solid";
    orientation ??= defaultProps?.orientation ?? "horizontal";
    isFullWidth ??= defaultProps?.isFullWidth ?? false;
    isPill ??= defaultProps?.isPill ?? false;
    const styles = (0, import_tailwind_merge7.twMerge)(theme2.baseStyle, className);
    return /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(
      Element,
      {
        ...rest,
        ref,
        className: styles,
        "data-variant": variant,
        "data-orientation": orientation,
        "data-shape": isPill ? "pill" : "default",
        "data-width": isFullWidth ? "full" : "default",
        children: React7.Children.map(
          children,
          (child) => React7.isValidElement(child) && React7.cloneElement(child, {
            variant,
            size,
            color,
            ripple,
            isPill,
            isFullWidth,
            "data-variant": variant,
            "data-orientation": orientation,
            ...child.props
          })
        )
      }
    );
  }
);
ButtonGroup.displayName = "MaterialTailwind.ButtonGroup";

// src/components/checkbox.tsx
var React8 = __toESM(require("react"), 1);
var import_tailwind_merge8 = require("tailwind-merge");
var import_jsx_runtime10 = require("react/jsx-runtime");
var CheckboxContext = React8.createContext({
  color: "primary",
  disabled: false,
  checked: false
});
var CheckboxRoot = React8.forwardRef(
  ({ color, disabled, className, children, ...props }, ref) => {
    const contextTheme = useTheme();
    const theme2 = contextTheme?.checkbox ?? checkboxTheme;
    const defaultProps = theme2?.defaultProps;
    const innerId = React8.useId();
    const [checked, setChecked] = React8.useState(props?.checked || false);
    color ??= defaultProps?.color ?? "primary";
    const styles = (0, import_tailwind_merge8.twMerge)(theme2.baseStyle, theme2.color[color], className);
    React8.useEffect(() => {
      if (props?.defaultChecked) {
        setChecked(props?.defaultChecked);
      }
    }, []);
    const contextValue = React8.useMemo(
      () => ({
        color,
        checked,
        disabled
      }),
      [color, checked, disabled]
    );
    return /* @__PURE__ */ (0, import_jsx_runtime10.jsxs)(
      "label",
      {
        ref,
        className: styles,
        "data-checked": checked,
        "aria-disabled": disabled,
        htmlFor: props?.id || innerId,
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(
            "input",
            {
              ...props,
              id: props?.id || innerId,
              type: "checkbox",
              checked: props?.defaultChecked ? void 0 : props?.checked || checked,
              onChange: (e) => {
                props?.onChange?.(e);
                setChecked((cur) => !cur);
              },
              style: { display: "none" }
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(CheckboxContext.Provider, { value: contextValue, children })
        ]
      }
    );
  }
);
CheckboxRoot.displayName = "MaterialTailwind.Checkbox";
var CheckboxIndicator = React8.forwardRef(({ as, className, children, ...props }, ref) => {
  const Element = as || "span";
  const contextTheme = useTheme();
  const { checked } = React8.useContext(CheckboxContext);
  const theme2 = contextTheme?.checkboxIndicator ?? checkboxIndicatorTheme;
  const styles = (0, import_tailwind_merge8.twMerge)(theme2.baseStyle, className);
  return /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(Element, { ...props, "data-checked": checked, className: styles, ref, children: children || /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(
    "svg",
    {
      fill: "none",
      width: "18px",
      height: "18px",
      strokeWidth: "2",
      color: "currentColor",
      viewBox: "0 0 24 24",
      xmlns: "http://www.w3.org/2000/svg",
      children: /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(
        "path",
        {
          d: "M5 13L9 17L19 7",
          stroke: "currentColor",
          strokeWidth: "2",
          strokeLinecap: "round",
          strokeLinejoin: "round"
        }
      )
    }
  ) });
});
CheckboxIndicator.displayName = "MaterialTailwind.CheckboxIndicator";
var Checkbox = Object.assign(CheckboxRoot, {
  Indicator: CheckboxIndicator
});

// src/components/card.tsx
var React9 = __toESM(require("react"), 1);
var import_tailwind_merge9 = require("tailwind-merge");
var import_jsx_runtime11 = require("react/jsx-runtime");
var CardRoot = React9.forwardRef(
  ({ as, color, variant, className, children, ...rest }, ref) => {
    const Element = as || "div";
    const contextTheme = useTheme();
    const theme2 = contextTheme.card || cardTheme;
    const defaultProps = theme2.defaultProps;
    color ??= defaultProps?.color ?? "default";
    variant ??= defaultProps?.variant ?? "solid";
    const styles = (0, import_tailwind_merge9.twMerge)(
      theme2.baseStyle,
      theme2.variant[variant][color],
      className
    );
    return /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(Element, { ...rest, ref, className: styles, children });
  }
);
CardRoot.displayName = "MaterialTailwind.Card";
var CardHeader = React9.forwardRef(
  ({ as, className, children, ...rest }, ref) => {
    const Element = as || "div";
    const contextTheme = useTheme();
    const theme2 = contextTheme.cardHeader || cardHeaderTheme;
    const styles = (0, import_tailwind_merge9.twMerge)(theme2.baseStyle, className);
    return /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(Element, { ...rest, ref, className: styles, children });
  }
);
CardHeader.displayName = "MaterialTailwind.CardHeader";
var CardBody = React9.forwardRef(
  ({ as, className, children, ...rest }, ref) => {
    const Element = as || "div";
    const contextTheme = useTheme();
    const theme2 = contextTheme.cardBody || cardBodyTheme;
    const styles = (0, import_tailwind_merge9.twMerge)(theme2.baseStyle, className);
    return /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(Element, { ...rest, ref, className: styles, children });
  }
);
CardBody.displayName = "MaterialTailwind.CardBody";
var CardFooter = React9.forwardRef(
  ({ as, className, children, ...rest }, ref) => {
    const Element = as || "div";
    const contextTheme = useTheme();
    const theme2 = contextTheme.cardFooter || cardFooterTheme;
    const styles = (0, import_tailwind_merge9.twMerge)(theme2.baseStyle, className);
    return /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(Element, { ...rest, ref, className: styles, children });
  }
);
CardFooter.displayName = "MaterialTailwind.CardFooter";
var Card = Object.assign(CardRoot, {
  Header: CardHeader,
  Body: CardBody,
  Footer: CardFooter
});

// src/components/chip.tsx
var React10 = __toESM(require("react"), 1);
var import_tailwind_merge10 = require("tailwind-merge");
var import_material_ripple_effects2 = __toESM(require("material-ripple-effects"), 1);
var import_jsx_runtime12 = require("react/jsx-runtime");
var ChipContext = React10.createContext({
  size: "md",
  color: "primary",
  variant: "solid",
  open: true,
  setOpen: () => {
  }
});
var ChipRoot = React10.forwardRef(
  ({
    as,
    size,
    color,
    variant,
    className,
    open: controlledOpen,
    onOpenChange: setControlledOpen,
    children,
    ...rest
  }, ref) => {
    const Element = as ?? "div";
    const contextTheme = useTheme();
    const theme2 = contextTheme?.chip ?? chipTheme;
    const defaultProps = theme2?.defaultProps;
    const [uncontrolledOpen, setUncontrolledOpen] = React10.useState(true);
    const open = controlledOpen ?? uncontrolledOpen;
    const setOpen = setControlledOpen ?? setUncontrolledOpen;
    size ??= defaultProps?.size ?? "md";
    color ??= defaultProps?.color ?? "primary";
    variant ??= defaultProps?.variant ?? "solid";
    const styles = (0, import_tailwind_merge10.twMerge)(
      theme2.baseStyle,
      theme2["size"][size],
      theme2["variant"][variant][color],
      className
    );
    const contextValue = React10.useMemo(
      () => ({
        size,
        color,
        variant,
        open,
        setOpen
      }),
      [size, color, variant, open, setOpen]
    );
    return open ? /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(Element, { ...rest, ref, "data-open": open, className: styles, children: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(ChipContext.Provider, { value: contextValue, children }) }) : null;
  }
);
ChipRoot.displayName = "MaterialTailwind.Chip";
var ChipLabel = React10.forwardRef(
  ({ as, className, children, ...rest }, ref) => {
    const Element = as ?? "span";
    const contextTheme = useTheme();
    const { size } = React10.useContext(ChipContext);
    const theme2 = contextTheme?.chipLabel ?? chipLabelTheme;
    const styles = (0, import_tailwind_merge10.twMerge)(
      theme2.baseStyle,
      theme2["size"][size || "md"],
      className
    );
    return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(Element, { ...rest, ref, className: styles, children });
  }
);
ChipLabel.displayName = "MaterialTailwind.ChipLabel";
var ChipIcon = React10.forwardRef(
  ({ as, className, children, ...rest }, ref) => {
    const Element = as ?? "span";
    const contextTheme = useTheme();
    const { size } = React10.useContext(ChipContext);
    const theme2 = contextTheme?.chipIcon ?? chipIconTheme;
    const styles = (0, import_tailwind_merge10.twMerge)(
      theme2.baseStyle,
      theme2["size"][size || "md"],
      className
    );
    return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(Element, { ...rest, ref, className: styles, children });
  }
);
ChipIcon.displayName = "MaterialTailwind.ChipIcon";
var ChipDismissTrigger = React10.forwardRef(({ as, ripple, className, children, ...rest }, ref) => {
  const Element = as ?? "button";
  const contextTheme = useTheme();
  const { size, color, variant, setOpen } = React10.useContext(ChipContext);
  const theme2 = contextTheme?.chipDismissTrigger ?? chipDismissTriggerTheme;
  const defaultProps = theme2?.defaultProps;
  ripple ??= defaultProps?.ripple ?? true;
  const rippleEffect = ripple !== void 0 && new import_material_ripple_effects2.default();
  const handleClick = (event) => {
    setOpen?.(false);
    rest.onClick?.(event);
    const isDarkRipple = variant === "ghost" || variant === "outline" || color === "secondary" || color === "warning";
    if (ripple) {
      rippleEffect.create(event, isDarkRipple ? "dark" : "light");
    }
  };
  const styles = (0, import_tailwind_merge10.twMerge)(
    theme2.baseStyle,
    theme2["size"][size || "md"],
    className
  );
  return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(Element, { ...rest, ref, className: styles, onClick: handleClick, children: children || /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
    "svg",
    {
      viewBox: "0 0 24 24",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      color: "currentColor",
      className: "h-full w-full",
      children: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
        "path",
        {
          d: "M6.75827 17.2426L12.0009 12M17.2435 6.75736L12.0009 12M12.0009 12L6.75827 6.75736M12.0009 12L17.2435 17.2426",
          stroke: "currentColor",
          strokeLinecap: "round",
          strokeLinejoin: "round"
        }
      )
    }
  ) });
});
ChipDismissTrigger.displayName = "MaterialTailwind.ChipDismissTrigger";
var Chip = Object.assign(ChipRoot, {
  Icon: ChipIcon,
  Label: ChipLabel,
  DismissTrigger: ChipDismissTrigger
});

// src/components/collapse.tsx
var React11 = __toESM(require("react"), 1);
var import_tailwind_merge11 = require("tailwind-merge");
var import_jsx_runtime13 = require("react/jsx-runtime");
var Collapse = React11.forwardRef(
  ({ as, open, className, children, ...rest }, ref) => {
    const Element = as ?? "div";
    const contextTheme = useTheme();
    const theme2 = contextTheme?.collapse ?? collapseTheme;
    const styles = (0, import_tailwind_merge11.twMerge)(theme2.baseStyle, className);
    return open ? /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(Element, { ...rest, ref, "data-open": open, className: styles, children }) : null;
  }
);
Collapse.displayName = "MaterialTailwind.Collapse";

// src/components/dialog.tsx
var React12 = __toESM(require("react"), 1);
var import_react = require("@floating-ui/react");
var import_react2 = require("@floating-ui/react");
var import_tailwind_merge12 = require("tailwind-merge");
var import_jsx_runtime14 = require("react/jsx-runtime");
var DialogContext = React12.createContext({
  open: false,
  setOpen: () => {
  }
});
function DialogRoot({
  size,
  open: controlledOpen,
  onOpenChange: setControlledOpen,
  children
}) {
  const contextTheme = useTheme();
  const theme2 = contextTheme?.dialog ?? dialogTheme;
  const defaultProps = theme2?.defaultProps;
  const [uncontrolledOpen, setUncontrolledOpen] = React12.useState(false);
  const open = controlledOpen ?? uncontrolledOpen;
  const setOpen = setControlledOpen ?? setUncontrolledOpen;
  size ??= defaultProps?.size ?? "md";
  const data = (0, import_react2.useFloating)({
    open,
    onOpenChange: setOpen
  });
  const { context } = data;
  const click = (0, import_react2.useClick)(context, {
    enabled: controlledOpen == null
  });
  const dismiss = (0, import_react2.useDismiss)(context, { outsidePressEvent: "mousedown" });
  const role = (0, import_react2.useRole)(context);
  const interactions = (0, import_react2.useInteractions)([click, dismiss, role]);
  const contextValue = React12.useMemo(
    () => ({
      open,
      setOpen,
      size,
      ...interactions,
      ...data
    }),
    [open, setOpen, size, interactions, data]
  );
  return /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(DialogContext.Provider, { value: contextValue, children });
}
DialogRoot.displayName = "MaterialTailwind.Dialog";
var DialogTrigger = React12.forwardRef(
  ({ as, className, children, ...rest }, ref) => {
    const Element = as || "button";
    const contextTheme = useTheme();
    const theme2 = contextTheme?.dialogTrigger ?? dialogTriggerTheme;
    const { refs, getReferenceProps, open } = React12.useContext(DialogContext);
    const styles = (0, import_tailwind_merge12.twMerge)(theme2.baseStyle, className);
    const elementRef = (0, import_react2.useMergeRefs)([refs?.setReference, ref]);
    return /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(
      Element,
      {
        ...rest,
        ref: elementRef,
        "data-open": open,
        className: styles,
        ...getReferenceProps && getReferenceProps(),
        children
      }
    );
  }
);
DialogTrigger.displayName = "MaterialTailwind.DialogTrigger";
var DialogOverlay = React12.forwardRef(({ className, lockScroll, children, ...rest }, ref) => {
  const contextTheme = useTheme();
  const theme2 = contextTheme?.dialogOverlay ?? dialogOverlayTheme;
  const defaultProps = theme2?.defaultProps;
  const { open } = React12.useContext(DialogContext);
  lockScroll ??= defaultProps?.lockScroll ?? true;
  const styles = (0, import_tailwind_merge12.twMerge)(theme2.baseStyle, className);
  return open ? /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(import_react.FloatingPortal, { children: /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(
    import_react.FloatingOverlay,
    {
      ...rest,
      ref,
      "data-open": open,
      className: styles,
      lockScroll,
      children
    }
  ) }) : null;
});
DialogOverlay.displayName = "MaterialTailwind.DialogOverlay";
var DialogContent = React12.forwardRef(
  ({
    as,
    className,
    children,
    disabled,
    initialFocus,
    returnFocus,
    guards,
    modal,
    visuallyHiddenDismiss,
    closeOnFocusOut,
    order,
    ...rest
  }, ref) => {
    const Element = as || "div";
    const contextTheme = useTheme();
    const theme2 = contextTheme?.dialogContent ?? dialogContentTheme;
    const defaultProps = theme2.defaultProps;
    const { context, refs, getFloatingProps, open, size } = React12.useContext(DialogContext);
    disabled ??= defaultProps?.disabled ?? false;
    initialFocus ??= defaultProps?.initialFocus ?? 0;
    returnFocus ??= defaultProps?.returnFocus ?? true;
    guards ??= defaultProps?.guards ?? true;
    modal ??= defaultProps?.modal ?? false;
    visuallyHiddenDismiss ??= defaultProps?.visuallyHiddenDismiss ?? true;
    closeOnFocusOut ??= defaultProps?.closeOnFocusOut ?? true;
    order ??= defaultProps?.order ?? [
      "content"
    ];
    const styles = (0, import_tailwind_merge12.twMerge)(theme2.baseStyle, theme2.size[size], className);
    const elementRef = (0, import_react2.useMergeRefs)([refs?.setFloating, ref]);
    return open ? /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(
      import_react.FloatingFocusManager,
      {
        order,
        modal,
        guards,
        disabled,
        returnFocus,
        initialFocus,
        closeOnFocusOut,
        visuallyHiddenDismiss,
        context,
        children: /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(
          Element,
          {
            ...rest,
            ref: elementRef,
            "data-open": open,
            className: styles,
            ...getFloatingProps && getFloatingProps(),
            children
          }
        )
      }
    ) : null;
  }
);
DialogContent.displayName = "MaterialTailwind.DialogContent";
var DialogDismissTrigger = React12.forwardRef(({ as, className, children, ...rest }, ref) => {
  const Element = as || "button";
  const contextTheme = useTheme();
  const theme2 = contextTheme?.dialogDismissTrigger ?? dialogDismissTriggerTheme;
  const { open, setOpen } = React12.useContext(DialogContext);
  const styles = (0, import_tailwind_merge12.twMerge)(theme2.baseStyle, className);
  return /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(
    Element,
    {
      ...rest,
      ref,
      "data-open": open,
      className: styles,
      onClick: (event) => {
        rest.onClick?.(event);
        if (setOpen) {
          setOpen(false);
        }
      },
      children
    }
  );
});
DialogDismissTrigger.displayName = "MaterialTailwind.DialogDismissTrigger";
var Dialog = Object.assign(DialogRoot, {
  Trigger: DialogTrigger,
  Overlay: DialogOverlay,
  Content: DialogContent,
  DismissTrigger: DialogDismissTrigger
});

// src/components/drawer.tsx
var React13 = __toESM(require("react"), 1);
var import_react3 = require("@floating-ui/react");
var import_react4 = require("@floating-ui/react");
var import_tailwind_merge13 = require("tailwind-merge");
var import_jsx_runtime15 = require("react/jsx-runtime");
var DrawerContext = React13.createContext(
  {}
);
function DrawerRoot({
  open: controlledOpen,
  onOpenChange: setControlledOpen,
  children
}) {
  const [uncontrolledOpen, setUncontrolledOpen] = React13.useState(false);
  const open = controlledOpen ?? uncontrolledOpen;
  const setOpen = setControlledOpen ?? setUncontrolledOpen;
  const data = (0, import_react4.useFloating)({
    open,
    onOpenChange: setOpen
  });
  const { context } = data;
  const click = (0, import_react4.useClick)(context, {
    enabled: controlledOpen == null
  });
  const dismiss = (0, import_react4.useDismiss)(context, { outsidePressEvent: "mousedown" });
  const role = (0, import_react4.useRole)(context);
  const interactions = (0, import_react4.useInteractions)([click, dismiss, role]);
  const contextValue = React13.useMemo(
    () => ({
      open,
      setOpen,
      ...interactions,
      ...data
    }),
    [open, setOpen, interactions, data]
  );
  return /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(DrawerContext.Provider, { value: contextValue, children });
}
DrawerRoot.displayName = "MaterialTailwind.Drawer";
var DrawerTrigger = React13.forwardRef(
  ({ as, className, children, ...rest }, ref) => {
    const Element = as || "button";
    const contextTheme = useTheme();
    const theme2 = contextTheme?.drawerTrigger ?? drawerTriggerTheme;
    const { refs, getReferenceProps, open } = React13.useContext(DrawerContext);
    const styles = (0, import_tailwind_merge13.twMerge)(theme2.baseStyle, className);
    const elementRef = (0, import_react4.useMergeRefs)([refs?.setReference, ref]);
    return /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(
      Element,
      {
        ...rest,
        ref: elementRef,
        "data-open": open,
        className: styles,
        ...getReferenceProps && getReferenceProps(),
        children
      }
    );
  }
);
DrawerTrigger.displayName = "MaterialTailwind.DrawerTrigger";
var DrawerOverlay = React13.forwardRef(({ className, lockScroll, children, ...rest }, ref) => {
  const contextTheme = useTheme();
  const theme2 = contextTheme?.drawerOverlay ?? drawerOverlayTheme;
  const defaultProps = theme2?.defaultProps;
  const { open } = React13.useContext(DrawerContext);
  lockScroll ??= defaultProps?.lockScroll ?? true;
  const styles = (0, import_tailwind_merge13.twMerge)(theme2.baseStyle, className);
  return open ? /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(import_react3.FloatingPortal, { children: /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(
    import_react3.FloatingOverlay,
    {
      ...rest,
      ref,
      "data-open": open,
      className: styles,
      lockScroll,
      children
    }
  ) }) : null;
});
DrawerOverlay.displayName = "MaterialTailwind.DrawerOverlay";
var DrawerPanel = React13.forwardRef(
  ({
    as,
    className,
    children,
    placement,
    disabled,
    initialFocus,
    returnFocus,
    guards,
    modal,
    visuallyHiddenDismiss,
    closeOnFocusOut,
    order,
    ...rest
  }, ref) => {
    const Element = as || "div";
    const contextTheme = useTheme();
    const theme2 = contextTheme?.drawerPanel ?? drawerPanelTheme;
    const defaultProps = theme2.defaultProps;
    const { context, refs, getFloatingProps, open } = React13.useContext(DrawerContext);
    placement ??= defaultProps?.placement ?? "right";
    disabled ??= defaultProps?.disabled ?? false;
    initialFocus ??= defaultProps?.initialFocus ?? 0;
    returnFocus ??= defaultProps?.returnFocus ?? true;
    guards ??= defaultProps?.guards ?? true;
    modal ??= defaultProps?.modal ?? false;
    visuallyHiddenDismiss ??= defaultProps?.visuallyHiddenDismiss ?? true;
    closeOnFocusOut ??= defaultProps?.closeOnFocusOut ?? true;
    order ??= defaultProps?.order ?? ["content"];
    const styles = (0, import_tailwind_merge13.twMerge)(theme2.baseStyle, className);
    const elementRef = (0, import_react4.useMergeRefs)([refs?.setFloating, ref]);
    return open ? /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(
      import_react3.FloatingFocusManager,
      {
        order,
        modal,
        guards,
        disabled,
        returnFocus,
        initialFocus,
        closeOnFocusOut,
        visuallyHiddenDismiss,
        context,
        children: /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(
          Element,
          {
            ...rest,
            ref: elementRef,
            className: styles,
            "data-open": open,
            "data-placement": placement,
            ...getFloatingProps && getFloatingProps(),
            children
          }
        )
      }
    ) : null;
  }
);
DrawerPanel.displayName = "MaterialTailwind.DrawerPanel";
var DrawerDismissTrigger = React13.forwardRef(({ as, className, children, ...rest }, ref) => {
  const Element = as || "button";
  const contextTheme = useTheme();
  const theme2 = contextTheme?.drawerDismissTrigger ?? drawerDismissTriggerTheme;
  const { open, setOpen } = React13.useContext(DrawerContext);
  const styles = (0, import_tailwind_merge13.twMerge)(theme2.baseStyle, className);
  return /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(
    Element,
    {
      ...rest,
      ref,
      "data-open": open,
      className: styles,
      onClick: (event) => {
        rest.onClick?.(event);
        if (setOpen) {
          setOpen(false);
        }
      },
      children
    }
  );
});
DrawerDismissTrigger.displayName = "MaterialTailwind.DrawerDismissTrigger";
var Drawer = Object.assign(DrawerRoot, {
  Trigger: DrawerTrigger,
  Overlay: DrawerOverlay,
  Panel: DrawerPanel,
  DismissTrigger: DrawerDismissTrigger
});

// src/components/icon-button.tsx
var React14 = __toESM(require("react"), 1);
var import_tailwind_merge14 = require("tailwind-merge");
var import_material_ripple_effects3 = __toESM(require("material-ripple-effects"), 1);
var import_jsx_runtime16 = require("react/jsx-runtime");
var IconButton = React14.forwardRef(
  ({
    as,
    color,
    variant,
    size,
    ripple,
    isCircular,
    className,
    children,
    ...rest
  }, ref) => {
    const Element = as ?? "button";
    const contextTheme = useTheme();
    const theme2 = contextTheme?.iconButton ?? iconButtonTheme;
    const defaultProps = theme2?.defaultProps;
    size ??= defaultProps?.size ?? "md";
    ripple ??= defaultProps?.ripple ?? true;
    color ??= defaultProps?.color ?? "primary";
    variant ??= defaultProps?.variant ?? "solid";
    isCircular ??= defaultProps?.isCircular ?? false;
    const rippleEffect = ripple !== void 0 && new import_material_ripple_effects3.default();
    const handleClick = (e) => {
      const onClick = rest?.onClick;
      const isDarkRipple = variant === "ghost" || color === "secondary";
      if (ripple) {
        rippleEffect.create(e, isDarkRipple ? "dark" : "light");
      }
      return typeof onClick === "function" && onClick(e);
    };
    const styles = (0, import_tailwind_merge14.twMerge)(
      theme2.baseStyle,
      theme2["size"][size],
      theme2["variant"][variant][color],
      className
    );
    return /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(
      Element,
      {
        ...rest,
        ref,
        className: styles,
        onClick: handleClick,
        "data-shape": isCircular ? "circular" : "default",
        children
      }
    );
  }
);
IconButton.displayName = "MaterialTailwind.IconButton";

// src/components/input.tsx
var React15 = __toESM(require("react"), 1);
var import_tailwind_merge15 = require("tailwind-merge");
var import_jsx_runtime17 = require("react/jsx-runtime");
var InputContext = React15.createContext({
  size: "md",
  color: "primary",
  isError: false,
  isSuccess: false,
  iconPlacement: "start",
  isIconDefined: false,
  disabled: false,
  setIconPlacement: () => null,
  setIsIconDefined: () => null
});
var InputRoot = React15.forwardRef(
  ({
    as,
    color,
    size,
    isPill,
    isError,
    isSuccess,
    disabled,
    className,
    children,
    ...props
  }, ref) => {
    const Element = as ?? "div";
    const contextTheme = useTheme();
    const theme2 = contextTheme?.input ?? inputTheme;
    const defaultProps = theme2?.defaultProps;
    const [isIconDefined, setIsIconDefined] = React15.useState(false);
    const [iconPlacement, setIconPlacement] = React15.useState("start");
    size ??= defaultProps?.size ?? "md";
    color ??= defaultProps?.color ?? "primary";
    isPill ??= defaultProps?.isPill ?? false;
    isError ??= defaultProps?.isError ?? false;
    isSuccess ??= defaultProps?.isSuccess ?? false;
    const styles = (0, import_tailwind_merge15.twMerge)(
      theme2.baseStyle,
      theme2.size[size],
      isPill && theme2["isPill"],
      className
    );
    const contextValue = React15.useMemo(
      () => ({
        size,
        color,
        isError,
        isSuccess,
        iconPlacement,
        isIconDefined,
        disabled,
        setIconPlacement,
        setIsIconDefined
      }),
      [
        size,
        color,
        isError,
        isSuccess,
        iconPlacement,
        isIconDefined,
        disabled,
        setIconPlacement,
        setIsIconDefined
      ]
    );
    return /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(Element, { ...props, ref, className: styles, "aria-disabled": disabled, children: /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(InputContext.Provider, { value: contextValue, children }) });
  }
);
InputRoot.displayName = "MaterialTailwind.Input";
var InputField = React15.forwardRef(
  ({ type = "text", ...rest }, ref) => {
    const contextTheme = useTheme();
    const {
      size,
      color,
      iconPlacement,
      isIconDefined,
      isError,
      isSuccess,
      disabled
    } = React15.useContext(InputContext);
    const theme2 = contextTheme?.inputField ?? inputFieldTheme;
    const styles = (0, import_tailwind_merge15.twMerge)(
      theme2.baseStyle,
      theme2.size[size],
      theme2.color[color],
      rest?.className,
      "peer"
    );
    const inputType = [
      "text",
      "email",
      "password",
      "search",
      "number",
      "tel",
      "url",
      "hidden"
    ].includes(type) ? type : "text";
    return /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(
      "input",
      {
        ...rest,
        ref,
        type: inputType,
        className: styles,
        disabled,
        "data-error": isError,
        "data-success": isSuccess,
        "data-icon-placement": isIconDefined ? iconPlacement : ""
      }
    );
  }
);
InputField.displayName = "MaterialTailwind.InputField";
var InputIcon = React15.forwardRef(
  ({ as, placement, ...props }, ref) => {
    const Element = as ?? "span";
    const contextTheme = useTheme();
    const {
      size,
      iconPlacement,
      setIconPlacement,
      setIsIconDefined,
      isError,
      isSuccess,
      disabled
    } = React15.useContext(InputContext);
    const theme2 = contextTheme?.inputIcon ?? inputIconTheme;
    const defaultProps = theme2?.defaultProps;
    placement ??= defaultProps?.placement ?? "start";
    React15.useEffect(() => {
      setIsIconDefined(true);
      return () => {
        setIsIconDefined(false);
      };
    }, []);
    React15.useEffect(() => {
      setIconPlacement(placement);
      return () => {
        setIconPlacement("start");
      };
    }, [placement]);
    const styles = (0, import_tailwind_merge15.twMerge)(
      theme2.baseStyle,
      theme2.size[size],
      props?.className
    );
    return /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(
      Element,
      {
        ...props,
        ref,
        className: styles,
        "data-error": isError,
        "data-success": isSuccess,
        "aria-disabled": disabled,
        "data-placement": iconPlacement
      }
    );
  }
);
InputIcon.displayName = "MaterialTailwind.InputIcon";
var Input = Object.assign(InputRoot, {
  Field: InputField,
  Icon: InputIcon
});

// src/components/list.tsx
var React16 = __toESM(require("react"), 1);
var import_tailwind_merge16 = require("tailwind-merge");
var import_material_ripple_effects4 = __toESM(require("material-ripple-effects"), 1);
var import_jsx_runtime18 = require("react/jsx-runtime");
var ListRoot = React16.forwardRef(
  ({ as, className, children, ...rest }, ref) => {
    const Element = as ?? "ul";
    const contextTheme = useTheme();
    const theme2 = contextTheme?.list ?? listTheme;
    const styles = (0, import_tailwind_merge16.twMerge)(theme2.baseStyle, className);
    return /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(Element, { ...rest, ref, className: styles, children });
  }
);
ListRoot.displayName = "MaterialTailwind.List";
var ListItem = React16.forwardRef(
  ({ as, className, disabled, selected, ripple, children, ...rest }, ref) => {
    const Element = as ?? "li";
    const contextTheme = useTheme();
    const theme2 = contextTheme?.listItem ?? listItemTheme;
    const defaultProps = theme2?.defaultProps;
    ripple ??= defaultProps?.ripple ?? true;
    const rippleEffect = ripple !== void 0 && new import_material_ripple_effects4.default();
    const handleClick = (e) => {
      const onClick = rest?.onClick;
      if (ripple) {
        rippleEffect.create(e, "dark");
      }
      return typeof onClick === "function" && onClick(e);
    };
    const styles = (0, import_tailwind_merge16.twMerge)(theme2.baseStyle, className);
    return /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(
      Element,
      {
        ...rest,
        ref,
        className: styles,
        "data-selected": selected,
        "aria-disabled": disabled,
        onClick: handleClick,
        children
      }
    );
  }
);
ListItem.displayName = "MaterialTailwind.ListItem";
var ListItemStart = React16.forwardRef(
  ({ as, className, disabled, selected, ripple, children, ...rest }, ref) => {
    const Element = as ?? "span";
    const contextTheme = useTheme();
    const theme2 = contextTheme?.listItemStart ?? listItemStartTheme;
    const styles = (0, import_tailwind_merge16.twMerge)(theme2.baseStyle, className);
    return /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(Element, { ...rest, ref, className: styles, children });
  }
);
ListItemStart.displayName = "MaterialTailwind.ListItemStart";
var ListItemEnd = React16.forwardRef(
  ({ as, className, disabled, selected, ripple, children, ...rest }, ref) => {
    const Element = as ?? "span";
    const contextTheme = useTheme();
    const theme2 = contextTheme?.listItemEnd ?? listItemEndTheme;
    const styles = (0, import_tailwind_merge16.twMerge)(theme2.baseStyle, className);
    return /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(Element, { ...rest, ref, className: styles, children });
  }
);
ListItemEnd.displayName = "MaterialTailwind.ListItemEnd";
var List = Object.assign(ListRoot, {
  Item: ListItem,
  ItemStart: ListItemStart,
  ItemEnd: ListItemEnd
});

// src/components/menu.tsx
var React17 = __toESM(require("react"), 1);
var import_react5 = require("@floating-ui/react");
var import_react6 = require("@floating-ui/react");
var import_react7 = require("@floating-ui/react");
var import_tailwind_merge17 = require("tailwind-merge");
var import_material_ripple_effects5 = __toESM(require("material-ripple-effects"), 1);
var import_jsx_runtime19 = require("react/jsx-runtime");
var MenuContext = React17.createContext({
  open: false,
  setOpen: () => {
  }
});
function MenuCore({
  open: controlledOpen,
  onOpenChange: setControlledOpen,
  placement,
  offset,
  children
}) {
  const contextTheme = useTheme();
  const theme2 = contextTheme?.menu ?? menuTheme;
  const defaultProps = theme2?.defaultProps;
  const [uncontrolledOpen, setUncontrolledOpen] = React17.useState(false);
  const [activeIndex, setActiveIndex] = React17.useState(null);
  const elementsRef = React17.useRef([]);
  const labelsRef = React17.useRef([]);
  const tree = (0, import_react6.useFloatingTree)();
  const nodeId = (0, import_react6.useFloatingNodeId)();
  const parentId = (0, import_react6.useFloatingParentNodeId)();
  const item = (0, import_react6.useListItem)();
  const isNested = parentId != null;
  const open = controlledOpen ?? uncontrolledOpen;
  const setOpen = setControlledOpen ?? setUncontrolledOpen;
  placement ??= isNested ? "right-start" : defaultProps?.placement ?? "bottom";
  offset ??= isNested ? 8 : defaultProps?.offset ?? 5;
  const { floatingStyles, refs, context } = (0, import_react6.useFloating)({
    nodeId,
    placement,
    open,
    onOpenChange: setOpen,
    whileElementsMounted: import_react7.autoUpdate,
    middleware: [(0, import_react7.offset)(offset), (0, import_react7.flip)(), (0, import_react7.shift)({ padding: 5 })]
  });
  const hover = (0, import_react6.useHover)(context, {
    enabled: isNested,
    delay: { open: 75 },
    handleClose: (0, import_react7.safePolygon)({ blockPointerEvents: true })
  });
  const click = (0, import_react6.useClick)(context, {
    event: "mousedown",
    toggle: !isNested,
    ignoreMouse: isNested
  });
  const role = (0, import_react6.useRole)(context, { role: "menu" });
  const dismiss = (0, import_react6.useDismiss)(context, { bubbles: true });
  const listNavigation = (0, import_react6.useListNavigation)(context, {
    listRef: elementsRef,
    activeIndex,
    nested: isNested,
    onNavigate: setActiveIndex
  });
  const { getReferenceProps, getFloatingProps, getItemProps } = (0, import_react6.useInteractions)(
    [hover, click, role, dismiss, listNavigation]
  );
  const contextValue = React17.useMemo(
    () => ({
      open,
      setOpen,
      getReferenceProps,
      getFloatingProps,
      getItemProps,
      floatingStyles,
      refs,
      context,
      item,
      isNested,
      activeIndex,
      elementsRef,
      labelsRef
    }),
    [
      open,
      setOpen,
      getReferenceProps,
      getFloatingProps,
      getItemProps,
      floatingStyles,
      refs,
      context,
      item,
      isNested,
      activeIndex,
      elementsRef,
      labelsRef
    ]
  );
  React17.useEffect(() => {
    if (!tree)
      return;
    function handleTreeClick() {
      setOpen(false);
    }
    function onSubMenuOpen(event) {
      if (event.nodeId !== nodeId && event.parentId === parentId) {
        setOpen(false);
      }
    }
    tree.events.on("click", handleTreeClick);
    tree.events.on("menuopen", onSubMenuOpen);
    return () => {
      tree.events.off("click", handleTreeClick);
      tree.events.off("menuopen", onSubMenuOpen);
    };
  }, [tree, nodeId, parentId]);
  React17.useEffect(() => {
    if (open && tree) {
      tree.events.emit("menuopen", { parentId, nodeId });
    }
  }, [tree, open, nodeId, parentId]);
  return /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(import_react5.FloatingNode, { id: nodeId, children: /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(MenuContext.Provider, { value: contextValue, children }) });
}
function MenuRoot(props) {
  const parentId = (0, import_react6.useFloatingParentNodeId)();
  return parentId === null ? /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(import_react5.FloatingTree, { children: /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(MenuCore, { ...props }) }) : /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(MenuCore, { ...props });
}
MenuRoot.displayName = "MaterialTailwind.Menu";
var MenuTrigger = React17.forwardRef(
  ({ as, className, children, ...rest }, ref) => {
    const Element = as || "button";
    const contextTheme = useTheme();
    const theme2 = contextTheme?.menuTrigger ?? menuTriggerTheme;
    const {
      refs,
      item,
      activeIndex,
      isNested,
      getReferenceProps,
      getItemProps,
      open
    } = React17.useContext(MenuContext);
    const styles = (0, import_tailwind_merge17.twMerge)(theme2.baseStyle, className);
    const elementRef = (0, import_react6.useMergeRefs)([refs?.setReference, item?.ref, ref]);
    return /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
      Element,
      {
        ...rest,
        ref: elementRef,
        "data-open": open,
        "data-nested": isNested,
        tabIndex: !isNested ? void 0 : activeIndex === item?.index ? 0 : -1,
        role: isNested ? "menuitem" : void 0,
        className: styles,
        ...getReferenceProps && getItemProps && getReferenceProps(getItemProps()),
        children
      }
    );
  }
);
MenuTrigger.displayName = "MaterialTailwind.MenuTrigger";
var MenuContent = React17.forwardRef(
  ({
    as,
    className,
    children,
    disabled,
    initialFocus,
    returnFocus,
    guards,
    modal,
    visuallyHiddenDismiss,
    closeOnFocusOut,
    order,
    ...rest
  }, ref) => {
    const Element = as || "div";
    const contextTheme = useTheme();
    const theme2 = contextTheme?.menuContent ?? menuContentTheme;
    const defaultProps = theme2.defaultProps;
    const {
      elementsRef,
      labelsRef,
      context,
      refs,
      getFloatingProps,
      open,
      floatingStyles,
      isNested
    } = React17.useContext(MenuContext);
    disabled ??= defaultProps?.disabled ?? false;
    initialFocus ??= defaultProps?.initialFocus ?? 0;
    returnFocus ??= defaultProps?.returnFocus ?? true;
    guards ??= defaultProps?.guards ?? true;
    modal ??= defaultProps?.modal ?? false;
    visuallyHiddenDismiss ??= defaultProps?.visuallyHiddenDismiss ?? true;
    closeOnFocusOut ??= defaultProps?.closeOnFocusOut ?? true;
    order ??= defaultProps?.order ?? ["content"];
    const styles = (0, import_tailwind_merge17.twMerge)(theme2.baseStyle, className);
    const elementRef = (0, import_react6.useMergeRefs)([refs?.setFloating, ref]);
    return /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
      import_react5.FloatingList,
      {
        elementsRef,
        labelsRef,
        children: open && /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(import_react5.FloatingPortal, { children: /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
          import_react5.FloatingFocusManager,
          {
            order,
            modal,
            guards,
            disabled,
            initialFocus: isNested ? -1 : initialFocus,
            returnFocus: isNested ? false : returnFocus,
            closeOnFocusOut,
            visuallyHiddenDismiss,
            context,
            children: /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
              Element,
              {
                ...rest,
                ref: elementRef,
                "data-open": open,
                style: { ...floatingStyles, ...rest?.style },
                className: styles,
                ...getFloatingProps && getFloatingProps(),
                children
              }
            )
          }
        ) })
      }
    );
  }
);
MenuContent.displayName = "MaterialTailwind.MenuContent";
var MenuItem = React17.forwardRef(
  ({ as, className, ripple, disabled, closeOnClick, children, ...rest }, ref) => {
    const Element = as || "button";
    const contextTheme = useTheme();
    const theme2 = contextTheme?.menuItem ?? menuItemTheme;
    const defaultProps = theme2.defaultProps;
    const { activeIndex, getItemProps } = React17.useContext(MenuContext);
    ripple ??= defaultProps?.ripple ?? true;
    closeOnClick ??= defaultProps?.closeOnClick ?? true;
    const rippleEffect = ripple !== void 0 && new import_material_ripple_effects5.default();
    const item = (0, import_react6.useListItem)({
      label: disabled ? null : children
    });
    const tree = (0, import_react6.useFloatingTree)();
    const isActive = item.index === activeIndex;
    const elementRef = (0, import_react6.useMergeRefs)([item.ref, ref]);
    const styles = (0, import_tailwind_merge17.twMerge)(theme2.baseStyle, className);
    return /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
      Element,
      {
        ...rest,
        ref: elementRef,
        role: "menuitem",
        "aria-disabled": disabled,
        tabIndex: isActive ? 0 : -1,
        className: styles,
        ...getItemProps && getItemProps({
          onClick(event) {
            rest.onClick?.(event);
            if (closeOnClick) {
              tree?.events.emit("click");
            }
            if (ripple) {
              rippleEffect.create(event, "dark");
            }
          }
        }),
        children
      }
    );
  }
);
var Menu = Object.assign(MenuRoot, {
  Trigger: MenuTrigger,
  Content: MenuContent,
  Item: MenuItem
});

// src/components/popover.tsx
var React18 = __toESM(require("react"), 1);
var import_react8 = require("@floating-ui/react");
var import_react9 = require("@floating-ui/react");
var import_react10 = require("@floating-ui/react");
var import_tailwind_merge18 = require("tailwind-merge");
var import_jsx_runtime20 = require("react/jsx-runtime");
var PopoverContext = React18.createContext({
  open: false,
  setOpen: () => {
  }
});
function PopoverRoot({
  open: controlledOpen,
  onOpenChange: setControlledOpen,
  placement,
  offset,
  children
}) {
  const arrowRef = React18.useRef(null);
  const contextTheme = useTheme();
  const theme2 = contextTheme?.popover ?? popoverTheme;
  const defaultProps = theme2?.defaultProps;
  const [uncontrolledOpen, setUncontrolledOpen] = React18.useState(false);
  const open = controlledOpen ?? uncontrolledOpen;
  const setOpen = setControlledOpen ?? setUncontrolledOpen;
  placement ??= defaultProps?.placement ?? "bottom";
  offset ??= defaultProps?.offset ?? 10;
  const data = (0, import_react9.useFloating)({
    placement,
    open,
    onOpenChange: setOpen,
    whileElementsMounted: import_react10.autoUpdate,
    middleware: [
      (0, import_react10.offset)(offset),
      (0, import_react10.flip)({
        crossAxis: placement.includes("-"),
        fallbackAxisSideDirection: "end",
        padding: 5
      }),
      (0, import_react10.shift)({ padding: 5 }),
      (0, import_react10.arrow)({
        element: arrowRef,
        padding: 5
      })
    ]
  });
  const { context } = data;
  const click = (0, import_react9.useClick)(context, {
    enabled: controlledOpen == null
  });
  const dismiss = (0, import_react9.useDismiss)(context);
  const role = (0, import_react9.useRole)(context);
  const interactions = (0, import_react9.useInteractions)([click, dismiss, role]);
  const contextValue = React18.useMemo(
    () => ({
      open,
      setOpen,
      arrowRef,
      ...interactions,
      ...data
    }),
    [open, setOpen, arrowRef, interactions, data]
  );
  return /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(PopoverContext.Provider, { value: contextValue, children });
}
PopoverRoot.displayName = "MaterialTailwind.Popover";
var PopoverTrigger = React18.forwardRef(({ as, className, children, ...rest }, ref) => {
  const Element = as || "button";
  const contextTheme = useTheme();
  const theme2 = contextTheme?.popoverTrigger ?? popoverTriggerTheme;
  const { refs, getReferenceProps, open } = React18.useContext(PopoverContext);
  const styles = (0, import_tailwind_merge18.twMerge)(theme2.baseStyle, className);
  const elementRef = (0, import_react9.useMergeRefs)([refs?.setReference, ref]);
  return /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(
    Element,
    {
      ...rest,
      ref: elementRef,
      "data-open": open,
      className: styles,
      ...getReferenceProps && getReferenceProps(),
      children
    }
  );
});
PopoverTrigger.displayName = "MaterialTailwind.PopoverTrigger";
var PopoverContent = React18.forwardRef(
  ({
    as,
    className,
    children,
    disabled,
    initialFocus,
    returnFocus,
    guards,
    modal,
    visuallyHiddenDismiss,
    closeOnFocusOut,
    order,
    ...rest
  }, ref) => {
    const Element = as || "div";
    const contextTheme = useTheme();
    const theme2 = contextTheme?.popoverContent ?? popoverContentTheme;
    const defaultProps = theme2.defaultProps;
    const { context, refs, getFloatingProps, open, floatingStyles } = React18.useContext(PopoverContext);
    disabled ??= defaultProps?.disabled ?? false;
    initialFocus ??= defaultProps?.initialFocus ?? 0;
    returnFocus ??= defaultProps?.returnFocus ?? true;
    guards ??= defaultProps?.guards ?? true;
    modal ??= defaultProps?.modal ?? false;
    visuallyHiddenDismiss ??= defaultProps?.visuallyHiddenDismiss ?? true;
    closeOnFocusOut ??= defaultProps?.closeOnFocusOut ?? true;
    order ??= defaultProps?.order ?? [
      "content"
    ];
    const styles = (0, import_tailwind_merge18.twMerge)(theme2.baseStyle, className);
    const elementRef = (0, import_react9.useMergeRefs)([refs?.setFloating, ref]);
    return open ? /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(import_react8.FloatingPortal, { children: /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(
      import_react8.FloatingFocusManager,
      {
        order,
        modal,
        guards,
        disabled,
        returnFocus,
        initialFocus,
        closeOnFocusOut,
        visuallyHiddenDismiss,
        context,
        children: /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(
          Element,
          {
            ...rest,
            ref: elementRef,
            "data-open": open,
            style: { ...floatingStyles, ...rest?.style },
            className: styles,
            ...getFloatingProps && getFloatingProps(),
            children
          }
        )
      }
    ) }) : null;
  }
);
PopoverContent.displayName = "MaterialTailwind.PopoverContent";
var PopoverArrow = React18.forwardRef(
  ({ as, className, ...rest }, ref) => {
    const Element = as || "span";
    const contextTheme = useTheme();
    const theme2 = contextTheme?.popoverArrow ?? popoverArrowTheme;
    const innerRef = React18.useRef(null);
    const { placement, arrowRef, middlewareData } = React18.useContext(PopoverContext);
    const elementRef = (0, import_react9.useMergeRefs)([arrowRef, innerRef, ref]);
    const staticSide = {
      top: "bottom",
      right: "left",
      bottom: "top",
      left: "right"
    }[placement ? placement.split("-")[0] : ""];
    const styles = (0, import_tailwind_merge18.twMerge)(theme2.baseStyle, className);
    return /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(
      Element,
      {
        ...rest,
        ref: elementRef,
        style: {
          position: "absolute",
          left: middlewareData?.arrow?.x,
          top: middlewareData?.arrow?.y,
          [staticSide]: `${-innerRef?.current?.clientHeight / 2 - 1}px`,
          ...rest?.style
        },
        "data-placement": placement,
        className: styles
      }
    );
  }
);
var Popover = Object.assign(PopoverRoot, {
  Trigger: PopoverTrigger,
  Content: PopoverContent,
  Arrow: PopoverArrow
});

// src/components/progress.tsx
var React19 = __toESM(require("react"), 1);
var import_tailwind_merge19 = require("tailwind-merge");
var import_jsx_runtime21 = require("react/jsx-runtime");
var ProgressContext = React19.createContext({
  value: 0,
  color: "primary"
});
var ProgressRoot = React19.forwardRef(
  ({ as, size, color, value, className, children, ...rest }, ref) => {
    const Element = as ?? "div";
    const contextTheme = useTheme();
    const theme2 = contextTheme.progress ?? progressTheme;
    const defaultProps = theme2?.defaultProps;
    size ??= defaultProps?.size ?? "md";
    color ??= defaultProps?.color ?? "primary";
    const styles = (0, import_tailwind_merge19.twMerge)(theme2.baseStyle, theme2.size[size], className);
    const contextValue = React19.useMemo(
      () => ({ value, color }),
      [value, color]
    );
    return /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(ProgressContext.Provider, { value: contextValue, children: /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(Element, { ...rest, ref, className: styles, children }) });
  }
);
ProgressRoot.displayName = "MaterialTailwind.Progress";
var ProgressBar = React19.forwardRef(
  ({ as, className, children, ...rest }, ref) => {
    const Element = as ?? "div";
    const contextTheme = useTheme();
    const { color, value } = React19.useContext(ProgressContext);
    const theme2 = contextTheme.progressBar ?? progressBarTheme;
    const styles = (0, import_tailwind_merge19.twMerge)(
      theme2.baseStyle,
      theme2.color[color],
      className
    );
    return /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(
      Element,
      {
        ...rest,
        ref,
        className: styles,
        style: {
          width: `${value}%`,
          ...rest?.style
        },
        children
      }
    );
  }
);
ProgressBar.displayName = "MaterialTailwind.ProgressBar";
var Progress = Object.assign(ProgressRoot, {
  Bar: ProgressBar
});

// src/components/radio.tsx
var React20 = __toESM(require("react"), 1);
var import_tailwind_merge20 = require("tailwind-merge");
var import_jsx_runtime22 = require("react/jsx-runtime");
var RadioContext = React20.createContext({
  globalValue: "",
  color: "primary",
  setGlobalValue: () => {
  }
});
var RadioRoot = React20.forwardRef(
  ({
    as,
    value,
    defaultValue,
    onChange,
    color,
    orientation,
    className,
    children,
    ...props
  }, ref) => {
    const Element = as || "div";
    const contextTheme = useTheme();
    const theme2 = contextTheme?.radio ?? radioTheme;
    const defaultProps = theme2?.defaultProps;
    const [innerValue, setInnerValue] = React20.useState(defaultValue || "");
    value ??= innerValue;
    onChange ??= setInnerValue;
    color ??= defaultProps?.color ?? "primary";
    orientation ??= defaultProps?.orientation ?? "vertical";
    const styles = (0, import_tailwind_merge20.twMerge)(theme2.baseStyle, className);
    const contextValue = React20.useMemo(
      () => ({
        color,
        globalValue: value,
        setGlobalValue: onChange
      }),
      [color, value, onChange]
    );
    return /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(
      Element,
      {
        ...props,
        ref,
        className: styles,
        "data-value": value,
        "data-orientation": orientation,
        children: /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(RadioContext.Provider, { value: contextValue, children })
      }
    );
  }
);
RadioRoot.displayName = "MaterialTailwind.Radio";
var RadioItem = React20.forwardRef(
  ({ disabled, className, children, value, ...props }, ref) => {
    const contextTheme = useTheme();
    const theme2 = contextTheme?.radioItem ?? radioItemTheme;
    const { globalValue, setGlobalValue, color } = React20.useContext(RadioContext);
    const innerId = React20.useId();
    const innerValue = React20.useId();
    const mainValue = value || innerValue;
    const isChecked = globalValue === mainValue;
    const styles = (0, import_tailwind_merge20.twMerge)(theme2.baseStyle, theme2.color[color], className);
    return /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)(
      "label",
      {
        ref,
        className: styles,
        "data-value": mainValue,
        "data-checked": isChecked,
        "aria-disabled": disabled,
        htmlFor: props?.id || innerId,
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(
            "input",
            {
              ...props,
              id: props?.id || innerId,
              type: "radio",
              checked: isChecked,
              value: mainValue,
              onChange: (e) => {
                props?.onChange?.(e);
                setGlobalValue?.(mainValue);
              },
              style: { display: "none" }
            }
          ),
          children
        ]
      }
    );
  }
);
var RadioIndicator = React20.forwardRef(({ as, className, children, ...props }, ref) => {
  const Element = as || "span";
  const contextTheme = useTheme();
  const theme2 = contextTheme?.radioIndicator ?? radioIndicatorTheme;
  const styles = (0, import_tailwind_merge20.twMerge)(theme2.baseStyle, className);
  return /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(Element, { ...props, className: styles, ref, children: children || /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(
    "svg",
    {
      width: "9px",
      height: "9px",
      viewBox: "0 0 22 22",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      children: /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(
        "path",
        {
          fillRule: "evenodd",
          clipRule: "evenodd",
          d: "M11 0.25C5.06294 0.25 0.25 5.06294 0.25 11C0.25 16.9371 5.06294 21.75 11 21.75C16.9371 21.75 21.75 16.9371 21.75 11C21.75 5.06294 16.9371 0.25 11 0.25Z",
          fill: "currentColor"
        }
      )
    }
  ) });
});
RadioIndicator.displayName = "MaterialTailwind.RadioIndicator";
var Radio = Object.assign(RadioRoot, {
  Item: RadioItem,
  Indicator: RadioIndicator
});

// src/components/rating.tsx
var React21 = __toESM(require("react"), 1);
var import_tailwind_merge21 = require("tailwind-merge");
var import_jsx_runtime23 = require("react/jsx-runtime");
var Rating = React21.forwardRef(
  ({
    as,
    color,
    ratedIcon,
    unratedIcon,
    count,
    value,
    onChange,
    className,
    readonly,
    ...rest
  }, ref) => {
    const Element = as ?? "div";
    const contextTheme = useTheme();
    const theme2 = contextTheme?.rating ?? ratingTheme;
    const defaultProps = theme2?.defaultProps;
    ratedIcon ??= defaultProps?.ratedIcon ?? /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(
      "svg",
      {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        fill: "currentColor",
        className: "h-6 w-6",
        children: /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(
          "path",
          {
            fillRule: "evenodd",
            d: "M10.788 3.21c.448-1.077 1.976-1.077 2.424 0l2.082 5.007 5.404.433c1.164.093 1.636 1.545.749 2.305l-4.117 3.527 1.257 5.273c.271 1.136-.964 2.033-1.96 1.425L12 18.354 7.373 21.18c-.996.608-2.231-.29-1.96-1.425l1.257-5.273-4.117-3.527c-.887-.76-.415-2.212.749-2.305l5.404-.433 2.082-5.006z",
            clipRule: "evenodd"
          }
        )
      }
    );
    unratedIcon ??= defaultProps?.unratedIcon ?? /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(
      "svg",
      {
        xmlns: "http://www.w3.org/2000/svg",
        fill: "none",
        viewBox: "0 0 24 24",
        strokeWidth: 1.5,
        stroke: "currentColor",
        className: "h-6 w-6",
        children: /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(
          "path",
          {
            strokeLinecap: "round",
            strokeLinejoin: "round",
            d: "M11.48 3.499a.562.562 0 011.04 0l2.125 5.111a.563.563 0 00.475.345l5.518.442c.499.04.701.663.321.988l-4.204 3.602a.563.563 0 00-.182.557l1.285 5.385a.562.562 0 01-.84.61l-4.725-2.885a.563.563 0 00-.586 0L6.982 20.54a.562.562 0 01-.84-.61l1.285-5.386a.562.562 0 00-.182-.557l-4.204-3.602a.563.563 0 01.321-.988l5.518-.442a.563.563 0 00.475-.345L11.48 3.5z"
          }
        )
      }
    );
    color ??= defaultProps?.color ?? "primary";
    count ??= defaultProps?.count ?? 5;
    value ??= 0;
    readonly ??= defaultProps?.readonly ?? false;
    const [ratingValue, setRatingValue] = React21.useState(() => [
      ...Array(value).fill("rated"),
      ...Array(count - value).fill("un_rated")
    ]);
    const [ratingOnHover, setRatingOnHover] = React21.useState(() => [
      ...Array(count).fill("un_rated")
    ]);
    const [isHover, setIsHover] = React21.useState(false);
    const baseStyles = (0, import_tailwind_merge21.twMerge)(theme2.baseStyle, theme2.color[color], className);
    const iconStyle = (0, import_tailwind_merge21.twMerge)(theme2.icon);
    const renderRating = (data) => data.map((el, idx) => {
      const isRated = el === "rated";
      const elementToRender = isRated ? ratedIcon : unratedIcon;
      return React21.isValidElement(elementToRender) ? React21.cloneElement(elementToRender, {
        ...elementToRender?.props,
        key: idx,
        onClick: (event) => {
          if (readonly)
            return;
          const nextRating = ratingValue.map(
            (_, i) => i <= idx ? "rated" : "un_rated"
          );
          setRatingValue(nextRating);
          onChange && typeof onChange === "function" && onChange(nextRating.filter((el2) => el2 === "rated").length);
          elementToRender?.props?.onClick && elementToRender?.props?.onClick(event);
        },
        onMouseEnter: (event) => {
          if (readonly)
            return;
          const nextRating = ratingOnHover.map(
            (_, i) => i <= idx ? "rated" : "un_rated"
          );
          setIsHover(true);
          setRatingOnHover(nextRating);
          elementToRender?.props?.onMouseEnter && elementToRender?.props?.onMouseEnter(event);
        },
        onMouseLeave: (event) => {
          if (!readonly) {
            setIsHover(false);
          }
          elementToRender?.props?.onMouseLeave && elementToRender?.props?.onMouseLeave(event);
        },
        "data-slot": "icon",
        className: (0, import_tailwind_merge21.twMerge)(
          iconStyle,
          elementToRender?.props?.className
        )
      }) : React21.createElement(elementToRender, {
        key: idx,
        onClick: () => {
          if (readonly)
            return;
          const nextRating = ratingValue.map(
            (_, i) => i <= idx ? "rated" : "un_rated"
          );
          setRatingValue(nextRating);
          onChange && typeof onChange === "function" && onChange(nextRating.filter((el2) => el2 === "rated").length);
        },
        onMouseEnter: () => {
          if (readonly)
            return;
          const nextRating = ratingOnHover.map(
            (_, i) => i <= idx ? "rated" : "un_rated"
          );
          setIsHover(true);
          setRatingOnHover(nextRating);
        },
        onMouseLeave: () => {
          if (!readonly) {
            setIsHover(false);
          }
        },
        className: iconStyle
      });
    });
    return /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(Element, { ...rest, ref, className: baseStyles, children: isHover ? renderRating(ratingOnHover) : renderRating(ratingValue) });
  }
);
Rating.displayName = "MaterialTailwind.Rating";

// src/components/select.tsx
var React22 = __toESM(require("react"), 1);
var import_react11 = require("@floating-ui/react");
var import_react12 = require("@floating-ui/react");
var import_react13 = require("@floating-ui/react");
var import_tailwind_merge22 = require("tailwind-merge");
var import_material_ripple_effects6 = __toESM(require("material-ripple-effects"), 1);
var import_jsx_runtime24 = require("react/jsx-runtime");
var SelectContext = React22.createContext({
  size: "md",
  color: "primary",
  isError: false,
  isSuccess: false,
  disabled: false,
  placement: "bottom",
  offset: 5
});
function SelectRoot({
  size,
  color,
  isPill,
  isError,
  isSuccess,
  disabled,
  placement,
  offset,
  value,
  name,
  onChange,
  children
}) {
  const contextTheme = useTheme();
  const theme2 = contextTheme?.select ?? selectTheme;
  const defaultProps = theme2?.defaultProps;
  const [isOpen, setIsOpen] = React22.useState(false);
  const [selected, setSelected] = React22.useState(() => ({
    value,
    element: null
  }));
  const [activeIndex, setActiveIndex] = React22.useState(null);
  const [selectedIndex, setSelectedIndex] = React22.useState(null);
  size ??= defaultProps?.size ?? "md";
  color ??= defaultProps?.color ?? "primary";
  isPill ??= defaultProps?.isPill ?? false;
  isError ??= defaultProps?.isError ?? false;
  isSuccess ??= defaultProps?.isSuccess ?? false;
  placement ??= defaultProps?.placement ?? "bottom";
  offset ??= defaultProps?.offset ?? 5;
  const { refs, floatingStyles, context } = (0, import_react12.useFloating)({
    placement,
    open: isOpen,
    onOpenChange: setIsOpen,
    whileElementsMounted: import_react13.autoUpdate,
    middleware: [
      (0, import_react13.flip)(),
      (0, import_react13.offset)(offset),
      (0, import_react13.size)({
        apply({ rects, elements, availableHeight }) {
          Object.assign(elements.floating.style, {
            maxHeight: `${availableHeight}px`,
            minWidth: `${rects.reference.width}px`,
            zIndex: 9999
          });
        },
        padding: 10
      })
    ]
  });
  const labelsRef = React22.useRef([]);
  const elementsRef = React22.useRef([]);
  const handleSelect = React22.useCallback((index) => {
    setSelectedIndex(index);
    setIsOpen(false);
    if (index !== null) {
      setSelected(labelsRef.current[index]);
      onChange?.(labelsRef.current[index]?.value);
    }
  }, []);
  function handleTypeaheadMatch(index) {
    if (isOpen) {
      setActiveIndex(index);
    } else {
      handleSelect(index);
    }
  }
  const listNav = (0, import_react12.useListNavigation)(context, {
    listRef: elementsRef,
    activeIndex,
    selectedIndex,
    onNavigate: setActiveIndex
  });
  const labelsRefTypehead = React22.useRef(
    labelsRef.current.map((item) => item?.value)
  );
  const typeahead = (0, import_react12.useTypeahead)(context, {
    listRef: labelsRefTypehead,
    activeIndex,
    selectedIndex,
    onMatch: handleTypeaheadMatch
  });
  const click = (0, import_react12.useClick)(context);
  const dismiss = (0, import_react12.useDismiss)(context);
  const role = (0, import_react12.useRole)(context, { role: "listbox" });
  const { getReferenceProps, getFloatingProps, getItemProps } = (0, import_react12.useInteractions)(
    [listNav, typeahead, click, dismiss, role]
  );
  const contextValue = React22.useMemo(
    () => ({
      color,
      size,
      isPill,
      isError,
      isSuccess,
      disabled,
      selected,
      activeIndex,
      selectedIndex,
      context,
      refs,
      floatingStyles,
      elementsRef,
      labelsRef,
      setSelected,
      getItemProps,
      handleSelect,
      getReferenceProps,
      getFloatingProps,
      isOpen,
      controlledValue: value
    }),
    [
      color,
      size,
      isPill,
      isError,
      isSuccess,
      disabled,
      selected,
      activeIndex,
      selectedIndex,
      context,
      refs,
      floatingStyles,
      elementsRef,
      labelsRef,
      getItemProps,
      handleSelect,
      getReferenceProps,
      getFloatingProps,
      isOpen,
      value
    ]
  );
  return /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)(SelectContext.Provider, { value: contextValue, children: [
    children,
    /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(
      "input",
      {
        readOnly: true,
        name,
        style: { display: "none" },
        value: value || selected?.value || ""
      }
    )
  ] });
}
SelectRoot.displayName = "MaterialTailwind.Select";
var SelectTrigger = React22.forwardRef(
  ({ as, indicator, placeholder, className, children, ...rest }, ref) => {
    const Element = as || "button";
    const contextTheme = useTheme();
    const theme2 = contextTheme?.selectTrigger ?? selectTriggerTheme;
    const defaultProps = theme2?.defaultProps;
    const {
      refs,
      getReferenceProps,
      selected,
      isPill,
      color,
      size,
      isOpen,
      isError,
      isSuccess,
      disabled
    } = React22.useContext(SelectContext);
    const value = selected?.value;
    const element = selected?.element;
    const elementRef = (0, import_react12.useMergeRefs)([refs?.setReference, ref]);
    indicator ??= defaultProps?.indicator ?? /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)(
      "svg",
      {
        viewBox: "0 0 24 24",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg",
        color: "currentColor",
        className: "h-[1em] w-[1em] translate-x-0.5 stroke-[1.5]",
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(
            "path",
            {
              d: "M17 8L12 3L7 8",
              stroke: "currentColor",
              strokeLinecap: "round",
              strokeLinejoin: "round"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(
            "path",
            {
              d: "M17 16L12 21L7 16",
              stroke: "currentColor",
              strokeLinecap: "round",
              strokeLinejoin: "round"
            }
          )
        ]
      }
    );
    const styles = (0, import_tailwind_merge22.twMerge)(
      theme2.baseStyle,
      theme2.size[size],
      theme2.color[color],
      isPill && theme2.isPill,
      className
    );
    return /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)(
      Element,
      {
        ...rest,
        ref: elementRef,
        tabIndex: 0,
        type: "button",
        className: styles,
        "data-open": isOpen,
        disabled,
        "data-error": isError,
        "data-success": isSuccess,
        ...getReferenceProps && getReferenceProps(),
        children: [
          children ? children({ value, element }) : element ?? /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("span", { "data-slot": "placeholder", className: theme2.placeholder, children: placeholder }),
          indicator
        ]
      }
    );
  }
);
SelectTrigger.displayName = "MaterialTailwind.SelectTrigger";
var SelectList = React22.forwardRef(
  ({
    as,
    className,
    children,
    disabled,
    initialFocus,
    returnFocus,
    guards,
    modal,
    visuallyHiddenDismiss,
    closeOnFocusOut,
    order,
    ...rest
  }, ref) => {
    const Element = as || "div";
    const contextTheme = useTheme();
    const theme2 = contextTheme?.selectList ?? selectListTheme;
    const defaultProps = theme2?.defaultProps;
    const {
      context,
      refs,
      getFloatingProps,
      floatingStyles,
      elementsRef,
      labelsRef,
      isOpen,
      selected,
      setSelected,
      controlledValue
    } = React22.useContext(SelectContext);
    disabled ??= defaultProps?.disabled ?? false;
    initialFocus ??= defaultProps?.initialFocus ?? 0;
    returnFocus ??= defaultProps?.returnFocus ?? true;
    guards ??= defaultProps?.guards ?? true;
    modal ??= defaultProps?.modal ?? true;
    visuallyHiddenDismiss ??= defaultProps?.visuallyHiddenDismiss ?? true;
    closeOnFocusOut ??= defaultProps?.closeOnFocusOut ?? true;
    order ??= defaultProps?.order ?? ["content"];
    const styles = (0, import_tailwind_merge22.twMerge)(theme2.baseStyle, className);
    const elementRef = (0, import_react12.useMergeRefs)([refs?.setFloating, ref]);
    React22.useEffect(() => {
      if (controlledValue) {
        const label = children?.find(
          (el) => selected?.value === el.props.value
        );
        if (label) {
          setSelected?.({
            value: label?.props?.value || "",
            element: label?.props?.children || ""
          });
        }
      }
    }, []);
    return isOpen ? /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(
      import_react11.FloatingFocusManager,
      {
        order,
        modal,
        guards,
        disabled,
        returnFocus,
        initialFocus,
        closeOnFocusOut,
        visuallyHiddenDismiss,
        context,
        children: /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(
          Element,
          {
            ...rest,
            ref: elementRef,
            "data-open": isOpen,
            style: { ...floatingStyles, ...rest?.style },
            className: styles,
            ...getFloatingProps && getFloatingProps(),
            children: /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(
              import_react11.FloatingList,
              {
                elementsRef,
                labelsRef,
                children
              }
            )
          }
        )
      }
    ) : null;
  }
);
SelectList.displayName = "MaterialTailwind.SelectList";
var SelectOption = React22.forwardRef(
  ({ as, className, value, ripple, indicator, children, ...rest }, ref) => {
    const Element = as || "button";
    const contextTheme = useTheme();
    const theme2 = contextTheme?.selectOption ?? selectOptionTheme;
    const defaultProps = theme2?.defaultProps;
    const { getItemProps, handleSelect, activeIndex, selectedIndex, selected } = React22.useContext(SelectContext);
    ripple ??= defaultProps?.ripple ?? true;
    indicator ??= defaultProps?.indicator ?? /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(
      "svg",
      {
        xmlns: "http://www.w3.org/2000/svg",
        fill: "none",
        viewBox: "0 0 24 24",
        strokeWidth: 1.5,
        stroke: "currentColor",
        className: "h-4 w-4",
        children: /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(
          "path",
          {
            strokeLinecap: "round",
            strokeLinejoin: "round",
            d: "M4.5 12.75l6 6 9-13.5"
          }
        )
      }
    );
    const { ref: itemRef, index } = (0, import_react12.useListItem)({
      label: { value, element: children }
    });
    const rippleEffect = ripple !== void 0 && new import_material_ripple_effects6.default();
    const handleClick = (e) => {
      const onClick = rest?.onClick;
      if (ripple) {
        rippleEffect.create(e, "dark");
      }
      handleSelect && handleSelect(index);
      onClick?.(e);
    };
    const curValue = selected?.value || "";
    const isActive = activeIndex === index;
    const isSelected = selectedIndex === index || curValue === value;
    const styles = (0, import_tailwind_merge22.twMerge)(theme2.baseStyle, className);
    const elementRef = (0, import_react12.useMergeRefs)([itemRef, ref]);
    return /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)(
      Element,
      {
        ...rest,
        ref: elementRef,
        role: "option",
        "data-selected": isActive && isSelected,
        "aria-selected": isActive && isSelected,
        tabIndex: isActive ? 0 : -1,
        className: styles,
        ...getItemProps && getItemProps({
          onClick: handleClick
        }),
        children: [
          children,
          isSelected && indicator
        ]
      }
    );
  }
);
SelectOption.displayName = "MaterialTailwind.SelectOption";
var Select = Object.assign(SelectRoot, {
  Trigger: SelectTrigger,
  List: SelectList,
  Option: SelectOption
});

// src/components/spinner.tsx
var React23 = __toESM(require("react"), 1);
var import_tailwind_merge23 = require("tailwind-merge");
var import_jsx_runtime25 = require("react/jsx-runtime");
var Spinner = React23.forwardRef(
  ({ size, color, className, ...rest }, ref) => {
    const contextTheme = useTheme();
    const theme2 = contextTheme.spinner ?? spinnerTheme;
    const defaultProps = theme2?.defaultProps;
    size ??= defaultProps?.size ?? "md";
    color ??= defaultProps?.color ?? "primary";
    const styles = (0, import_tailwind_merge23.twMerge)(theme2.baseStyle, theme2.size[size], className);
    const spinnerColor = (0, import_tailwind_merge23.twMerge)(theme2.color[color]);
    return /* @__PURE__ */ (0, import_jsx_runtime25.jsxs)(
      "svg",
      {
        ...rest,
        ref,
        fill: "none",
        className: styles,
        viewBox: "0 0 64 64",
        xmlns: "http://www.w3.org/2000/svg",
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(
            "path",
            {
              stroke: "currentColor",
              strokeWidth: "5",
              strokeLinecap: "round",
              strokeLinejoin: "round",
              d: "M32 3C35.8083 3 39.5794 3.75011 43.0978 5.20749C46.6163 6.66488 49.8132 8.80101 52.5061 11.4939C55.199 14.1868 57.3351 17.3837 58.7925 20.9022C60.2499 24.4206 61 28.1917 61 32C61 35.8083 60.2499 39.5794 58.7925 43.0978C57.3351 46.6163 55.199 49.8132 52.5061 52.5061C49.8132 55.199 46.6163 57.3351 43.0978 58.7925C39.5794 60.2499 35.8083 61 32 61C28.1917 61 24.4206 60.2499 20.9022 58.7925C17.3837 57.3351 14.1868 55.199 11.4939 52.5061C8.801 49.8132 6.66487 46.6163 5.20749 43.0978C3.7501 39.5794 3 35.8083 3 32C3 28.1917 3.75011 24.4206 5.2075 20.9022C6.66489 17.3837 8.80101 14.1868 11.4939 11.4939C14.1868 8.80099 17.3838 6.66487 20.9022 5.20749C24.4206 3.7501 28.1917 3 32 3L32 3Z"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(
            "path",
            {
              strokeWidth: "5",
              strokeLinecap: "round",
              strokeLinejoin: "round",
              className: spinnerColor,
              d: "M32 3C36.5778 3 41.0906 4.08374 45.1692 6.16256C49.2477 8.24138 52.7762 11.2562 55.466 14.9605C58.1558 18.6647 59.9304 22.9531 60.6448 27.4748C61.3591 31.9965 60.9928 36.6232 59.5759 40.9762",
              stroke: "currentColor"
            }
          )
        ]
      }
    );
  }
);
Spinner.displayName = "MaterialTailwind.Spinner";

// src/components/switch.tsx
var React24 = __toESM(require("react"), 1);
var import_tailwind_merge24 = require("tailwind-merge");
var import_jsx_runtime26 = require("react/jsx-runtime");
var Switch = React24.forwardRef(
  ({ color, className, ...rest }, ref) => {
    const innerID = React24.useId();
    const contextTheme = useTheme();
    const theme2 = contextTheme?.switch ?? switchTheme;
    const defaultProps = theme2?.defaultProps;
    color ??= defaultProps?.color ?? "primary";
    const styles = (0, import_tailwind_merge24.twMerge)(
      theme2.baseStyle,
      theme2.trackStyle,
      theme2.circleStyle,
      theme2.color[color],
      className
    );
    return /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(
      "input",
      {
        ...rest,
        ref,
        type: "checkbox",
        className: styles,
        id: rest?.id || innerID
      }
    );
  }
);
Switch.displayName = "MaterialTailwind.Switch";

// src/components/tabs.tsx
var React25 = __toESM(require("react"), 1);
var import_react14 = require("@floating-ui/react");
var import_tailwind_merge25 = require("tailwind-merge");
var import_jsx_runtime27 = require("react/jsx-runtime");
var TabsContext = React25.createContext({
  activeTab: "",
  orientation: "horizontal"
});
var TabsRoot = React25.forwardRef(
  ({
    as,
    value,
    defaultValue,
    onValueChange,
    orientation,
    className,
    children,
    ...rest
  }, ref) => {
    const Element = as || "div";
    const contextTheme = useTheme();
    const theme2 = contextTheme.tabs || tabsTheme;
    const defaultProps = contextTheme.defaultProps;
    orientation ??= defaultProps?.orientation ?? "horizontal";
    const tabsValue = value || defaultValue;
    const [indicatorRect, setIndicatorRect] = React25.useState({
      clientWidth: 0,
      clientHeight: 0,
      offsetLeft: 0,
      offsetTop: 0
    });
    const [uncontrolledActiveTab, setUncontrolledActiveTab] = React25.useState(() => tabsValue);
    const activeTab = value || uncontrolledActiveTab;
    const setActiveTab = onValueChange || setUncontrolledActiveTab;
    React25.useEffect(() => {
      setActiveTab(tabsValue);
    }, [tabsValue]);
    const contextValue = React25.useMemo(
      () => ({
        orientation,
        activeTab,
        setActiveTab,
        indicatorRect,
        setIndicatorRect
      }),
      [orientation, activeTab, setActiveTab, indicatorRect, setIndicatorRect]
    );
    const styles = (0, import_tailwind_merge25.twMerge)(theme2.baseStyle, className);
    return /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(TabsContext.Provider, { value: contextValue, children: /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(
      Element,
      {
        ...rest,
        ref,
        className: styles,
        "data-orientation": orientation,
        children
      }
    ) });
  }
);
TabsRoot.displayName = "MaterialTailwind.TabsRoot";
var TabsList = React25.forwardRef(
  ({ as, className, children, ...rest }, ref) => {
    const Element = as || "div";
    const contextTheme = useTheme();
    const theme2 = contextTheme.tabsList || tabsListTheme;
    const { orientation } = React25.useContext(TabsContext);
    const styles = (0, import_tailwind_merge25.twMerge)(theme2.baseStyle, className);
    return /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(
      Element,
      {
        ...rest,
        ref,
        role: "tablist",
        className: styles,
        "aria-orientation": orientation,
        "data-orientation": orientation,
        children
      }
    );
  }
);
TabsList.displayName = "MaterialTailwind.TabsList";
var TabsTrigger = React25.forwardRef(
  ({ as, value, className, children, ...rest }, ref) => {
    const Element = as || "button";
    const innerRef = React25.useRef(null);
    const [elementRect, setElementRect] = React25.useState(
      null
    );
    const contextTheme = useTheme();
    const theme2 = contextTheme.tabsTrigger || tabsTriggerTheme;
    const { activeTab, setActiveTab, setIndicatorRect } = React25.useContext(TabsContext);
    const isActive = activeTab === value;
    const styles = (0, import_tailwind_merge25.twMerge)(theme2.baseStyle, className);
    const elementRef = (0, import_react14.useMergeRefs)([innerRef, ref]);
    React25.useEffect(() => {
      const element = innerRef.current;
      if (element) {
        setElementRect(element);
      }
    }, []);
    const handleIndicatorRect = React25.useCallback(() => {
      if (isActive && elementRect) {
        setIndicatorRect?.({
          clientWidth: elementRect.clientWidth,
          clientHeight: elementRect.clientHeight,
          offsetLeft: elementRect.offsetLeft,
          offsetTop: elementRect.offsetTop
        });
      }
    }, [
      isActive,
      elementRect?.clientWidth,
      elementRect?.clientHeight,
      elementRect?.offsetLeft,
      elementRect?.offsetTop
    ]);
    React25.useEffect(() => {
      handleIndicatorRect();
    }, [handleIndicatorRect]);
    React25.useEffect(() => {
      window.addEventListener("resize", handleIndicatorRect);
      return () => {
        window.removeEventListener("resize", handleIndicatorRect);
      };
    }, [handleIndicatorRect]);
    return /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(
      Element,
      {
        ...rest,
        ref: elementRef,
        role: "tab",
        className: styles,
        "data-active": isActive,
        "aria-selected": isActive,
        onClick: (event) => {
          rest.onClick?.(event);
          setActiveTab?.(value);
        },
        children
      }
    );
  }
);
TabsTrigger.displayName = "MaterialTailwind.TabsTrigger";
var TabsPanel = React25.forwardRef(
  ({ as, value, className, children, ...rest }, ref) => {
    const Element = as || "div";
    const contextTheme = useTheme();
    const theme2 = contextTheme.tabsPanel || tabsPanelTheme;
    const { activeTab, orientation } = React25.useContext(TabsContext);
    const isActive = activeTab === value;
    const styles = (0, import_tailwind_merge25.twMerge)(theme2.baseStyle, className);
    return isActive ? /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(
      Element,
      {
        ...rest,
        ref,
        role: "tabpanel",
        className: styles,
        "data-active": isActive,
        "data-orientation": orientation,
        children
      }
    ) : null;
  }
);
TabsPanel.displayName = "MaterialTailwind.TabsPanel";
var TabsTriggerIndicator = React25.forwardRef(({ as, className, ...rest }, ref) => {
  const Element = as || "span";
  const contextTheme = useTheme();
  const theme2 = contextTheme.tabsTriggerIndicator || tabsTriggerIndicatorTheme;
  const { indicatorRect } = React25.useContext(TabsContext);
  const styles = (0, import_tailwind_merge25.twMerge)(theme2.baseStyle, className);
  return /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(
    Element,
    {
      ...rest,
      ref,
      style: {
        ...rest?.style,
        width: indicatorRect?.clientWidth,
        height: indicatorRect?.clientHeight,
        left: indicatorRect?.offsetLeft,
        top: indicatorRect?.offsetTop,
        position: "absolute",
        zIndex: 1
      },
      className: styles
    }
  );
});
TabsTriggerIndicator.displayName = "MaterialTailwind.TabsTriggerIndicator";
var Tabs = Object.assign(TabsRoot, {
  List: TabsList,
  Trigger: TabsTrigger,
  Panel: TabsPanel,
  TriggerIndicator: TabsTriggerIndicator
});

// src/components/textarea.tsx
var React26 = __toESM(require("react"), 1);
var import_tailwind_merge26 = require("tailwind-merge");
var import_jsx_runtime28 = require("react/jsx-runtime");
var Textarea = React26.forwardRef(
  ({ color, size, resize, isError, isSuccess, className, ...rest }, ref) => {
    const contextTheme = useTheme();
    const theme2 = contextTheme?.textarea ?? textareaTheme;
    const defaultProps = theme2?.defaultProps;
    size ??= defaultProps?.size ?? "md";
    color ??= defaultProps?.color ?? "primary";
    resize ??= defaultProps?.resize ?? false;
    isError ??= defaultProps?.isError ?? false;
    isSuccess ??= defaultProps?.isSuccess ?? false;
    const styles = (0, import_tailwind_merge26.twMerge)(
      theme2.baseStyle,
      theme2.color[color],
      theme2.size[size],
      resize && theme2["resize"],
      isError && theme2["isError"],
      isSuccess && theme2["isSuccess"],
      className
    );
    return /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(
      "textarea",
      {
        rows: 8,
        ...rest,
        ref,
        className: styles,
        "data-error": isError,
        "data-success": isSuccess
      }
    );
  }
);
Textarea.displayName = "MaterialTailwind.Textarea";

// src/components/tooltip.tsx
var React27 = __toESM(require("react"), 1);
var import_react15 = require("@floating-ui/react");
var import_react16 = require("@floating-ui/react");
var import_react17 = require("@floating-ui/react");
var import_tailwind_merge27 = require("tailwind-merge");
var import_jsx_runtime29 = require("react/jsx-runtime");
var TooltipContext = React27.createContext({
  open: false,
  setOpen: () => {
  }
});
function TooltipRoot({
  open: controlledOpen,
  onOpenChange: setControlledOpen,
  placement,
  offset,
  interactive,
  children
}) {
  const arrowRef = React27.useRef(null);
  const contextTheme = useTheme();
  const theme2 = contextTheme?.tooltip ?? tooltipTheme;
  const defaultProps = theme2?.defaultProps;
  const [uncontrolledOpen, setUncontrolledOpen] = React27.useState(false);
  const open = controlledOpen ?? uncontrolledOpen;
  const setOpen = setControlledOpen ?? setUncontrolledOpen;
  placement ??= defaultProps?.placement ?? "top";
  offset ??= defaultProps?.offset ?? 8;
  interactive ??= defaultProps?.interactive ?? false;
  const data = (0, import_react16.useFloating)({
    placement,
    open,
    onOpenChange: setOpen,
    whileElementsMounted: import_react17.autoUpdate,
    middleware: [
      (0, import_react17.offset)(offset),
      (0, import_react17.flip)({
        crossAxis: placement.includes("-"),
        fallbackAxisSideDirection: "end",
        padding: 5
      }),
      (0, import_react17.shift)({ padding: 5 }),
      (0, import_react17.arrow)({
        element: arrowRef,
        padding: 5
      })
    ]
  });
  const { context } = data;
  const hover = (0, import_react16.useHover)(context, {
    move: true,
    enabled: controlledOpen == null,
    handleClose: interactive ? (0, import_react17.safePolygon)() : null
  });
  const focus = (0, import_react16.useFocus)(context, {
    enabled: controlledOpen == null
  });
  const dismiss = (0, import_react16.useDismiss)(context);
  const role = (0, import_react16.useRole)(context, { role: "tooltip" });
  const interactions = (0, import_react16.useInteractions)([hover, focus, dismiss, role]);
  const contextValue = React27.useMemo(
    () => ({
      open,
      setOpen,
      arrowRef,
      ...interactions,
      ...data
    }),
    [open, setOpen, arrowRef, interactions, data]
  );
  return /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(TooltipContext.Provider, { value: contextValue, children });
}
TooltipRoot.displayName = "MaterialTailwind.Tooltip";
var TooltipTrigger = React27.forwardRef(({ as, className, children, ...rest }, ref) => {
  const Element = as || "button";
  const contextTheme = useTheme();
  const theme2 = contextTheme?.tooltipTrigger ?? tooltipTriggerTheme;
  const { refs, getReferenceProps, open } = React27.useContext(TooltipContext);
  const styles = (0, import_tailwind_merge27.twMerge)(theme2.baseStyle, className);
  const elementRef = (0, import_react16.useMergeRefs)([refs?.setReference, ref]);
  return /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(
    Element,
    {
      ...rest,
      ref: elementRef,
      "data-open": open,
      className: styles,
      ...getReferenceProps && getReferenceProps(),
      children
    }
  );
});
TooltipTrigger.displayName = "MaterialTailwind.TooltipTrigger";
var TooltipContent = React27.forwardRef(({ as, className, children, ...rest }, ref) => {
  const Element = as || "div";
  const contextTheme = useTheme();
  const theme2 = contextTheme?.tooltipContent ?? tooltipContentTheme;
  const { refs, getFloatingProps, open, floatingStyles } = React27.useContext(TooltipContext);
  const styles = (0, import_tailwind_merge27.twMerge)(theme2.baseStyle, className);
  const elementRef = (0, import_react16.useMergeRefs)([refs?.setFloating, ref]);
  return open ? /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(import_react15.FloatingPortal, { children: /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(
    Element,
    {
      ...rest,
      ref: elementRef,
      "data-open": open,
      style: { ...floatingStyles, ...rest?.style },
      className: styles,
      ...getFloatingProps && getFloatingProps(),
      children
    }
  ) }) : null;
});
TooltipContent.displayName = "MaterialTailwind.TooltipContent";
var TooltipArrow = React27.forwardRef(
  ({ as, className, ...rest }, ref) => {
    const Element = as || "span";
    const contextTheme = useTheme();
    const theme2 = contextTheme?.tooltipArrow ?? tooltipArrowTheme;
    const innerRef = React27.useRef(null);
    const { placement, arrowRef, middlewareData } = React27.useContext(TooltipContext);
    const elementRef = (0, import_react16.useMergeRefs)([arrowRef, innerRef, ref]);
    const staticSide = {
      top: "bottom",
      right: "left",
      bottom: "top",
      left: "right"
    }[placement ? placement.split("-")[0] : ""];
    const styles = (0, import_tailwind_merge27.twMerge)(theme2.baseStyle, className);
    return /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(
      Element,
      {
        ...rest,
        ref: elementRef,
        style: {
          position: "absolute",
          left: middlewareData?.arrow?.x,
          top: middlewareData?.arrow?.y,
          [staticSide]: `${-innerRef?.current?.clientHeight / 2 - 1}px`,
          ...rest?.style
        },
        "data-placement": placement,
        className: styles
      }
    );
  }
);
var Tooltip = Object.assign(TooltipRoot, {
  Trigger: TooltipTrigger,
  Content: TooltipContent,
  Arrow: TooltipArrow
});

// src/components/typography.tsx
var React28 = __toESM(require("react"), 1);
var import_tailwind_merge28 = require("tailwind-merge");
var import_jsx_runtime30 = require("react/jsx-runtime");
var headings = ["h1", "h2", "h3", "h4", "h5", "h6"];
var Typography = React28.forwardRef(
  ({ as, color, type, className, children, ...rest }, ref) => {
    const Element = as ? as : type === "lead" ? "p" : type || "p";
    const contextTheme = useTheme();
    const theme2 = contextTheme?.typography ?? typographyTheme;
    const defaultProps = theme2?.defaultProps;
    if (headings.includes(type) && color === "inherit") {
      color = "default";
    } else {
      color ??= defaultProps?.color ?? "inherit";
    }
    color ??= defaultProps?.color ?? "inherit";
    type ??= defaultProps?.type ?? "p";
    const styles = (0, import_tailwind_merge28.twMerge)(
      theme2.baseStyle,
      theme2["type"][type],
      theme2["color"][color],
      className
    );
    return /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(Element, { ...rest, ref, className: styles, children });
  }
);
Typography.displayName = "MaterialTailwind.Typography";

// src/components/timeline.tsx
var React29 = __toESM(require("react"), 1);
var import_tailwind_merge29 = require("tailwind-merge");
var import_react18 = require("@floating-ui/react");
var import_jsx_runtime31 = require("react/jsx-runtime");
var TimelineContext = React29.createContext({
  value: "",
  setValue: () => {
  },
  color: "primary",
  mode: "timeline",
  orientation: "horizontal"
});
var TimelineRoot = React29.forwardRef(
  ({
    as,
    value,
    defaultValue,
    onChange,
    color,
    mode,
    orientation,
    className,
    children,
    ...props
  }, ref) => {
    const Element = as || "div";
    const contextTheme = useTheme();
    const theme2 = contextTheme?.timeline ?? timelineTheme;
    const defaultProps = theme2?.defaultProps;
    const innerRef = React29.useRef(null);
    const [innerValue, setInnerValue] = React29.useState(defaultValue || "");
    value ??= innerValue;
    onChange ??= setInnerValue;
    mode ??= defaultProps?.mode ?? "timeline";
    color ??= defaultProps?.color ?? "primary";
    orientation ??= defaultProps?.orientation ?? "horizontal";
    React29.useEffect(() => {
      const parentEl = innerRef?.current;
      if (parentEl && !value) {
        const children2 = Array.from(parentEl.children);
        const firstChild = children2[0];
        onChange?.(firstChild.dataset.value);
      }
    }, []);
    React29.useEffect(() => {
      if (mode === "stepper") {
        const parentEl = innerRef?.current;
        if (parentEl) {
          const children2 = Array.from(parentEl.children);
          const currentEl = children2.find(
            (child) => child.dataset.value == value
          );
          const currentElIndex = children2.findIndex(
            (child) => child.dataset.value == value
          );
          const activeElIndex = children2.findIndex(
            (child) => child.dataset.active === "true"
          );
          const completedSteps = children2.filter(
            (_, index) => index < activeElIndex
          );
          const incompletedSteps = children2.filter(
            (_, index) => index > activeElIndex
          );
          completedSteps.forEach((step) => {
            step.dataset.completed = "true";
          });
          incompletedSteps.forEach((step) => {
            step.dataset.completed = "false";
          });
          if (currentElIndex === activeElIndex && currentEl) {
            currentEl.dataset.completed = "false";
          }
        }
      }
    }, [value]);
    const contextValue = React29.useMemo(
      () => ({
        value,
        setValue: onChange,
        orientation,
        color,
        mode,
        parentRef: innerRef
      }),
      [value, onChange, orientation, color, mode]
    );
    const styles = (0, import_tailwind_merge29.twMerge)(theme2.baseStyle, className);
    const mergedRef = (0, import_react18.useMergeRefs)([ref, innerRef]);
    return /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(
      Element,
      {
        ...props,
        ref: mergedRef,
        className: styles,
        "data-orientation": orientation,
        children: /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(TimelineContext.Provider, { value: contextValue, children })
      }
    );
  }
);
TimelineRoot.displayName = "MaterialTailwind.Timeline";
var TimelineItem = React29.forwardRef(
  ({ as, value, className, disabled, children, ...props }, ref) => {
    const Element = as || "div";
    const contextTheme = useTheme();
    const theme2 = contextTheme?.timelineItem ?? timelineItemTheme;
    const {
      mode,
      setValue,
      orientation,
      value: contextValue
    } = React29.useContext(TimelineContext);
    const innerRef = React29.useRef(null);
    value ??= React29.useId();
    const isActive = contextValue == value || mode === "timeline";
    function onClick(event) {
      props?.onClick?.(event);
      if (mode === "stepper") {
        setValue?.(value);
      }
    }
    const styles = (0, import_tailwind_merge29.twMerge)(theme2.baseStyle, className);
    const mergedRef = (0, import_react18.useMergeRefs)([ref, innerRef]);
    return /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(
      Element,
      {
        ...props,
        ref: mergedRef,
        onClick,
        "data-value": value,
        "data-active": isActive,
        "data-completed": isActive,
        "data-orientation": orientation,
        "aria-disabled": disabled,
        className: styles,
        children
      }
    );
  }
);
TimelineItem.displayName = "MaterialTailwind.TimelineItem";
var TimelineHeader = React29.forwardRef(({ as, className, children, ...props }, ref) => {
  const Element = as || "div";
  const contextTheme = useTheme();
  const theme2 = contextTheme?.timelineHeader ?? timelineHeaderTheme;
  const styles = (0, import_tailwind_merge29.twMerge)(theme2.baseStyle, className);
  return /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(Element, { ...props, ref, className: styles, children });
});
TimelineHeader.displayName = "MaterialTailwind.TimelineHeader";
var TimelineIcon = React29.forwardRef(
  ({ as, className, children, ...props }, ref) => {
    const Element = as || "span";
    const contextTheme = useTheme();
    const theme2 = contextTheme?.timelineIcon ?? timelineIconTheme;
    const { color } = React29.useContext(TimelineContext);
    const styles = (0, import_tailwind_merge29.twMerge)(theme2.baseStyle, theme2.color[color], className);
    return /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(Element, { ...props, ref, className: styles, children });
  }
);
TimelineIcon.displayName = "MaterialTailwind.TimelineIcon";
var TimelineSeparator = React29.forwardRef(({ as, className, children, ...props }, ref) => {
  const Element = as || "div";
  const contextTheme = useTheme();
  const theme2 = contextTheme?.timelineSeparator ?? timelineSeparatorTheme;
  const { orientation, color } = React29.useContext(TimelineContext);
  const styles = (0, import_tailwind_merge29.twMerge)(theme2.baseStyle, theme2.color[color], className);
  return /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(
    Element,
    {
      ...props,
      ref,
      "data-orientation": orientation,
      className: styles,
      children
    }
  );
});
TimelineSeparator.displayName = "MaterialTailwind.TimelineSeparator";
var TimelineBody = React29.forwardRef(
  ({ as, className, children, ...props }, ref) => {
    const Element = as || "div";
    const contextTheme = useTheme();
    const theme2 = contextTheme?.timelineBody ?? timelineBodyTheme;
    const { orientation } = React29.useContext(TimelineContext);
    const styles = (0, import_tailwind_merge29.twMerge)(theme2.baseStyle, className);
    return /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(
      Element,
      {
        ...props,
        ref,
        className: styles,
        "data-orientation": orientation,
        children
      }
    );
  }
);
TimelineBody.displayName = "MaterialTailwind.TimelineBody";
var Timeline = Object.assign(TimelineRoot, {
  Item: TimelineItem,
  Icon: TimelineIcon,
  Body: TimelineBody,
  Header: TimelineHeader,
  Separator: TimelineSeparator
});
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Accordion,
  AccordionContent,
  AccordionContext,
  AccordionItem,
  AccordionItemContext,
  AccordionRoot,
  AccordionTrigger,
  Alert,
  AlertContent,
  AlertContext,
  AlertDismissTrigger,
  AlertIcon,
  Avatar,
  Breadcrumb,
  BreadcrumbLink,
  BreadcrumbRoot,
  BreadcrumbSeparator,
  Button,
  ButtonGroup,
  Card,
  CardBody,
  CardFooter,
  CardHeader,
  CardRoot,
  Checkbox,
  CheckboxContext,
  CheckboxIndicator,
  CheckboxRoot,
  Chip,
  ChipContext,
  ChipDismissTrigger,
  ChipIcon,
  ChipLabel,
  Collapse,
  Dialog,
  DialogContent,
  DialogDismissTrigger,
  DialogOverlay,
  DialogRoot,
  DialogTrigger,
  Drawer,
  DrawerDismissTrigger,
  DrawerOverlay,
  DrawerPanel,
  DrawerRoot,
  DrawerTrigger,
  IconButton,
  Input,
  InputContext,
  InputField,
  InputIcon,
  InputRoot,
  List,
  ListItem,
  ListItemEnd,
  ListItemStart,
  ListRoot,
  Menu,
  MenuContent,
  MenuContext,
  MenuItem,
  MenuRoot,
  MenuTrigger,
  Popover,
  PopoverArrow,
  PopoverContent,
  PopoverContext,
  PopoverRoot,
  PopoverTrigger,
  Progress,
  ProgressBar,
  ProgressContext,
  ProgressRoot,
  Radio,
  RadioContext,
  RadioIndicator,
  RadioItem,
  RadioRoot,
  Rating,
  Select,
  SelectContext,
  SelectList,
  SelectOption,
  SelectRoot,
  SelectTrigger,
  Spinner,
  Switch,
  Tabs,
  TabsList,
  TabsPanel,
  TabsRoot,
  TabsTrigger,
  TabsTriggerIndicator,
  Textarea,
  Timeline,
  TimelineBody,
  TimelineContext,
  TimelineHeader,
  TimelineIcon,
  TimelineItem,
  TimelineRoot,
  TimelineSeparator,
  Tooltip,
  TooltipArrow,
  TooltipContent,
  TooltipContext,
  TooltipRoot,
  TooltipTrigger,
  Typography
});
