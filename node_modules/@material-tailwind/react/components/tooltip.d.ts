import * as react_jsx_runtime from 'react/jsx-runtime';
import * as React from 'react';
import { Placement, OffsetOptions, UseFloatingReturn, useInteractions } from '@floating-ui/react';

type FloatingType = Partial<UseFloatingReturn> & Partial<ReturnType<typeof useInteractions>>;
interface TooltipContextProps extends FloatingType {
    open?: boolean;
    setOpen?: React.Dispatch<React.SetStateAction<boolean>>;
    arrowRef?: React.MutableRefObject<null>;
}
declare const TooltipContext: React.Context<TooltipContextProps>;
interface TooltipProps {
    open?: boolean;
    onOpenChange?: () => void;
    placement?: Placement;
    offset?: OffsetOptions;
    interactive?: boolean;
    children: React.ReactNode;
}
/**
 * @remarks
 * [Documentation](http://www.material-tailwind.com/docs/react/tooltip) •
 * [Props Definition](https://www.material-tailwind.com/docs/react/tooltip#tooltip-props) •
 * [Theming Guide](https://www.material-tailwind.com/docs/react/tooltip#tooltip-theme)
 */
declare function TooltipRoot({ open: controlledOpen, onOpenChange: setControlledOpen, placement, offset, interactive, children, }: TooltipProps): react_jsx_runtime.JSX.Element;
declare namespace TooltipRoot {
    var displayName: string;
}
interface TooltipTriggerProps extends Omit<React.AllHTMLAttributes<HTMLElement>, "as"> {
    as?: React.ElementType;
    className?: string;
    children: React.ReactNode;
}
declare const TooltipTrigger: React.ForwardRefExoticComponent<TooltipTriggerProps & React.RefAttributes<HTMLElement>>;
interface TooltipContentProps extends Omit<React.AllHTMLAttributes<HTMLElement>, "as"> {
    as?: React.ElementType;
    className?: string;
    children: React.ReactNode;
}
declare const TooltipContent: React.ForwardRefExoticComponent<TooltipContentProps & React.RefAttributes<HTMLElement>>;
interface TooltipArrowProps extends Omit<React.AllHTMLAttributes<HTMLElement>, "as"> {
    as?: React.ElementType;
    className?: string;
}
declare const TooltipArrow: React.ForwardRefExoticComponent<TooltipArrowProps & React.RefAttributes<HTMLElement>>;
declare const Tooltip: typeof TooltipRoot & {
    Trigger: React.ForwardRefExoticComponent<TooltipTriggerProps & React.RefAttributes<HTMLElement>>;
    Content: React.ForwardRefExoticComponent<TooltipContentProps & React.RefAttributes<HTMLElement>>;
    Arrow: React.ForwardRefExoticComponent<TooltipArrowProps & React.RefAttributes<HTMLElement>>;
};

export { Tooltip, TooltipArrow, TooltipArrowProps, TooltipContent, TooltipContentProps, TooltipContext, TooltipContextProps, TooltipProps, TooltipRoot, TooltipTrigger, TooltipTriggerProps, Tooltip as default };
