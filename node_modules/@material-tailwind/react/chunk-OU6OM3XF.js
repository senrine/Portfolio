import {
  useTheme
} from "./chunk-KYDE6FLK.js";
import {
  checkboxIndicatorTheme,
  checkboxTheme
} from "./chunk-QZKUZIYH.js";

// src/components/checkbox.tsx
import * as React from "react";
import { twMerge } from "tailwind-merge";
import { jsx, jsxs } from "react/jsx-runtime";
var CheckboxContext = React.createContext({
  color: "primary",
  disabled: false,
  checked: false
});
var CheckboxRoot = React.forwardRef(
  ({ color, disabled, className, children, ...props }, ref) => {
    const contextTheme = useTheme();
    const theme = contextTheme?.checkbox ?? checkboxTheme;
    const defaultProps = theme?.defaultProps;
    const innerId = React.useId();
    const [checked, setChecked] = React.useState(props?.checked || false);
    color ??= defaultProps?.color ?? "primary";
    const styles = twMerge(theme.baseStyle, theme.color[color], className);
    React.useEffect(() => {
      if (props?.defaultChecked) {
        setChecked(props?.defaultChecked);
      }
    }, []);
    const contextValue = React.useMemo(
      () => ({
        color,
        checked,
        disabled
      }),
      [color, checked, disabled]
    );
    return /* @__PURE__ */ jsxs(
      "label",
      {
        ref,
        className: styles,
        "data-checked": checked,
        "aria-disabled": disabled,
        htmlFor: props?.id || innerId,
        children: [
          /* @__PURE__ */ jsx(
            "input",
            {
              ...props,
              id: props?.id || innerId,
              type: "checkbox",
              checked: props?.defaultChecked ? void 0 : props?.checked || checked,
              onChange: (e) => {
                props?.onChange?.(e);
                setChecked((cur) => !cur);
              },
              style: { display: "none" }
            }
          ),
          /* @__PURE__ */ jsx(CheckboxContext.Provider, { value: contextValue, children })
        ]
      }
    );
  }
);
CheckboxRoot.displayName = "MaterialTailwind.Checkbox";
var CheckboxIndicator = React.forwardRef(({ as, className, children, ...props }, ref) => {
  const Element = as || "span";
  const contextTheme = useTheme();
  const { checked } = React.useContext(CheckboxContext);
  const theme = contextTheme?.checkboxIndicator ?? checkboxIndicatorTheme;
  const styles = twMerge(theme.baseStyle, className);
  return /* @__PURE__ */ jsx(Element, { ...props, "data-checked": checked, className: styles, ref, children: children || /* @__PURE__ */ jsx(
    "svg",
    {
      fill: "none",
      width: "18px",
      height: "18px",
      strokeWidth: "2",
      color: "currentColor",
      viewBox: "0 0 24 24",
      xmlns: "http://www.w3.org/2000/svg",
      children: /* @__PURE__ */ jsx(
        "path",
        {
          d: "M5 13L9 17L19 7",
          stroke: "currentColor",
          strokeWidth: "2",
          strokeLinecap: "round",
          strokeLinejoin: "round"
        }
      )
    }
  ) });
});
CheckboxIndicator.displayName = "MaterialTailwind.CheckboxIndicator";
var Checkbox = Object.assign(CheckboxRoot, {
  Indicator: CheckboxIndicator
});
var checkbox_default = Checkbox;

export {
  CheckboxContext,
  CheckboxRoot,
  CheckboxIndicator,
  Checkbox,
  checkbox_default
};
