import {
  useTheme
} from "./chunk-KYDE6FLK.js";
import {
  tabsListTheme,
  tabsPanelTheme,
  tabsTheme,
  tabsTriggerIndicatorTheme,
  tabsTriggerTheme
} from "./chunk-N5SHDOJU.js";

// src/components/tabs.tsx
import * as React from "react";
import { useMergeRefs } from "@floating-ui/react";
import { twMerge } from "tailwind-merge";
import { jsx } from "react/jsx-runtime";
var TabsContext = React.createContext({
  activeTab: "",
  orientation: "horizontal"
});
var TabsRoot = React.forwardRef(
  ({
    as,
    value,
    defaultValue,
    onValueChange,
    orientation,
    className,
    children,
    ...rest
  }, ref) => {
    const Element = as || "div";
    const contextTheme = useTheme();
    const theme = contextTheme.tabs || tabsTheme;
    const defaultProps = contextTheme.defaultProps;
    orientation ??= defaultProps?.orientation ?? "horizontal";
    const tabsValue = value || defaultValue;
    const [indicatorRect, setIndicatorRect] = React.useState({
      clientWidth: 0,
      clientHeight: 0,
      offsetLeft: 0,
      offsetTop: 0
    });
    const [uncontrolledActiveTab, setUncontrolledActiveTab] = React.useState(() => tabsValue);
    const activeTab = value || uncontrolledActiveTab;
    const setActiveTab = onValueChange || setUncontrolledActiveTab;
    React.useEffect(() => {
      setActiveTab(tabsValue);
    }, [tabsValue]);
    const contextValue = React.useMemo(
      () => ({
        orientation,
        activeTab,
        setActiveTab,
        indicatorRect,
        setIndicatorRect
      }),
      [orientation, activeTab, setActiveTab, indicatorRect, setIndicatorRect]
    );
    const styles = twMerge(theme.baseStyle, className);
    return /* @__PURE__ */ jsx(TabsContext.Provider, { value: contextValue, children: /* @__PURE__ */ jsx(
      Element,
      {
        ...rest,
        ref,
        className: styles,
        "data-orientation": orientation,
        children
      }
    ) });
  }
);
TabsRoot.displayName = "MaterialTailwind.TabsRoot";
var TabsList = React.forwardRef(
  ({ as, className, children, ...rest }, ref) => {
    const Element = as || "div";
    const contextTheme = useTheme();
    const theme = contextTheme.tabsList || tabsListTheme;
    const { orientation } = React.useContext(TabsContext);
    const styles = twMerge(theme.baseStyle, className);
    return /* @__PURE__ */ jsx(
      Element,
      {
        ...rest,
        ref,
        role: "tablist",
        className: styles,
        "aria-orientation": orientation,
        "data-orientation": orientation,
        children
      }
    );
  }
);
TabsList.displayName = "MaterialTailwind.TabsList";
var TabsTrigger = React.forwardRef(
  ({ as, value, className, children, ...rest }, ref) => {
    const Element = as || "button";
    const innerRef = React.useRef(null);
    const [elementRect, setElementRect] = React.useState(
      null
    );
    const contextTheme = useTheme();
    const theme = contextTheme.tabsTrigger || tabsTriggerTheme;
    const { activeTab, setActiveTab, setIndicatorRect } = React.useContext(TabsContext);
    const isActive = activeTab === value;
    const styles = twMerge(theme.baseStyle, className);
    const elementRef = useMergeRefs([innerRef, ref]);
    React.useEffect(() => {
      const element = innerRef.current;
      if (element) {
        setElementRect(element);
      }
    }, []);
    const handleIndicatorRect = React.useCallback(() => {
      if (isActive && elementRect) {
        setIndicatorRect?.({
          clientWidth: elementRect.clientWidth,
          clientHeight: elementRect.clientHeight,
          offsetLeft: elementRect.offsetLeft,
          offsetTop: elementRect.offsetTop
        });
      }
    }, [
      isActive,
      elementRect?.clientWidth,
      elementRect?.clientHeight,
      elementRect?.offsetLeft,
      elementRect?.offsetTop
    ]);
    React.useEffect(() => {
      handleIndicatorRect();
    }, [handleIndicatorRect]);
    React.useEffect(() => {
      window.addEventListener("resize", handleIndicatorRect);
      return () => {
        window.removeEventListener("resize", handleIndicatorRect);
      };
    }, [handleIndicatorRect]);
    return /* @__PURE__ */ jsx(
      Element,
      {
        ...rest,
        ref: elementRef,
        role: "tab",
        className: styles,
        "data-active": isActive,
        "aria-selected": isActive,
        onClick: (event) => {
          rest.onClick?.(event);
          setActiveTab?.(value);
        },
        children
      }
    );
  }
);
TabsTrigger.displayName = "MaterialTailwind.TabsTrigger";
var TabsPanel = React.forwardRef(
  ({ as, value, className, children, ...rest }, ref) => {
    const Element = as || "div";
    const contextTheme = useTheme();
    const theme = contextTheme.tabsPanel || tabsPanelTheme;
    const { activeTab, orientation } = React.useContext(TabsContext);
    const isActive = activeTab === value;
    const styles = twMerge(theme.baseStyle, className);
    return isActive ? /* @__PURE__ */ jsx(
      Element,
      {
        ...rest,
        ref,
        role: "tabpanel",
        className: styles,
        "data-active": isActive,
        "data-orientation": orientation,
        children
      }
    ) : null;
  }
);
TabsPanel.displayName = "MaterialTailwind.TabsPanel";
var TabsTriggerIndicator = React.forwardRef(({ as, className, ...rest }, ref) => {
  const Element = as || "span";
  const contextTheme = useTheme();
  const theme = contextTheme.tabsTriggerIndicator || tabsTriggerIndicatorTheme;
  const { indicatorRect } = React.useContext(TabsContext);
  const styles = twMerge(theme.baseStyle, className);
  return /* @__PURE__ */ jsx(
    Element,
    {
      ...rest,
      ref,
      style: {
        ...rest?.style,
        width: indicatorRect?.clientWidth,
        height: indicatorRect?.clientHeight,
        left: indicatorRect?.offsetLeft,
        top: indicatorRect?.offsetTop,
        position: "absolute",
        zIndex: 1
      },
      className: styles
    }
  );
});
TabsTriggerIndicator.displayName = "MaterialTailwind.TabsTriggerIndicator";
var Tabs = Object.assign(TabsRoot, {
  List: TabsList,
  Trigger: TabsTrigger,
  Panel: TabsPanel,
  TriggerIndicator: TabsTriggerIndicator
});
var tabs_default = Tabs;

export {
  TabsRoot,
  TabsList,
  TabsTrigger,
  TabsPanel,
  TabsTriggerIndicator,
  Tabs,
  tabs_default
};
