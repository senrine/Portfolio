import {
  useTheme
} from "./chunk-KYDE6FLK.js";
import {
  selectListTheme,
  selectOptionTheme,
  selectTheme,
  selectTriggerTheme
} from "./chunk-TQ6RMPVT.js";

// src/components/select.tsx
import * as React from "react";
import { FloatingList, FloatingFocusManager } from "@floating-ui/react";
import {
  useFloating,
  useInteractions,
  useRole,
  useClick,
  useTypeahead,
  useListNavigation,
  useDismiss,
  useListItem,
  useMergeRefs
} from "@floating-ui/react";
import {
  flip as fuiFlip,
  offset as fuiOffset,
  size as fuiSize,
  autoUpdate
} from "@floating-ui/react";
import { twMerge } from "tailwind-merge";
import Ripple from "material-ripple-effects";
import { jsx, jsxs } from "react/jsx-runtime";
var SelectContext = React.createContext({
  size: "md",
  color: "primary",
  isError: false,
  isSuccess: false,
  disabled: false,
  placement: "bottom",
  offset: 5
});
function SelectRoot({
  size,
  color,
  isPill,
  isError,
  isSuccess,
  disabled,
  placement,
  offset,
  value,
  name,
  onChange,
  children
}) {
  const contextTheme = useTheme();
  const theme = contextTheme?.select ?? selectTheme;
  const defaultProps = theme?.defaultProps;
  const [isOpen, setIsOpen] = React.useState(false);
  const [selected, setSelected] = React.useState(() => ({
    value,
    element: null
  }));
  const [activeIndex, setActiveIndex] = React.useState(null);
  const [selectedIndex, setSelectedIndex] = React.useState(null);
  size ??= defaultProps?.size ?? "md";
  color ??= defaultProps?.color ?? "primary";
  isPill ??= defaultProps?.isPill ?? false;
  isError ??= defaultProps?.isError ?? false;
  isSuccess ??= defaultProps?.isSuccess ?? false;
  placement ??= defaultProps?.placement ?? "bottom";
  offset ??= defaultProps?.offset ?? 5;
  const { refs, floatingStyles, context } = useFloating({
    placement,
    open: isOpen,
    onOpenChange: setIsOpen,
    whileElementsMounted: autoUpdate,
    middleware: [
      fuiFlip(),
      fuiOffset(offset),
      fuiSize({
        apply({ rects, elements, availableHeight }) {
          Object.assign(elements.floating.style, {
            maxHeight: `${availableHeight}px`,
            minWidth: `${rects.reference.width}px`,
            zIndex: 9999
          });
        },
        padding: 10
      })
    ]
  });
  const labelsRef = React.useRef([]);
  const elementsRef = React.useRef([]);
  const handleSelect = React.useCallback((index) => {
    setSelectedIndex(index);
    setIsOpen(false);
    if (index !== null) {
      setSelected(labelsRef.current[index]);
      onChange?.(labelsRef.current[index]?.value);
    }
  }, []);
  function handleTypeaheadMatch(index) {
    if (isOpen) {
      setActiveIndex(index);
    } else {
      handleSelect(index);
    }
  }
  const listNav = useListNavigation(context, {
    listRef: elementsRef,
    activeIndex,
    selectedIndex,
    onNavigate: setActiveIndex
  });
  const labelsRefTypehead = React.useRef(
    labelsRef.current.map((item) => item?.value)
  );
  const typeahead = useTypeahead(context, {
    listRef: labelsRefTypehead,
    activeIndex,
    selectedIndex,
    onMatch: handleTypeaheadMatch
  });
  const click = useClick(context);
  const dismiss = useDismiss(context);
  const role = useRole(context, { role: "listbox" });
  const { getReferenceProps, getFloatingProps, getItemProps } = useInteractions(
    [listNav, typeahead, click, dismiss, role]
  );
  const contextValue = React.useMemo(
    () => ({
      color,
      size,
      isPill,
      isError,
      isSuccess,
      disabled,
      selected,
      activeIndex,
      selectedIndex,
      context,
      refs,
      floatingStyles,
      elementsRef,
      labelsRef,
      setSelected,
      getItemProps,
      handleSelect,
      getReferenceProps,
      getFloatingProps,
      isOpen,
      controlledValue: value
    }),
    [
      color,
      size,
      isPill,
      isError,
      isSuccess,
      disabled,
      selected,
      activeIndex,
      selectedIndex,
      context,
      refs,
      floatingStyles,
      elementsRef,
      labelsRef,
      getItemProps,
      handleSelect,
      getReferenceProps,
      getFloatingProps,
      isOpen,
      value
    ]
  );
  return /* @__PURE__ */ jsxs(SelectContext.Provider, { value: contextValue, children: [
    children,
    /* @__PURE__ */ jsx(
      "input",
      {
        readOnly: true,
        name,
        style: { display: "none" },
        value: value || selected?.value || ""
      }
    )
  ] });
}
SelectRoot.displayName = "MaterialTailwind.Select";
var SelectTrigger = React.forwardRef(
  ({ as, indicator, placeholder, className, children, ...rest }, ref) => {
    const Element = as || "button";
    const contextTheme = useTheme();
    const theme = contextTheme?.selectTrigger ?? selectTriggerTheme;
    const defaultProps = theme?.defaultProps;
    const {
      refs,
      getReferenceProps,
      selected,
      isPill,
      color,
      size,
      isOpen,
      isError,
      isSuccess,
      disabled
    } = React.useContext(SelectContext);
    const value = selected?.value;
    const element = selected?.element;
    const elementRef = useMergeRefs([refs?.setReference, ref]);
    indicator ??= defaultProps?.indicator ?? /* @__PURE__ */ jsxs(
      "svg",
      {
        viewBox: "0 0 24 24",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg",
        color: "currentColor",
        className: "h-[1em] w-[1em] translate-x-0.5 stroke-[1.5]",
        children: [
          /* @__PURE__ */ jsx(
            "path",
            {
              d: "M17 8L12 3L7 8",
              stroke: "currentColor",
              strokeLinecap: "round",
              strokeLinejoin: "round"
            }
          ),
          /* @__PURE__ */ jsx(
            "path",
            {
              d: "M17 16L12 21L7 16",
              stroke: "currentColor",
              strokeLinecap: "round",
              strokeLinejoin: "round"
            }
          )
        ]
      }
    );
    const styles = twMerge(
      theme.baseStyle,
      theme.size[size],
      theme.color[color],
      isPill && theme.isPill,
      className
    );
    return /* @__PURE__ */ jsxs(
      Element,
      {
        ...rest,
        ref: elementRef,
        tabIndex: 0,
        type: "button",
        className: styles,
        "data-open": isOpen,
        disabled,
        "data-error": isError,
        "data-success": isSuccess,
        ...getReferenceProps && getReferenceProps(),
        children: [
          children ? children({ value, element }) : element ?? /* @__PURE__ */ jsx("span", { "data-slot": "placeholder", className: theme.placeholder, children: placeholder }),
          indicator
        ]
      }
    );
  }
);
SelectTrigger.displayName = "MaterialTailwind.SelectTrigger";
var SelectList = React.forwardRef(
  ({
    as,
    className,
    children,
    disabled,
    initialFocus,
    returnFocus,
    guards,
    modal,
    visuallyHiddenDismiss,
    closeOnFocusOut,
    order,
    ...rest
  }, ref) => {
    const Element = as || "div";
    const contextTheme = useTheme();
    const theme = contextTheme?.selectList ?? selectListTheme;
    const defaultProps = theme?.defaultProps;
    const {
      context,
      refs,
      getFloatingProps,
      floatingStyles,
      elementsRef,
      labelsRef,
      isOpen,
      selected,
      setSelected,
      controlledValue
    } = React.useContext(SelectContext);
    disabled ??= defaultProps?.disabled ?? false;
    initialFocus ??= defaultProps?.initialFocus ?? 0;
    returnFocus ??= defaultProps?.returnFocus ?? true;
    guards ??= defaultProps?.guards ?? true;
    modal ??= defaultProps?.modal ?? true;
    visuallyHiddenDismiss ??= defaultProps?.visuallyHiddenDismiss ?? true;
    closeOnFocusOut ??= defaultProps?.closeOnFocusOut ?? true;
    order ??= defaultProps?.order ?? ["content"];
    const styles = twMerge(theme.baseStyle, className);
    const elementRef = useMergeRefs([refs?.setFloating, ref]);
    React.useEffect(() => {
      if (controlledValue) {
        const label = children?.find(
          (el) => selected?.value === el.props.value
        );
        if (label) {
          setSelected?.({
            value: label?.props?.value || "",
            element: label?.props?.children || ""
          });
        }
      }
    }, []);
    return isOpen ? /* @__PURE__ */ jsx(
      FloatingFocusManager,
      {
        order,
        modal,
        guards,
        disabled,
        returnFocus,
        initialFocus,
        closeOnFocusOut,
        visuallyHiddenDismiss,
        context,
        children: /* @__PURE__ */ jsx(
          Element,
          {
            ...rest,
            ref: elementRef,
            "data-open": isOpen,
            style: { ...floatingStyles, ...rest?.style },
            className: styles,
            ...getFloatingProps && getFloatingProps(),
            children: /* @__PURE__ */ jsx(
              FloatingList,
              {
                elementsRef,
                labelsRef,
                children
              }
            )
          }
        )
      }
    ) : null;
  }
);
SelectList.displayName = "MaterialTailwind.SelectList";
var SelectOption = React.forwardRef(
  ({ as, className, value, ripple, indicator, children, ...rest }, ref) => {
    const Element = as || "button";
    const contextTheme = useTheme();
    const theme = contextTheme?.selectOption ?? selectOptionTheme;
    const defaultProps = theme?.defaultProps;
    const { getItemProps, handleSelect, activeIndex, selectedIndex, selected } = React.useContext(SelectContext);
    ripple ??= defaultProps?.ripple ?? true;
    indicator ??= defaultProps?.indicator ?? /* @__PURE__ */ jsx(
      "svg",
      {
        xmlns: "http://www.w3.org/2000/svg",
        fill: "none",
        viewBox: "0 0 24 24",
        strokeWidth: 1.5,
        stroke: "currentColor",
        className: "h-4 w-4",
        children: /* @__PURE__ */ jsx(
          "path",
          {
            strokeLinecap: "round",
            strokeLinejoin: "round",
            d: "M4.5 12.75l6 6 9-13.5"
          }
        )
      }
    );
    const { ref: itemRef, index } = useListItem({
      label: { value, element: children }
    });
    const rippleEffect = ripple !== void 0 && new Ripple();
    const handleClick = (e) => {
      const onClick = rest?.onClick;
      if (ripple) {
        rippleEffect.create(e, "dark");
      }
      handleSelect && handleSelect(index);
      onClick?.(e);
    };
    const curValue = selected?.value || "";
    const isActive = activeIndex === index;
    const isSelected = selectedIndex === index || curValue === value;
    const styles = twMerge(theme.baseStyle, className);
    const elementRef = useMergeRefs([itemRef, ref]);
    return /* @__PURE__ */ jsxs(
      Element,
      {
        ...rest,
        ref: elementRef,
        role: "option",
        "data-selected": isActive && isSelected,
        "aria-selected": isActive && isSelected,
        tabIndex: isActive ? 0 : -1,
        className: styles,
        ...getItemProps && getItemProps({
          onClick: handleClick
        }),
        children: [
          children,
          isSelected && indicator
        ]
      }
    );
  }
);
SelectOption.displayName = "MaterialTailwind.SelectOption";
var Select = Object.assign(SelectRoot, {
  Trigger: SelectTrigger,
  List: SelectList,
  Option: SelectOption
});
var select_default = Select;

export {
  SelectContext,
  SelectRoot,
  SelectTrigger,
  SelectList,
  SelectOption,
  Select,
  select_default
};
