import {
  useTheme
} from "./chunk-KYDE6FLK.js";
import {
  listItemEndTheme,
  listItemStartTheme,
  listItemTheme,
  listTheme
} from "./chunk-PV5URN7B.js";

// src/components/list.tsx
import * as React from "react";
import { twMerge } from "tailwind-merge";
import Ripple from "material-ripple-effects";
import { jsx } from "react/jsx-runtime";
var ListRoot = React.forwardRef(
  ({ as, className, children, ...rest }, ref) => {
    const Element = as ?? "ul";
    const contextTheme = useTheme();
    const theme = contextTheme?.list ?? listTheme;
    const styles = twMerge(theme.baseStyle, className);
    return /* @__PURE__ */ jsx(Element, { ...rest, ref, className: styles, children });
  }
);
ListRoot.displayName = "MaterialTailwind.List";
var ListItem = React.forwardRef(
  ({ as, className, disabled, selected, ripple, children, ...rest }, ref) => {
    const Element = as ?? "li";
    const contextTheme = useTheme();
    const theme = contextTheme?.listItem ?? listItemTheme;
    const defaultProps = theme?.defaultProps;
    ripple ??= defaultProps?.ripple ?? true;
    const rippleEffect = ripple !== void 0 && new Ripple();
    const handleClick = (e) => {
      const onClick = rest?.onClick;
      if (ripple) {
        rippleEffect.create(e, "dark");
      }
      return typeof onClick === "function" && onClick(e);
    };
    const styles = twMerge(theme.baseStyle, className);
    return /* @__PURE__ */ jsx(
      Element,
      {
        ...rest,
        ref,
        className: styles,
        "data-selected": selected,
        "aria-disabled": disabled,
        onClick: handleClick,
        children
      }
    );
  }
);
ListItem.displayName = "MaterialTailwind.ListItem";
var ListItemStart = React.forwardRef(
  ({ as, className, disabled, selected, ripple, children, ...rest }, ref) => {
    const Element = as ?? "span";
    const contextTheme = useTheme();
    const theme = contextTheme?.listItemStart ?? listItemStartTheme;
    const styles = twMerge(theme.baseStyle, className);
    return /* @__PURE__ */ jsx(Element, { ...rest, ref, className: styles, children });
  }
);
ListItemStart.displayName = "MaterialTailwind.ListItemStart";
var ListItemEnd = React.forwardRef(
  ({ as, className, disabled, selected, ripple, children, ...rest }, ref) => {
    const Element = as ?? "span";
    const contextTheme = useTheme();
    const theme = contextTheme?.listItemEnd ?? listItemEndTheme;
    const styles = twMerge(theme.baseStyle, className);
    return /* @__PURE__ */ jsx(Element, { ...rest, ref, className: styles, children });
  }
);
ListItemEnd.displayName = "MaterialTailwind.ListItemEnd";
var List = Object.assign(ListRoot, {
  Item: ListItem,
  ItemStart: ListItemStart,
  ItemEnd: ListItemEnd
});
var list_default = List;

export {
  ListRoot,
  ListItem,
  ListItemStart,
  ListItemEnd,
  List,
  list_default
};
