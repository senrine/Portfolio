import {
  useTheme
} from "./chunk-KYDE6FLK.js";
import {
  chipDismissTriggerTheme,
  chipIconTheme,
  chipLabelTheme,
  chipTheme
} from "./chunk-GTV44CC2.js";

// src/components/chip.tsx
import * as React from "react";
import { twMerge } from "tailwind-merge";
import Ripple from "material-ripple-effects";
import { jsx } from "react/jsx-runtime";
var ChipContext = React.createContext({
  size: "md",
  color: "primary",
  variant: "solid",
  open: true,
  setOpen: () => {
  }
});
var ChipRoot = React.forwardRef(
  ({
    as,
    size,
    color,
    variant,
    className,
    open: controlledOpen,
    onOpenChange: setControlledOpen,
    children,
    ...rest
  }, ref) => {
    const Element = as ?? "div";
    const contextTheme = useTheme();
    const theme = contextTheme?.chip ?? chipTheme;
    const defaultProps = theme?.defaultProps;
    const [uncontrolledOpen, setUncontrolledOpen] = React.useState(true);
    const open = controlledOpen ?? uncontrolledOpen;
    const setOpen = setControlledOpen ?? setUncontrolledOpen;
    size ??= defaultProps?.size ?? "md";
    color ??= defaultProps?.color ?? "primary";
    variant ??= defaultProps?.variant ?? "solid";
    const styles = twMerge(
      theme.baseStyle,
      theme["size"][size],
      theme["variant"][variant][color],
      className
    );
    const contextValue = React.useMemo(
      () => ({
        size,
        color,
        variant,
        open,
        setOpen
      }),
      [size, color, variant, open, setOpen]
    );
    return open ? /* @__PURE__ */ jsx(Element, { ...rest, ref, "data-open": open, className: styles, children: /* @__PURE__ */ jsx(ChipContext.Provider, { value: contextValue, children }) }) : null;
  }
);
ChipRoot.displayName = "MaterialTailwind.Chip";
var ChipLabel = React.forwardRef(
  ({ as, className, children, ...rest }, ref) => {
    const Element = as ?? "span";
    const contextTheme = useTheme();
    const { size } = React.useContext(ChipContext);
    const theme = contextTheme?.chipLabel ?? chipLabelTheme;
    const styles = twMerge(
      theme.baseStyle,
      theme["size"][size || "md"],
      className
    );
    return /* @__PURE__ */ jsx(Element, { ...rest, ref, className: styles, children });
  }
);
ChipLabel.displayName = "MaterialTailwind.ChipLabel";
var ChipIcon = React.forwardRef(
  ({ as, className, children, ...rest }, ref) => {
    const Element = as ?? "span";
    const contextTheme = useTheme();
    const { size } = React.useContext(ChipContext);
    const theme = contextTheme?.chipIcon ?? chipIconTheme;
    const styles = twMerge(
      theme.baseStyle,
      theme["size"][size || "md"],
      className
    );
    return /* @__PURE__ */ jsx(Element, { ...rest, ref, className: styles, children });
  }
);
ChipIcon.displayName = "MaterialTailwind.ChipIcon";
var ChipDismissTrigger = React.forwardRef(({ as, ripple, className, children, ...rest }, ref) => {
  const Element = as ?? "button";
  const contextTheme = useTheme();
  const { size, color, variant, setOpen } = React.useContext(ChipContext);
  const theme = contextTheme?.chipDismissTrigger ?? chipDismissTriggerTheme;
  const defaultProps = theme?.defaultProps;
  ripple ??= defaultProps?.ripple ?? true;
  const rippleEffect = ripple !== void 0 && new Ripple();
  const handleClick = (event) => {
    setOpen?.(false);
    rest.onClick?.(event);
    const isDarkRipple = variant === "ghost" || variant === "outline" || color === "secondary" || color === "warning";
    if (ripple) {
      rippleEffect.create(event, isDarkRipple ? "dark" : "light");
    }
  };
  const styles = twMerge(
    theme.baseStyle,
    theme["size"][size || "md"],
    className
  );
  return /* @__PURE__ */ jsx(Element, { ...rest, ref, className: styles, onClick: handleClick, children: children || /* @__PURE__ */ jsx(
    "svg",
    {
      viewBox: "0 0 24 24",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      color: "currentColor",
      className: "h-full w-full",
      children: /* @__PURE__ */ jsx(
        "path",
        {
          d: "M6.75827 17.2426L12.0009 12M17.2435 6.75736L12.0009 12M12.0009 12L6.75827 6.75736M12.0009 12L17.2435 17.2426",
          stroke: "currentColor",
          strokeLinecap: "round",
          strokeLinejoin: "round"
        }
      )
    }
  ) });
});
ChipDismissTrigger.displayName = "MaterialTailwind.ChipDismissTrigger";
var Chip = Object.assign(ChipRoot, {
  Icon: ChipIcon,
  Label: ChipLabel,
  DismissTrigger: ChipDismissTrigger
});
var chip_default = Chip;

export {
  ChipContext,
  ChipLabel,
  ChipIcon,
  ChipDismissTrigger,
  Chip,
  chip_default
};
