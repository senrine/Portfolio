import {
  useTheme
} from "./chunk-KYDE6FLK.js";
import {
  inputFieldTheme,
  inputIconTheme,
  inputTheme
} from "./chunk-FC6EJMVK.js";

// src/components/input.tsx
import * as React from "react";
import { twMerge } from "tailwind-merge";
import { jsx } from "react/jsx-runtime";
var InputContext = React.createContext({
  size: "md",
  color: "primary",
  isError: false,
  isSuccess: false,
  iconPlacement: "start",
  isIconDefined: false,
  disabled: false,
  setIconPlacement: () => null,
  setIsIconDefined: () => null
});
var InputRoot = React.forwardRef(
  ({
    as,
    color,
    size,
    isPill,
    isError,
    isSuccess,
    disabled,
    className,
    children,
    ...props
  }, ref) => {
    const Element = as ?? "div";
    const contextTheme = useTheme();
    const theme = contextTheme?.input ?? inputTheme;
    const defaultProps = theme?.defaultProps;
    const [isIconDefined, setIsIconDefined] = React.useState(false);
    const [iconPlacement, setIconPlacement] = React.useState("start");
    size ??= defaultProps?.size ?? "md";
    color ??= defaultProps?.color ?? "primary";
    isPill ??= defaultProps?.isPill ?? false;
    isError ??= defaultProps?.isError ?? false;
    isSuccess ??= defaultProps?.isSuccess ?? false;
    const styles = twMerge(
      theme.baseStyle,
      theme.size[size],
      isPill && theme["isPill"],
      className
    );
    const contextValue = React.useMemo(
      () => ({
        size,
        color,
        isError,
        isSuccess,
        iconPlacement,
        isIconDefined,
        disabled,
        setIconPlacement,
        setIsIconDefined
      }),
      [
        size,
        color,
        isError,
        isSuccess,
        iconPlacement,
        isIconDefined,
        disabled,
        setIconPlacement,
        setIsIconDefined
      ]
    );
    return /* @__PURE__ */ jsx(Element, { ...props, ref, className: styles, "aria-disabled": disabled, children: /* @__PURE__ */ jsx(InputContext.Provider, { value: contextValue, children }) });
  }
);
InputRoot.displayName = "MaterialTailwind.Input";
var InputField = React.forwardRef(
  ({ type = "text", ...rest }, ref) => {
    const contextTheme = useTheme();
    const {
      size,
      color,
      iconPlacement,
      isIconDefined,
      isError,
      isSuccess,
      disabled
    } = React.useContext(InputContext);
    const theme = contextTheme?.inputField ?? inputFieldTheme;
    const styles = twMerge(
      theme.baseStyle,
      theme.size[size],
      theme.color[color],
      rest?.className,
      "peer"
    );
    const inputType = [
      "text",
      "email",
      "password",
      "search",
      "number",
      "tel",
      "url",
      "hidden"
    ].includes(type) ? type : "text";
    return /* @__PURE__ */ jsx(
      "input",
      {
        ...rest,
        ref,
        type: inputType,
        className: styles,
        disabled,
        "data-error": isError,
        "data-success": isSuccess,
        "data-icon-placement": isIconDefined ? iconPlacement : ""
      }
    );
  }
);
InputField.displayName = "MaterialTailwind.InputField";
var InputIcon = React.forwardRef(
  ({ as, placement, ...props }, ref) => {
    const Element = as ?? "span";
    const contextTheme = useTheme();
    const {
      size,
      iconPlacement,
      setIconPlacement,
      setIsIconDefined,
      isError,
      isSuccess,
      disabled
    } = React.useContext(InputContext);
    const theme = contextTheme?.inputIcon ?? inputIconTheme;
    const defaultProps = theme?.defaultProps;
    placement ??= defaultProps?.placement ?? "start";
    React.useEffect(() => {
      setIsIconDefined(true);
      return () => {
        setIsIconDefined(false);
      };
    }, []);
    React.useEffect(() => {
      setIconPlacement(placement);
      return () => {
        setIconPlacement("start");
      };
    }, [placement]);
    const styles = twMerge(
      theme.baseStyle,
      theme.size[size],
      props?.className
    );
    return /* @__PURE__ */ jsx(
      Element,
      {
        ...props,
        ref,
        className: styles,
        "data-error": isError,
        "data-success": isSuccess,
        "aria-disabled": disabled,
        "data-placement": iconPlacement
      }
    );
  }
);
InputIcon.displayName = "MaterialTailwind.InputIcon";
var Input = Object.assign(InputRoot, {
  Field: InputField,
  Icon: InputIcon
});
var input_default = Input;

export {
  InputContext,
  InputRoot,
  InputField,
  InputIcon,
  Input,
  input_default
};
