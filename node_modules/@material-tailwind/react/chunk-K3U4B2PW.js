import {
  useTheme
} from "./chunk-KYDE6FLK.js";
import {
  popoverArrowTheme,
  popoverContentTheme,
  popoverTheme,
  popoverTriggerTheme
} from "./chunk-CVARF25W.js";

// src/components/popover.tsx
import * as React from "react";
import { FloatingPortal, FloatingFocusManager } from "@floating-ui/react";
import {
  useFloating,
  useClick,
  useDismiss,
  useRole,
  useInteractions,
  useMergeRefs
} from "@floating-ui/react";
import {
  autoUpdate,
  flip as fuiFlip,
  offset as fuiOffset,
  shift,
  arrow
} from "@floating-ui/react";
import { twMerge } from "tailwind-merge";
import { jsx } from "react/jsx-runtime";
var PopoverContext = React.createContext({
  open: false,
  setOpen: () => {
  }
});
function PopoverRoot({
  open: controlledOpen,
  onOpenChange: setControlledOpen,
  placement,
  offset,
  children
}) {
  const arrowRef = React.useRef(null);
  const contextTheme = useTheme();
  const theme = contextTheme?.popover ?? popoverTheme;
  const defaultProps = theme?.defaultProps;
  const [uncontrolledOpen, setUncontrolledOpen] = React.useState(false);
  const open = controlledOpen ?? uncontrolledOpen;
  const setOpen = setControlledOpen ?? setUncontrolledOpen;
  placement ??= defaultProps?.placement ?? "bottom";
  offset ??= defaultProps?.offset ?? 10;
  const data = useFloating({
    placement,
    open,
    onOpenChange: setOpen,
    whileElementsMounted: autoUpdate,
    middleware: [
      fuiOffset(offset),
      fuiFlip({
        crossAxis: placement.includes("-"),
        fallbackAxisSideDirection: "end",
        padding: 5
      }),
      shift({ padding: 5 }),
      arrow({
        element: arrowRef,
        padding: 5
      })
    ]
  });
  const { context } = data;
  const click = useClick(context, {
    enabled: controlledOpen == null
  });
  const dismiss = useDismiss(context);
  const role = useRole(context);
  const interactions = useInteractions([click, dismiss, role]);
  const contextValue = React.useMemo(
    () => ({
      open,
      setOpen,
      arrowRef,
      ...interactions,
      ...data
    }),
    [open, setOpen, arrowRef, interactions, data]
  );
  return /* @__PURE__ */ jsx(PopoverContext.Provider, { value: contextValue, children });
}
PopoverRoot.displayName = "MaterialTailwind.Popover";
var PopoverTrigger = React.forwardRef(({ as, className, children, ...rest }, ref) => {
  const Element = as || "button";
  const contextTheme = useTheme();
  const theme = contextTheme?.popoverTrigger ?? popoverTriggerTheme;
  const { refs, getReferenceProps, open } = React.useContext(PopoverContext);
  const styles = twMerge(theme.baseStyle, className);
  const elementRef = useMergeRefs([refs?.setReference, ref]);
  return /* @__PURE__ */ jsx(
    Element,
    {
      ...rest,
      ref: elementRef,
      "data-open": open,
      className: styles,
      ...getReferenceProps && getReferenceProps(),
      children
    }
  );
});
PopoverTrigger.displayName = "MaterialTailwind.PopoverTrigger";
var PopoverContent = React.forwardRef(
  ({
    as,
    className,
    children,
    disabled,
    initialFocus,
    returnFocus,
    guards,
    modal,
    visuallyHiddenDismiss,
    closeOnFocusOut,
    order,
    ...rest
  }, ref) => {
    const Element = as || "div";
    const contextTheme = useTheme();
    const theme = contextTheme?.popoverContent ?? popoverContentTheme;
    const defaultProps = theme.defaultProps;
    const { context, refs, getFloatingProps, open, floatingStyles } = React.useContext(PopoverContext);
    disabled ??= defaultProps?.disabled ?? false;
    initialFocus ??= defaultProps?.initialFocus ?? 0;
    returnFocus ??= defaultProps?.returnFocus ?? true;
    guards ??= defaultProps?.guards ?? true;
    modal ??= defaultProps?.modal ?? false;
    visuallyHiddenDismiss ??= defaultProps?.visuallyHiddenDismiss ?? true;
    closeOnFocusOut ??= defaultProps?.closeOnFocusOut ?? true;
    order ??= defaultProps?.order ?? [
      "content"
    ];
    const styles = twMerge(theme.baseStyle, className);
    const elementRef = useMergeRefs([refs?.setFloating, ref]);
    return open ? /* @__PURE__ */ jsx(FloatingPortal, { children: /* @__PURE__ */ jsx(
      FloatingFocusManager,
      {
        order,
        modal,
        guards,
        disabled,
        returnFocus,
        initialFocus,
        closeOnFocusOut,
        visuallyHiddenDismiss,
        context,
        children: /* @__PURE__ */ jsx(
          Element,
          {
            ...rest,
            ref: elementRef,
            "data-open": open,
            style: { ...floatingStyles, ...rest?.style },
            className: styles,
            ...getFloatingProps && getFloatingProps(),
            children
          }
        )
      }
    ) }) : null;
  }
);
PopoverContent.displayName = "MaterialTailwind.PopoverContent";
var PopoverArrow = React.forwardRef(
  ({ as, className, ...rest }, ref) => {
    const Element = as || "span";
    const contextTheme = useTheme();
    const theme = contextTheme?.popoverArrow ?? popoverArrowTheme;
    const innerRef = React.useRef(null);
    const { placement, arrowRef, middlewareData } = React.useContext(PopoverContext);
    const elementRef = useMergeRefs([arrowRef, innerRef, ref]);
    const staticSide = {
      top: "bottom",
      right: "left",
      bottom: "top",
      left: "right"
    }[placement ? placement.split("-")[0] : ""];
    const styles = twMerge(theme.baseStyle, className);
    return /* @__PURE__ */ jsx(
      Element,
      {
        ...rest,
        ref: elementRef,
        style: {
          position: "absolute",
          left: middlewareData?.arrow?.x,
          top: middlewareData?.arrow?.y,
          [staticSide]: `${-innerRef?.current?.clientHeight / 2 - 1}px`,
          ...rest?.style
        },
        "data-placement": placement,
        className: styles
      }
    );
  }
);
var Popover = Object.assign(PopoverRoot, {
  Trigger: PopoverTrigger,
  Content: PopoverContent,
  Arrow: PopoverArrow
});
var popover_default = Popover;

export {
  PopoverContext,
  PopoverRoot,
  PopoverTrigger,
  PopoverContent,
  PopoverArrow,
  Popover,
  popover_default
};
