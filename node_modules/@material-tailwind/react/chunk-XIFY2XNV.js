import {
  useTheme
} from "./chunk-KYDE6FLK.js";
import {
  ratingTheme
} from "./chunk-BGYX7VND.js";

// src/components/rating.tsx
import * as React from "react";
import { twMerge } from "tailwind-merge";
import { jsx } from "react/jsx-runtime";
var Rating = React.forwardRef(
  ({
    as,
    color,
    ratedIcon,
    unratedIcon,
    count,
    value,
    onChange,
    className,
    readonly,
    ...rest
  }, ref) => {
    const Element = as ?? "div";
    const contextTheme = useTheme();
    const theme = contextTheme?.rating ?? ratingTheme;
    const defaultProps = theme?.defaultProps;
    ratedIcon ??= defaultProps?.ratedIcon ?? /* @__PURE__ */ jsx(
      "svg",
      {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        fill: "currentColor",
        className: "h-6 w-6",
        children: /* @__PURE__ */ jsx(
          "path",
          {
            fillRule: "evenodd",
            d: "M10.788 3.21c.448-1.077 1.976-1.077 2.424 0l2.082 5.007 5.404.433c1.164.093 1.636 1.545.749 2.305l-4.117 3.527 1.257 5.273c.271 1.136-.964 2.033-1.96 1.425L12 18.354 7.373 21.18c-.996.608-2.231-.29-1.96-1.425l1.257-5.273-4.117-3.527c-.887-.76-.415-2.212.749-2.305l5.404-.433 2.082-5.006z",
            clipRule: "evenodd"
          }
        )
      }
    );
    unratedIcon ??= defaultProps?.unratedIcon ?? /* @__PURE__ */ jsx(
      "svg",
      {
        xmlns: "http://www.w3.org/2000/svg",
        fill: "none",
        viewBox: "0 0 24 24",
        strokeWidth: 1.5,
        stroke: "currentColor",
        className: "h-6 w-6",
        children: /* @__PURE__ */ jsx(
          "path",
          {
            strokeLinecap: "round",
            strokeLinejoin: "round",
            d: "M11.48 3.499a.562.562 0 011.04 0l2.125 5.111a.563.563 0 00.475.345l5.518.442c.499.04.701.663.321.988l-4.204 3.602a.563.563 0 00-.182.557l1.285 5.385a.562.562 0 01-.84.61l-4.725-2.885a.563.563 0 00-.586 0L6.982 20.54a.562.562 0 01-.84-.61l1.285-5.386a.562.562 0 00-.182-.557l-4.204-3.602a.563.563 0 01.321-.988l5.518-.442a.563.563 0 00.475-.345L11.48 3.5z"
          }
        )
      }
    );
    color ??= defaultProps?.color ?? "primary";
    count ??= defaultProps?.count ?? 5;
    value ??= 0;
    readonly ??= defaultProps?.readonly ?? false;
    const [ratingValue, setRatingValue] = React.useState(() => [
      ...Array(value).fill("rated"),
      ...Array(count - value).fill("un_rated")
    ]);
    const [ratingOnHover, setRatingOnHover] = React.useState(() => [
      ...Array(count).fill("un_rated")
    ]);
    const [isHover, setIsHover] = React.useState(false);
    const baseStyles = twMerge(theme.baseStyle, theme.color[color], className);
    const iconStyle = twMerge(theme.icon);
    const renderRating = (data) => data.map((el, idx) => {
      const isRated = el === "rated";
      const elementToRender = isRated ? ratedIcon : unratedIcon;
      return React.isValidElement(elementToRender) ? React.cloneElement(elementToRender, {
        ...elementToRender?.props,
        key: idx,
        onClick: (event) => {
          if (readonly)
            return;
          const nextRating = ratingValue.map(
            (_, i) => i <= idx ? "rated" : "un_rated"
          );
          setRatingValue(nextRating);
          onChange && typeof onChange === "function" && onChange(nextRating.filter((el2) => el2 === "rated").length);
          elementToRender?.props?.onClick && elementToRender?.props?.onClick(event);
        },
        onMouseEnter: (event) => {
          if (readonly)
            return;
          const nextRating = ratingOnHover.map(
            (_, i) => i <= idx ? "rated" : "un_rated"
          );
          setIsHover(true);
          setRatingOnHover(nextRating);
          elementToRender?.props?.onMouseEnter && elementToRender?.props?.onMouseEnter(event);
        },
        onMouseLeave: (event) => {
          if (!readonly) {
            setIsHover(false);
          }
          elementToRender?.props?.onMouseLeave && elementToRender?.props?.onMouseLeave(event);
        },
        "data-slot": "icon",
        className: twMerge(
          iconStyle,
          elementToRender?.props?.className
        )
      }) : React.createElement(elementToRender, {
        key: idx,
        onClick: () => {
          if (readonly)
            return;
          const nextRating = ratingValue.map(
            (_, i) => i <= idx ? "rated" : "un_rated"
          );
          setRatingValue(nextRating);
          onChange && typeof onChange === "function" && onChange(nextRating.filter((el2) => el2 === "rated").length);
        },
        onMouseEnter: () => {
          if (readonly)
            return;
          const nextRating = ratingOnHover.map(
            (_, i) => i <= idx ? "rated" : "un_rated"
          );
          setIsHover(true);
          setRatingOnHover(nextRating);
        },
        onMouseLeave: () => {
          if (!readonly) {
            setIsHover(false);
          }
        },
        className: iconStyle
      });
    });
    return /* @__PURE__ */ jsx(Element, { ...rest, ref, className: baseStyles, children: isHover ? renderRating(ratingOnHover) : renderRating(ratingValue) });
  }
);
Rating.displayName = "MaterialTailwind.Rating";
var rating_default = Rating;

export {
  Rating,
  rating_default
};
